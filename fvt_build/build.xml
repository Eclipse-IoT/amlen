<?xml version="1.0" encoding="UTF-8"?>
<!--
# Copyright (c) 2012-2021 Contributors to the Eclipse Foundation
# 
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
# 
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
# 
# SPDX-License-Identifier: EPL-2.0
#
-->

<project name="fvt" default="buildfvt" basedir=".">
	<property name="build.dir" value="${basedir}"/>
	<property name="fvt.build.dir" value="${basedir}"/>

	<echo/>
	<echo/>
	<echo>==== invoking ant build for fvt ====</echo>
	<echo message="os.name = ${os.name}" />
	<echo message="os.arch = ${os.arch}" />
	<echo message="os.version = ${os.version}" />

	<!-- Properties already set by RTC build include:
	 - buildLabel
	 - buildResultUUID
	 -->

	<!-- Load local properties -->
	<property file="${fvt.build.dir}/fvt_build.properties"/>
	<property name="fvt.workspace" value="${fvt.build.dir}/.."/>

	<property name="fvt.ship.dir" value="${fvt.workspace}/fvt_ship"/>
	<property name="fvt.ship.common.dir" value="${fvt.ship.dir}/common"/>
	<property name="fvt.ship.common_src.dir" value="${fvt.ship.dir}/common_src"/>
	<property name="fvt.ship.jms_SamplesTest.dir" value="${fvt.ship.dir}/jms_SamplesTest"/>
	<property name="fvt.ship.ws_subprotocols.dir" value="${fvt.ship.dir}/ws_subprotocols"/>
<!--	<property name="fvt.ship.gui_test.dir" value="${fvt.ship.dir}/gui_test"/> -->
	<property name="fvt.ship.MQConnectivity.dir" value="${fvt.ship.dir}/MQConnectivity_tests"/>
	<property name="fvt.ship.client_proxy.dir" value="${fvt.ship.dir}/ClientProxy_tests"/>

	<!-- if we have a buildResultUUID, we are a jazz build -->
	<condition property="is.jazz.build">
	    <isset property="buildResultUUID" />
	</condition>
	<condition property="is.manual.build">
		<not><isset property="is.jazz.build" /></not>
	</condition>

	<!-- only publish if we're told to, and have somewhere to put it -->
	<condition property="can.publish">
		<and>
			<istrue value="${publish}" />
			<isset property="buildLabel" />
		</and>
	</condition>

	<!-- If dockerOnlyBuild is true, do Docker Onl build, no Bedrock included -->
	<condition property="dockerOnly.build">
		  <equals arg1="${dockerOnlyBuild}" arg2="true"/>
	</condition>

	<!-- If we don't have a build label, set a default -->
	<property name="buildLabel" value="11111111-1111" />

	<!-- Load jazz build toolkit if its there -->
	<import file="${buildToolkit}/BuildToolkitTaskDefs.xml" optional="true"/>

	<!-- main fvt target -->
	<target name="buildfvt" depends="fvt-clean, fvt-init, jazz-build, manual-build" />

	<target name="jazz-build" if="is.jazz.build">
		<antcall target="build-scripts"/>
		<antcall target="build-testTools"/>
		<antcall target="build-MQxrscada"/>
		<antcall target="build-JMStck"/>
		<antcall target="build-MQConnectivity"/>
		<antcall target="build-ClientProxy"/>
		<!-- copy fvt files fvt_ship tree -->
		<antcall target="fvt_copy" />
		<antcall target="fvt_jms_tck_copy" />
		<!-- we call the other test components after calling all of the projects under fvt -->
		<antcall target="build-svt"/>
		<antcall target="build-pvt"/>
		<antcall target="build-publish"/>
		<!-- We then publish if this is not a manual build -->
		<if>
			<equals arg1="${dockerOnly.build}" arg2="true" />
			<then>
				<echo message="Docker only build set" />
			</then>
			<else>
				<echo message="Docker only build not set" />
			</else>
		</if>

		<!-- for now we are letting the server_build send the staf event -->
		<!-- <antcall target="staf-event"/> -->
	</target>

	<target name="manual-build" if="is.manual.build">
		<antcall target="build-scripts"/>
		<antcall target="build-testTools"/>
		<antcall target="build-MQxrscada"/>
		<antcall target="build-JMStck"/>
		<antcall target="build-MQConnectivity"/>
		<antcall target="build-ClientProxy"/>
		<!-- copy fvt files fvt_ship tree -->
		<antcall target="fvt_copy" />
		<!-- we call the other test components after calling all of the projects under fvt -->
		<antcall target="build-svt"/>
		<antcall target="build-pvt"/>
	</target>

	<target name="build-scripts">
		<build.activity label="Building fvt_scripts" activityIdProperty="buildingFvtScriptsId" />
		<ant dir="${fvt.workspace}/fvt_scripts" inheritRefs="false"/>
	</target>

	<target name="build-MQxrscada">
		<build.activity label="Building MQ xrscada test" activityIdProperty="buildMQxrscadaId" />
		<ant dir="${fvt.workspace}/fvt_MQxrscada" inheritRefs="false"/>
	</target>

	<target name="build-JMStck">
		<build.activity label="Building fvt_jms_tck" activityIdProperty="buildingFvtJMStckId" />
		<ant dir="${fvt.workspace}/fvt_jms_tck" inheritRefs="false"/>
	</target>

	<target name="build-MQConnectivity">
		<build.activity label="Building MQConnectivity" activityIdProperty="buildingMQConnectivityId" />
		<ant dir="${fvt.workspace}/fvt_MQConnectivity" inheritRefs="false"/>
	</target>

	<target name="build-ClientProxy" if="baremetal.build">
		<build.activity label="Building ClientProxy" activityIdProperty="buildingClientProxyId" />
		<ant dir="${fvt.workspace}/fvt_client_proxy" inheritRefs="false"/>
	</target>

	<!-- build svt projects after fvt image. svt may depend on server build in the future. -->
	<target name="build-svt">
		<build.activity label="Running SVT build" activityIdProperty="startSvtBuildId" />
		<ant dir="${fvt.workspace}/svt_build" inheritRefs="false"/>
	</target>

	<!-- build pvt projects after svt image. pvt may depend on server build in the future. -->
	<target name="build-pvt">
		<build.activity label="Running PVT build" activityIdProperty="startPvtBuildId" />
		<ant dir="${fvt.workspace}/pvt_build" inheritRefs="false"/>
	</target>

	<!-- build testTools projects after fvt image. testTools may depend on server build in the future. -->
	<target name="build-testTools">
		<build.activity label="Running testTools build" activityIdProperty="startTestToolsBuildId" />
		<ant dir="${fvt.workspace}/testTools_build" inheritRefs="false"/>
	</target>

	<!-- Build publish -->
	<target name="build-publish" if="can.publish">
		<build.activity label="Publishing test code" activityIdProperty="startTestPublishId" />

		<!-- make dir structure -->
		<mkdir dir="publish/${buildLabel}/fvt"/>
		<mkdir dir="publish/${buildLabel}/svt"/>
		<mkdir dir="publish/${buildLabel}/pvt"/>
		<mkdir dir="publish/${buildLabel}/tools"/>

		<exec dir="${basedir}" executable="${basedir}/build_publish.sh" resultproperty="app-retcode" resolveexecutable="true">
			<arg value="${fvt.workspace}"/>
			<arg value="${RSYNCCMD}" />

			<env key="BUILD_LABEL" value="${buildLabel}" />
			<env key="PUBLISH_DIR" value="${publishTest}" />
			<env key="PERSONAL_BUILD" value="${personalBuild}" />
			<env key="IMABUILDER" value="${IMABUILDER}" />
			<env key="IMAGROUP" value="${IMAGROUP}" />
			<env key="VIRTUALBUILDSERVER" value="${VirtualBuildServer}" />
			<env key="PUBLISH_ROOT" value="${publishRoot}" />
			<env key="BLD_TYPE" value="${buildType}" />
			<env key="DOCKERONLYBUILD" value="${dockerOnlyBuild}" />
			<env key="IMARELEASE" value="${imaRelease}" />
		</exec>

		<condition property="app-errcode">
			<not>
				<equals arg1="${app-retcode}" arg2="0"/>
			</not>
		</condition>
		<fail message="build-appliance failed with exit code ${app-retcode}">
			<condition>
				<isset property="app-errcode"/>
			</condition>
		</fail>
	</target>

	<!-- Copy the fvt files so they can be accessed from the publish script. -->
	<target name="fvt_copy">
		<copy todir="${fvt.ship.dir}">
			<fileset dir="${fvt.workspace}/fvt_scripts" >
				<exclude name="**/.*"/>
				<exclude name="**/build.xml"/>
			</fileset>
		</copy>
		<copy todir="${fvt.ship.MQConnectivity.dir}">
			<fileset dir="${fvt.workspace}/fvt_MQConnectivity/scripts" >
				<exclude name="**/.*"/>
				<exclude name="**/build.xml"/>
			</fileset>
		</copy>
		<chmod dir="${fvt.ship.dir}" perm="777" includes="**/*.sh"/>
	</target>

	<!-- Copy the fvt jms_tck files so they can be accessed from the publish script. -->
	<target name="fvt_jms_tck_copy">
		<copy todir="${fvt.ship.dir}/jms_tck">
			<fileset dir="${fvt.workspace}/fvt_jms_tck" >
				<exclude name="**/.*"/>
				<exclude name="**/build.xml"/>
			</fileset>
		</copy>
		<chmod dir="${fvt.ship.dir}/jms_tck" perm="777" includes="**/*"/>
	</target>

	<!-- Initialize the build environment -->
	<target name="fvt-init">
		<build.activity label="Initializing FVT environment" activityIdProperty="initFvtEnvId" />
		<mkdir dir="${fvt.ship.dir}"/>
		<mkdir dir="${fvt.ship.common.dir}"/>
		<mkdir dir="${fvt.ship.common_src.dir}"/>
		<mkdir dir="${fvt.ship.jms_SamplesTest.dir}"/>
		<mkdir dir="${fvt.ship.ws_subprotocols.dir}"/>
<!--		<mkdir dir="${fvt.ship.gui_test.dir}"/> -->
		<mkdir dir="${fvt.ship.MQConnectivity.dir}"/>
		<mkdir dir="${fvt.ship.client_proxy.dir}"/>
		<!-- sort out line endings -->
		<fixcrlf eol="unix" srcdir="${fvt.build.dir}">
			<include name="build_publish.sh"/>
		</fixcrlf>

		<!-- change file permissions of scripts -->
		<chmod perm="755">
			<fileset id="scripts" dir="${fvt.build.dir}">
				<include name="build_publish.sh"/>
			</fileset>
		</chmod>

		<!-- remove all build_logs then create new log dir -->
		<!-- delete dir="${fvt.workspace}/build_log" quiet="true"/-->
		<mkdir dir="${fvt.workspace}/build_log"/>
	</target>

	<target name="fvt-clean">
		<build.activity label="Cleaning FVT build" activityIdProperty="cleanFvtEnvId" />
		<delete dir="${fvt.ship.common.dir}"/>
		<delete dir="${fvt.ship.common_src.dir}"/>
		<delete dir="${fvt.ship.jms_SamplesTest.dir}"/>
		<delete dir="${fvt.ship.ws_subprotocols.dir}"/>
<!--		<delete dir="${fvt.ship.gui_test.dir}"/>  -->
		<delete dir="${fvt.ship.dir}"/>
		<delete dir="${fvt.ship.MQConnectivity.dir}"/>
		<delete dir="${fvt.ship.ClientProxy.dir}"/>
	</target>

	<!-- Macro for starting a build activity - starts a jazz activity if available -->
	<macrodef name="build.activity">
		<attribute name="label" />
		<attribute name="activityIdProperty" />
		<attribute name="autoComplete" default="true" />
		<sequential>
			<echo>==================================</echo>
			<echo> @{label}</echo>
			<echo>==================================</echo>
			<antcall target="jazz.build.activity">
				<param name="label" value="@{label}" />
				<param name="activityIdProperty" value="@{activityIdProperty}" />
				<param name="autoComplete" value="@{autoComplete}" />
			</antcall>
		</sequential>
	</macrodef>
	<target name="jazz.build.activity" if="is.jazz.build">
		<startBuildActivity label="${label}"
			activityIdProperty="${activityIdProperty}"
			buildResultUUID="${buildResultUUID}"
			repositoryAddress="${repositoryAddress}"
			autoComplete="${autoComplete}"
			userId="${jazzBuildUserId}"
			passwordFile="${jazzBuildUserEncryptedPasswdFile}"/>
	</target>
</project>
