<?xml version="1.0" encoding="UTF-8"?>
<!--Arbortext, Inc., 1988-2011, v.4002-->
<!DOCTYPE dita PUBLIC "-//OASIS//DTD DITA Composite//EN"
 "ditabase.dtd">
<?Pub Inc?>
<dita xml:lang="en-us">
<concept id="keyconcepts" xml:lang="en-us">
<title>Key Concepts</title>
<!--To optimize search results, add tags that clarify product name, target platform, or other contexts. Use Edit > Un Comment to have the tags made live.-->
<!--<titlealts><navtitle></navtitle><searchtitle></searchtitle></titlealts>-->
<!--Put your short description next; used for first paragraph and abstract.-->
<shortdesc>An introduction to terminology and concepts associated
with ISM.</shortdesc>
<!--To optimize PDF retrievability, add prolog and indexing tags that help crystalize why users should be looking up this topic (purpose, task, and what they will learn)-->
<!--<prolog><metadata><keywords><indexterm></indexterm></keywords></metadata></prolog>-->
<conbody>
<section><title>Publish/Subscribe</title><p>Publish⁄subscribe messaging
allows you to decouple the provider of information, from the consumers
of that information. The sending application and receiving application
do not need to know anything about each other for the information
to be sent and received.</p><p>A typical publish/subscribe system
has more than one publisher and more than one subscriber, and often,
more than one queue manager. An application can be both a publisher
and a subscriber.
</p><p>The provider of information is called a publisher. Publishers
supply information about a subject, without needing to know anything
about the applications that are interested in that information. Publishers
generate this information in the form of messages, called publications
that they want to publish and define the topic of these messages.
</p><p>The consumer of the information is called a subscriber. The
subscriber decides what information it is interested in, and then
waits to receive that information. Subscribers can receive information
from many different publishers, and the information they receive can
also be sent to other subscribers.
</p><p>The information is sent in a WebSphere® MQ message, and the
subject of the information is identified by a topic string. The publisher
specifies the topic string when it publishes the information, and
the subscriber specifies the topic strings on which it wants to receive
publications. The subscriber is sent information about only those
topic strings to which it subscribes.
</p><p>For more information about Publish/Subscribe, see <q>Publish⁄Subscribe
User's Guide</q> in &lt;link to WMQ7.5 IC></p><p></p></section>
<section><title>WebSockets</title><p>&lt;link to mobile feature pack></p
></section>
<section><title>Quality of Service and message persistence</title
><p>There are three qualities of service for delivering publications:
"at most once", "at least once" and "exactly once". <ul>
<li>At most once: QoS=0<p>The message is delivered at most once, or
it is not delivered at all. Its delivery across the network is not
acknowledged. The message is not stored. The message might be lost
if the client is disconnected, or if the server fails. QoS=0 is the
fastest mode of transfer. It is sometimes called "fire and forget".</p
></li>
<li>At least once: QoS=1<p>The message is always delivered at least
once. The message must be stored locally at the sender and the receiver
until it is processed. If the sender does not receive an acknowledgment,
the message is sent again with the DUP flag set until an acknowledgment
is received. As a result receiver can be sent the same message multiple
times, and might process it multiple times.</p></li>
<li>Exactly once: QoS=2<p>The message is always delivered exactly
once. The message must be stored locally at the sender and the receiver
until it is processed. QoS=2 is the safest, but slowest mode of transfer.
It takes at least two pairs of transmissions between the sender and
receiver before the message is deleted from the sender. The message
can be processed at the receiver after the first transmission.</p
></li>
</ul></p><p>&lt;Insert additional information around message store>. </p
><p>Publication messages are made persistent if they are sent with
a quality of service of "at least once", or "exactly once". You can
implement your own persistence mechanism on the client, or use the
default persistence mechanism provided with the client. Persistence
works in both directions, for publications sent to or from the client. </p
><p>For more information about Quality of Service and persistence,
see <q>Client programming concepts</q> and <q>MQTT clean sessions</q
> in &lt;link to WMQ7.5 IC>.</p><?Pub Caret 122?></section>
</conbody>
</concept>
</dita>
<?Pub *0000004750?>
