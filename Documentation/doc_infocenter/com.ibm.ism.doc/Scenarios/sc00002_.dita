<?xml version="1.0" encoding="UTF-8"?>
<!--Arbortext, Inc., 1988-2011, v.4002-->
<!DOCTYPE concept PUBLIC  "-//OASIS//DTD DITA Concept//EN"
 "concept.dtd">
<?Pub Sty _display FontColor="red"?>
<?Pub Inc?>
<concept id="sc_00002" xml:lang="en-us">
<title>Scenario: Fan-in per device notification</title><?Pub Caret -2?>
<shortdesc>In this scenario, many publisher devices publish messages
to one topic string. There is one subscriber device that subscribes
to this topic string.</shortdesc>
<conbody>
<section><title>Background to this scenario</title><p>A hospital wants
to be able to monitor the blood pressure of individual patients. Patients
take their blood pressure by using a device at home. An application
on the device publishes to a topic string. These publishing devices
sit in the internet. The published message contains information including
the patient ID, blood pressure, and timestamp.</p><p>At the hospital,
the <ph conref="../TextEntities.dita#TextEntities/ISMappliance"></ph> sits
within the DMZ. An application that runs on a device within the hospital
intranet subscribes to the blood pressure device topic string, and
remotely monitors the blood pressure of each patient. Alerts are generated
when necessary. Complete the steps in the following section to understand
how to set up this scenario.</p><p> </p></section>
<section><title>Planning and implementing the solution</title><p>Use
the following information to help you to plan, and implement a fan-in
per device notification scenario.</p><dl><dlentry>
<dt>Understanding your publish/subscribe architecture</dt>
<dd><p>In this scenario, there are many publisher devices that publish
messages to one topic string. There is one subscriber device that
subscribes to this topic string. Therefore, this scenario is a fan-in
per device notification. The following diagram shows the architecture
of a fan-in per device notification scenario.</p><image
href="../Planning/ov00101b_v2.gif"><alt>Fan-in per device notification
diagram. Many publisher devices publish messages to one topic string.
There is one subscriber device that subscribes to the topic string.</alt>
</image></dd>
</dlentry><dlentry>
<dt>Understanding the required messaging behavior for your solution</dt>
<dd><p>Do you want durable or non-durable subscriptions? What quality
of service do you need?</p><p>If a subscription is durable, when the
subscribing application disconnects, the subscription remains in place
and can be used by the subscribing application when it reconnects.
In this scenario, the subscriptions are durable because only one message
per day is being sent from patients that are high risk, and therefore
it is important that the subscriber device receives each message.</p><p>A
quality of service of 1 is appropriate because the message delivery
across the network must be guaranteed at least once. It is acceptable
to have duplicates as any duplicates can be discarded. QoS 1 messages
are persistent. The message is stored on the <ph
conref="../TextEntities.dita#TextEntities/ISMappliance"></ph> until
the message is received by the subscriber of the message. </p></dd>
</dlentry><dlentry>
<dt>Planning your solution</dt>
<dd><p>In this scenario, consider the following key points: <ul>
<li>Which protocol is appropriate?<p><ph
conref="../TextEntities.dita#TextEntities/ISMappliance"></ph> natively
supports MQTT and JMS. <!--You can also install your own protocol by using the protocol plug-in.-->You
must consider which protocol is appropriate for your business needs.
The amount of data sent between the devices is small. If some patients
do not have internet access, then expensive mobile connections are
used. The messages between the devices must be sent reliably. The
MQTT protocol is designed for exchanging messages between small devices
on low bandwidth, or expensive connections, and to send messages reliably.
Therefore, MQTT protocol is appropriate in this scenario. </p></li>
<li>What message size is appropriate?<p>In this scenario, the publisher
devices send small, persistent messages. The information that is contained
within the message is about patient ID, blood pressure, and time.
Therefore, the message can be relatively small. You can limit the
message size that is allowed to be sent through <ph
conref="../TextEntities.dita#TextEntities/ISMappliance"></ph> by using
the maximum message size attribute of an endpoint. For more information
about endpoints, see <xref format="dita" href="../Overview/ov00060.dita"
scope="local" type="concept">Message hub, endpoints, and policies</xref>.</p></li>
<li>What message count is appropriate?<p>Consider what maximum message
count is sensible for your messaging needs. In this scenario, the
quality of service is 1, so messages are stored until a subscriber
receives the message. Therefore, a higher message count might typically
be considered. </p></li>
<li>What is the maximum number of topic levels that you need?<p>You
can have up to 32 levels in a topic string. Fewer levels are easier
to manage, but many levels might be required to set up specific solutions.
In this scenario, the topic string length can be relatively short.
For example, <codeph>Hospital name/Blood Pressure</codeph>. By including
the level of <codeph>/Blood Pressure</codeph>, the hospital can easily
include other measurements, such as heart rate, in the future. For
example, the topic string <codeph>Hospital name/Heart Rate</codeph> might
be added.</p> </li>
<li>How are you going to ensure that all of your user IDs are unique?<p>In
this scenario, it is crucial that all user IDs are unique so that
the blood pressure for each patient is recorded against the correct
patient. In this scenario, you might decide to use the patient ID
number as that number is unique to each patient. </p></li>
<li>What message depth is appropriate?<p>When the maximum message
depth is reached, you cannot publish any more updates to that topic
string until the number of messages is reduced. All devices publish
to the same topic string, therefore you need to ensure that the maximum
message depth is sufficient to cope with the messages that are published
from a given number of patients.  </p></li>
</ul></p><p>For more information about planning your solution, see <xref
format="dita" href="../Planning/pl00001_.dita" scope="local"
type="concept">Planning</xref>.</p></dd>
</dlentry><dlentry>
<dt>Writing your applications</dt>
<dd><p>In this scenario, you must decide the name of the topic strings
that you are publishing and subscribing to. For this messaging pattern,
each publisher must publish to one topic string. The subscriber device
subscribes to the same topic string. In this scenario, the name of
the topic string is <codeph>Hospital/Blood Pressure</codeph>.</p></dd>
</dlentry><dlentry>
<dt>Setting up your <ph
conref="../TextEntities.dita#TextEntities/ISMappliance"></ph> infrastructure,
and security</dt>
<dd><p>Create the infrastructure by configuring message hubs and endpoints.
Set up your security by creating connection and messaging policies. </p><p>In
this scenario, the hospital requires one message hub because there
is one goal - recording blood pressure. The hospital requires two
endpoints to ensure that internal and external network traffic is
kept separate.</p><p>Complete the following steps to <xref format="dita"
href="../Administering/ad00360_.dita" scope="local" type="concept">set
up a message hub and endpoints</xref> for this scenario: </p><p><ol>
<li>Create your message hub. A message hub is an organizational configuration object to collect the
         endpoints, connection policies, and messaging policies that are associated with a specific
         goal in a single place. In this scenario, the message hub is called <codeph>Blood Pressure
          Monitoring
         Hub</codeph>.<lines>
            curl -X POST \
                -H 'Content-Type: application/json'  \
                -d  '{
                         "MessageHub":  {
                            "Blood Pressure Monitoring Hub":  {
                                 "Description": "Message Hub for monitoring blood pressure "
                            }
                         }
                      }
                    '  \
                 http://127.0.0.1:9089/ima/v1/configuration</lines></li>
<li>Create your connection policies. A connection policy is used to authorize a client to connect to
         an endpoint.<ul>
          <li>Create a connection policy for the publishers. In this scenario, the connection policy
           is called <codeph>Blood Pressure Monitoring External ConPol</codeph>.<p>In this scenario,
            the hospital restricts publisher access so that the publisher device must use MQTT
            protocol. Additionally, publisher access is restricted on appliance messaging group,
            where all publishers must be a member of the <codeph>Patients</codeph> group.</p></li>
          <li>Create a connection policy for the subscriber. In this scenario, the connection policy
           is called <codeph>Blood Pressure Monitoring Internal ConPol</codeph>.<p>In this scenario,
            the hospital restricts subscriber access so that the subscriber device must use MQTT
            protocol.</p></li>
         </ul><p>You can use the following cURL commands to create the connection
          policies:<lines>
            curl -X POST \
                -H 'Content-Type: application/json'  \
                -d  '{
                         "ConnectionPolicy":  {
                            "Blood Pressure Monitoring External ConPol":  {
                            "UserID": "*",
                            "Protocol": "MQTT",
                            "AllowDurable": false,
                            "Description": "Hospital external connection policy"
                            }
                         }
                      }
                    '  \
                 http://127.0.0.1:9089/ima/v1/configuration</lines><lines>
            curl -X POST \
                -H 'Content-Type: application/json'  \
                -d  '{
                         "ConnectionPolicy":  {
                            "Blood Pressure Monitoring Internal ConPol":  {
                            "UserID": "*",
                            "Protocol": "MQTT",
                            "AllowDurable": false,
                            "Description": "Hospital internal connection policy"
                            }
                         }
                      }
                    '  \
                 http://127.0.0.1:9089/ima/v1/configuration</lines></p></li>
<li>Create your topic policies. A topic policy is a messaging policy that is used to authorize a
         client to publish or subscribe to a topic.<ul>
          <li>Create a topic policy for the publisher. In this scenario, the topic policy is called
            <codeph>Blood Pressure Monitoring External TopicPol</codeph>.<p>The hospital restricts
            publisher access so that the publisher devices can publish to the topic string
             <codeph>Hospital name/Blood Pressure</codeph> only. </p></li>
          <li>Create a topic policy for the subscriber. In this scenario, the topic policy is called
            <codeph>Blood Pressure Monitoring Internal TopicPol</codeph>.<p>The hospital restricts
            subscriber access so that the subscriber device can subscribe to the topic string
             <codeph>Hospital name/Blood Pressure</codeph>.</p></li>
         </ul><p>You can use the following cURL commands to create the topic
          policies:<lines>
            curl -X POST \
                -H 'Content-Type: application/json'  \
                -d  '{
                         "TopicPolicy":  {
                            "Blood Pressure Monitoring External TopicPol":  {
                               "Topic": "Hospital name/Blood Pressure",
                               "UserID": "*",
                               "ActionList": "Subscribe",
                               "Protocol": "MQTT",
                               "MaxMessages": 5000,
                               "Description": "Hospital external topic policy"
                            }
                         }
                      }
                    '  \
                 http://127.0.0.1:9089/ima/v1/configuration</lines><lines>
            curl -X POST \
                -H 'Content-Type: application/json'  \
                -d  '{
                         "TopicPolicy":  {
                            "Blood Pressure Monitoring Internal TopicPol":  {
                               "Topic": "Hospital name/Blood Pressure",
                               "UserID": "*",
                               "ActionList": "Publish",
                               "Protocol": "MQTT",
                               "MaxMessages": 5000,
                               "Description": "Hospital internal topic policy"
                            }
                         }
                      }
                    '  \
                 http://127.0.0.1:9089/ima/v1/configuration</lines></p></li>
<li>Create your endpoints. An endpoint authorizes a client to connect to the <ph
          conref="../TextEntities.dita#TextEntities/ISMappliance"/> on one, or all configured
         ethernet interfaces, and a specific port. You create endpoints on a message hub.<ul>
          <li>Create an endpoint for internet network requests. In this scenario, the endpoint is
           called <codeph>Blood Pressure Monitoring External Endpoint</codeph>. Apply the
            <codeph>Blood Pressure Monitoring External ConPol</codeph>, and the <codeph>Blood
            Pressure Monitoring External TopicPol</codeph> to the endpoint.</li>
          <li>Create an endpoint for intranet network requests. In this scenario, the endpoint is
           called <codeph>Blood Pressure Monitoring Internal Endpoint</codeph>. Apply the
            <codeph>Blood Pressure Monitoring Internal ConPol</codeph>, and the <codeph>Blood
            Pressure Monitoring Internal TopicPol</codeph> to the endpoint.</li>
         </ul><p>You can use the following cURL commands to create the
          endpoints:<lines>
            curl -X POST \
                -H 'Content-Type: application/json'  \
                -d  '{
                         "Endpoint":  {
                            "Blood Pressure Monitoring External Endpoint":  {
                               "Enabled": true,
                               "Port": 1884,
                               "MaxMessageSize": "1024KB",
                               "ConnectionPolicies": "Blood Pressure Monitoring External ConPol",
                               "TopicPolicies": "Blood Pressure Monitoring External TopicPol",
                               "MessageHub": "Blood Pressure Monitoring Hub",
                               "Protocol": "MQTT",
                               "Interface": "All",
                               "Description": "Hospital external endpoint"
                            }
                         }
                      }
                    '  \
                 http://127.0.0.1:9089/ima/v1/configuration</lines><lines>
            curl -X POST \
                -H 'Content-Type: application/json'  \
                -d  '{
                         "Endpoint":  {
                            "Devices Update Internal Endpoint":  {
                               "Enabled": true,
                               "Port": 1885,
                               "MaxMessageSize": "1024KB",
                               "ConnectionPolicies": "Blood Pressure Monitoring Internal ConPol",
                               "TopicPolicies": "Blood Pressure Monitoring Internal TopicPol",
                               "MessageHub": "Blood Pressure Monitoring Hub",
                               "Protocol": "MQTT",
                               "Interface": "All",
                               "Description": "Hospital internal endpoint"
                            }
                         }
                      }
                    '  \
                 http://127.0.0.1:9089/ima/v1/configuration</lines></p></li>
</ol></p></dd>
</dlentry><dlentry
conref="sc00001_.dita#sc_00001/TestYourSolutionForInformationAbout">
<dt>Test your solution</dt>
<dd><p>For information about troubleshooting any problems that arise
during testing, see <xref format="dita"
href="../Troubleshooting/tr10000_.dita" scope="local" type="concept">Troubleshooting</xref>.</p></dd>
</dlentry><dlentry
conref="sc00001_.dita#sc_00001/MonitoringYourSolutionThereAreVario">
<dt>Monitoring your solution</dt>
<dd><p>There are various statistics that you can <xref format="dita"
href="../Monitoring/admin00008_.dita" scope="local" type="concept">monitor</xref>.
In this scenario, use <xref format="dita"
href="../Monitoring/admin00016.dita" scope="local" type="concept">topic
monitor</xref>, <xref format="dita" href="../Monitoring/admin00009.dita"
scope="local" type="concept">connection monitor</xref>, and <xref
format="dita" href="../Monitoring/admin00022.dita" scope="local"
type="concept">subscription monitor</xref> to understand the health
of the solution. </p></dd>
</dlentry><dlentry
conref="sc00001_.dita#sc_00001/StrengtheningYourSecurityYouCanIncr">
<dt importance="optional">Strengthening your security</dt>
<dd><p>You can increase the level of security of a solution in a number
of ways:</p><ul>
<li>Using a server certificate.<ol>
<li>Create a <xref format="dita" href="../Administering/ad00710_.dita"
scope="local" type="task">certificate profile</xref>.</li>
<li>Create a <xref format="dita" href="../Administering/ad00740_.dita"
scope="local" type="task">security profile</xref> to encrypt wire
traffic. <ul>
<li>Set <parmname>UsePasswordAuthentication</parmname> to <userinput>True</userinput> on
your security profile in order to force authentication on user ID
and password.</li>
</ul></li>
<li>Apply the security profile to the <userinput>Blood Pressure Monitoring
External Endpoint</userinput> and the <userinput>Blood Pressure Monitoring
Internal Endpoint</userinput>.</li>
</ol><p>For more information about certificates, see <xref format="dita"
href="../Security/se00005_.dita" scope="local" type="concept">Transport
level security</xref>.</p></li>
<li>Using a client certificate. You must have installed a sever certificate
before you use a client certificate.<ol>
<li>Upload a client certificate, or CA certificate and key on each
client.</li>
<li>Add the specific client certificate, or the CA certificate to
the <uicontrol>trustStore</uicontrol> on the <ph
conref="../TextEntities.dita#TextEntities/ISMappliance"></ph> server.
The <uicontrol>trustStore</uicontrol> points to a file that contains
trusted certificates so that the server can authenticate the client. </li>
</ol></li>
<li>Using FIPS.<p>FIPS increases message security by using cryptography
that complies with the Federal Information Processing Standards (FIPS).
Enable FIPS mode by setting the <parmname>FIPS</parmname> parameter
to <userinput>True</userinput>. You can set <parmname>FIPS</parmname> to <userinput>True</userinput> either
by using the command line, or by using the <ph
conref="../TextEntities.dita#TextEntities/ISMgui"></ph>. For more
information about enabling FIPS mode, see <xref format="dita"
href="../Administering/ad00330_.dita" scope="local" type="concept">Configuring
security</xref>.</p></li>
</ul></dd>
</dlentry></dl></section>
</conbody>
<?tm 1413223988 0?>
</concept>
<?Pub *0000014730?>
