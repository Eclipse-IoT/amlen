<?xml version="1.0" encoding="UTF-8"?>
<!--Arbortext, Inc., 1988-2011, v.4002-->
<!DOCTYPE concept PUBLIC  "-//OASIS//DTD DITA Concept//EN"
 "concept.dtd">
<?Pub Sty _display FontColor="red"?>
<?Pub Inc?>
<concept id="sc_00003" xml:lang="en-us">
<title>Scenario: Fan-out per device notification</title>
<shortdesc>In this scenario, publisher devices publish messages to
many topic strings. Each topic string has only one subscriber device.</shortdesc>
<conbody>
<section><title>Background to this scenario</title><p>A hire car company
wants to be able to instruct each car in the fleet to lock or unlock.
These commands are sent from a number of publishing devices. An application
on each of those publishing devices connects to the <ph
conref="../TextEntities.dita#TextEntities/ISMappliance"></ph>, and
sends messages on specific topic strings to the subscriber devices.
The publishing devices sit within the company intranet. </p><p>Each
car in the fleet contains a embedded subscriber device with a receiving
application on it. The application on that subscriber device connects
to the <ph conref="../TextEntities.dita#TextEntities/ISMappliance"></ph>,
and can receive messages that are published to their specific topic
string. The subscriber device sits within the internet. The publishing
and receiving devices communicate by using satellites. The <ph
conref="../TextEntities.dita#TextEntities/ISMappliance"></ph> sits
within the DMZ. Complete the steps in the following section to understand
how to set up this scenario. </p></section>
<section><title>Planning and implementing the solution</title><p>Use
the following information to help you to plan, and implement your
fan-out per device notification scenario.</p><dl><dlentry>
<dt>Understanding your publish/subscribe architecture</dt>
<dd><p>In this scenario, one publisher device publishes messages to
many topic strings. There are many subcriber devices. Each topic string
has one subscriber device that runs a receiving application. Therefore,
this scenario is a fan-out per device notification scenario. The following
diagram shows the architecture of this fan-out per device notification
scenario.</p><image href="../Planning/ov00101c_v2.gif"><alt>fan-out per
device diagram. One publisher device publishes messages to many topic
strings. Each message has only one subscriber device.</alt></image></dd>
</dlentry><dlentry>
<dt>Understanding the required messaging behavior for your solution</dt>
<dd><p>Do you want durable or non-durable subscriptions? What quality
of service do you need?</p><p>If a subscription is durable, when the
subscribing application disconnects, the subscription remains in place
and can be used by the subscribing application when it reconnects.
In this scenario, the receiving applications must be available to
receive a message. Therefore, the subscriptions must be durable. A
quality of service of 2 is appropriate because the message delivery
across the network must be guaranteed. QoS 2 messages are persistent.
The message is stored on the <ph
conref="../TextEntities.dita#TextEntities/ISMappliance"></ph> until
the message is received by all the subscribers of the message. </p></dd>
</dlentry><dlentry>
<dt>Planning your solution</dt>
<dd><p>In this scenario, consider the following key points: <ul>
<li>Which protocol is appropriate?<p><ph conref="../TextEntities.dita#TextEntities/ISMappliance"/>
          natively supports MQTT and JMS. You can also install your own protocol by using the
          protocol plug-in. <?Pub Caret -3?>You must consider which protocol is appropriate for your
          business needs. The small publisher and subscriber devices communicate by using satellites
          which is expensive. The messages between the devices must be sent reliably. The MQTT
          protocol is designed for exchanging messages between small devices on expensive
          connections, and to send messages reliably. Therefore, MQTT protocol is appropriate in
          this scenario. </p></li>
<li>What message size is appropriate?<p>In this scenario, the car
hire company wants to send large numbers of small, persistent messages.
The information that is contained within the message is about locking
or unlocking car doors. Therefore, the message size can be relatively
small. You can limit the message size that is allowed to be sent through <ph
conref="../TextEntities.dita#TextEntities/ISMappliance"></ph> by using
the maximum message size attribute of an endpoint. For more information
about endpoints, see <xref format="dita" href="../Overview/ov00060.dita"
scope="local" type="concept">Message hub, endpoints, and policies</xref>.</p></li>
<li>What message count is appropriate?<p>Consider what maximum message
count is sensible for your messaging needs. In this scenario, the
quality of service is 2, so messages are stored until a subscriber
receives the message. Therefore, a higher message count might typically
be considered. However, as each subscriber device subscribes to a
specific topic string, a low maximum message count is sufficient.</p></li>
<li>What is the maximum number of topic levels that you need?<p>You
can have up to 32 levels in a topic string. Fewer levels are easier
to manage, but many levels might be required to set up specific solutions.
In this scenario, the topic string length can be relatively short.
For example, <codeph>Car/Car registration number</codeph>.</p></li>
<li>How are you going to ensure that all of your client IDs are unique?<p>In
this scenario, it is crucial that all client IDs are unique so that
each car receives only messages that are intended for itself. In this
scenario, you might decide to use the car registration number as that
number is unique to each car. Alternatively, you can generate unique
client IDs automatically when you write your application. </p></li>
<li>What message depth is appropriate?<p>When the maximum message
depth is reached, you cannot publish any more updates to that topic
string until the number of messages is reduced. However, as each subscriber
device has a specific topic string from which messages are received,
the maximum message depth does not need to be as large as it would
be if all devices received messages from the same topic string. </p></li>
</ul></p><p>For more information about planning your solution, see <xref
format="dita" href="../Planning/pl00001_.dita" scope="local"
type="concept">Planning</xref>.</p></dd>
</dlentry><dlentry>
<dt>Writing your applications</dt>
<dd><p>In this scenario, you must decide the name of the topic strings
that you are publishing and subscribing to. The car hire company needs
many topic strings because they are sending out information to many
cars. For this messaging pattern, each subscriber must subscribe to
a unique topic. By using the unique client ID in the topic string,
you can ensure that each topic is unique. </p><p>To ensure that subscribers cannot access the topics of other subscribers, you can use the topic
       string variable substitution available in the <ph
        conref="../TextEntities.dita#TextEntities/ISMappliance"/> topic messaging policies. By using
       topic string variable substitution you can create a topic messaging policy with single topic
       string that includes a client ID variable. This substitution ensures that applications can
       subscribe only to the topic string that matches their client ID. For example, a topic string
       of <codeph>Car/${ClientID}</codeph> is specified in the topic messaging policy. The
       application with a client ID of 123 is allowed to subscribe to <codeph>Car/123</codeph>, but
       is not allowed to subscribe to <codeph>Car/456</codeph>, or <codeph>Car/789</codeph> because
       the client ID does not match. For more information about messaging policies and variable
       substitution, see <xref format="dita" href="../Security/se00004_.dita" scope="local"
        type="concept">Messaging policies</xref>.</p><p>In this scenario, the name of the topic string
is <codeph>Car/${ClientID}</codeph>.</p></dd>
</dlentry><dlentry>
<dt>Setting up your <ph
conref="../TextEntities.dita#TextEntities/ISMappliance"></ph> infrastructure,
and security</dt>
<dd><p>Create the infrastructure by configuring message hubs and endpoints. Set up your security by
       creating connection and topic policies. </p><p>In
this scenario, the car hire company requires one message hub because
there is one goal - locking or unlocking cars. The car hire company
requires two endpoints to ensure that internal and external network
traffic is kept separate.</p><p>Complete the following steps to <xref
format="dita" href="../Administering/ad00360_.dita" scope="local"
type="concept">set up a message hub and endpoints</xref> for this
scenario: </p><p><ol>
<li>Create your message hub. A message hub is an organizational configuration object to collect the
         endpoints, connection policies, and topic policies that are associated with a specific goal
         in a single place. In this scenario, the message hub is called <codeph>Car Messaging
          Hub</codeph>.<lines>
            curl -X POST \
                -H 'Content-Type: application/json'  \
                -d  '{
                         "MessageHub":  {
                            "Car Messaging Hub":  {
                                 "Description": "Message Hub for car messaging "
                            }
                         }
                      }
                    '  \
                 http://127.0.0.1:9089/ima/v1/configuration</lines></li>
<li>Create your connection policies. A connection policy is used to authorize a client to connect to
         an endpoint.<ul>
          <li>Create a connection policy for the subscriber. In this scenario, the connection policy
           is called <codeph>Car Messaging External ConPol</codeph>.<p>In this scenario, the car
            hire company restricts subscriber access so that the subscriber devices must use MQTT
            protocol.</p></li>
          <li>Create a connection policy for the publisher. In this scenario, the connection policy
           is called <codeph>Car Messaging Internal ConPol</codeph>.<p>In this scenario, the car
            hire company restricts publisher access so that the publisher device must use MQTT
            protocol. </p></li>
         </ul><p>You can use the following cURL commands to create the connection
          policies:<lines>
            curl -X POST \
                -H 'Content-Type: application/json'  \
                -d  '{
                         "ConnectionPolicy":  {
                            "Car Messaging External ConPol":  {
                            "UserID": "*",
                            "Protocol": "MQTT",
                            "AllowDurable": false,
                            "Description": "Car Messaging external connection policy"
                            }
                         }
                      }
                    '  \
                 http://127.0.0.1:9089/ima/v1/configuration</lines><lines>
            curl -X POST \
                -H 'Content-Type: application/json'  \
                -d  '{
                         "ConnectionPolicy":  {
                            "Car Messaging Internal ConPol":  {
                            "UserID": "*",
                            "Protocol": "MQTT",
                            "AllowDurable": false,
                            "Description": "Car Messaging internal connection policy"
                            }
                         }
                      }
                    '  \
                 http://127.0.0.1:9089/ima/v1/configuration</lines></p></li>
<li>Create your topic policies. A topic policy is a messaging policy that is used to authorize a
         client to publish or subscribe to a topic.<ul>
          <li>Create a topic policy for the subscriber. In this scenario, the topic policy is called
            <codeph>Car Messaging External TopicPol</codeph>.<p>The car hire company restricts
            subscriber access so that the subscriber devices can subscribe to the topic string
             <codeph>Car/${ClientID}</codeph> only. </p></li>
          <li>Create a topic policy for the publisher. In this scenario, the topic policy is called
            <codeph>Car Messaging Internal TopicPol</codeph>.<p>The car hire company restricts
            publisher access so that the publisher device can publish to the topic string
             <codeph>Car/#</codeph>.</p></li>
         </ul><p>You can use the following cURL commands to create the topic
          policies:<lines>
            curl -X POST \
                -H 'Content-Type: application/json'  \
                -d  '{
                         "TopicPolicy":  {
                            "Car Messaging External TopicPol":  {
                               "Topic": "Car/${ClientID}",
                               "UserID": "*",
                               "ActionList": "Subscribe",
                               "Protocol": "MQTT",
                               "MaxMessages": 5000,
                               "Description": "Car Messaging external topic policy"
                            }
                         }
                      }
                    '  \
                 http://127.0.0.1:9089/ima/v1/configuration</lines><lines>
            curl -X POST \
                -H 'Content-Type: application/json'  \
                -d  '{
                         "TopicPolicy":  {
                            "Car Messaging Internal TopicPol":  {
                               "Topic": "Car/#",
                               "UserID": "*",
                               "ActionList": "Publish",
                               "Protocol": "MQTT",
                               "MaxMessages": 5000,
                               "Description": "Car Messaging internal topic policy"
                            }
                         }
                      }
                    '  \
                 http://127.0.0.1:9089/ima/v1/configuration</lines></p></li>
<li>Create your endpoints. An endpoint authorizes a client to connect to the <ph
          conref="../TextEntities.dita#TextEntities/ISMappliance"/> on one or all configured
         ethernet interfaces, and a specific port. You create endpoints on a message hub.<ul>
          <li>Create an endpoint for internet network requests. In this scenario, the endpoint is
           called <codeph>Car Hire External Endpoint</codeph>. Apply the <codeph>Car Messaging
            External ConPol</codeph>, and the <codeph>Car Messaging External TopicPol</codeph> to
           the endpoint.</li>
          <li>Create an endpoint for intranet network requests. In this scenario, the endpoint is
           called <codeph>Car Hire Internal Endpoint</codeph>. Apply the <codeph>Car Messaging
            Internal ConPol</codeph>, and the <codeph>Car Messaging Internal TopicPol</codeph> to
           the endpoint.</li>
         </ul><p>You can use the following cURL commands to create the
          endpoints:<lines>
            curl -X POST \
                -H 'Content-Type: application/json'  \
                -d  '{
                         "Endpoint":  {
                            "Car Hire External Endpoint":  {
                               "Enabled": true,
                               "Port": 1884,
                               "MaxMessageSize": "1024KB",
                               "ConnectionPolicies": "Car Messaging External ConPol",
                               "TopicPolicies": "Car Messaging External TopicPol",
                               "MessageHub": "Car Messaging Hub",
                               "Protocol": "MQTT",
                               "Interface": "All",
                               "Description": "Car Messaging external endpoint"
                            }
                         }
                      }
                    '  \
                 http://127.0.0.1:9089/ima/v1/configuration</lines><lines>
            curl -X POST \
                -H 'Content-Type: application/json'  \
                -d  '{
                         "Endpoint":  {
                            "Car Hire Internal Endpoint":  {
                               "Enabled": true,
                               "Port": 1885,
                               "MaxMessageSize": "1024KB",
                               "ConnectionPolicies": "Car Messaging Internal ConPol",
                               "TopicPolicies": "Car Messaging Internal TopicPol",
                               "MessageHub": "Car Messaging Hub",
                               "Protocol": "MQTT",
                               "Interface": "All",
                               "Description": "Car Messaging internal endpoint"
                            }
                         }
                      }
                    '  \
                 http://127.0.0.1:9089/ima/v1/configuration</lines></p></li>
</ol></p></dd>
</dlentry><dlentry
conref="sc00001_.dita#sc_00001/TestYourSolutionForInformationAbout">
<dt>Testing your solution</dt>
<dd><p>For information about troubleshooting any problems that arise
during testing, see <xref format="dita"
href="../Troubleshooting/tr10000_.dita" scope="local" type="concept">Troubleshooting</xref>.</p></dd>
</dlentry><dlentry
conref="sc00001_.dita#sc_00001/MonitoringYourSolutionThereAreVario">
<dt>Monitoring your solution</dt>
<dd><p>There are various statistics that you can <xref format="dita"
href="../Monitoring/admin00008_.dita" scope="local" type="concept">monitor</xref>.
In this scenario, use <xref format="dita"
href="../Monitoring/admin00016.dita" scope="local" type="concept">topic
monitor</xref>, <xref format="dita" href="../Monitoring/admin00009.dita"
scope="local" type="concept">connection monitor</xref>, and <xref
format="dita" href="../Monitoring/admin00022.dita" scope="local"
type="concept">subscription monitor</xref> to understand the health
of the solution. </p></dd>
</dlentry><dlentry
conref="sc00001_.dita#sc_00001/StrengtheningYourSecurityYouCanIncr">
<dt importance="optional">Strengthening your security</dt>
<dd><p>You can increase the level of security of a solution in a number
of ways:</p><ul>
<li>Using a server certificate.<ol>
<li>Create a <xref format="dita" href="../Administering/ad00710_.dita"
scope="local" type="task">certificate profile</xref>.</li>
<li>Create a <xref format="dita" href="../Administering/ad00740_.dita"
scope="local" type="task">security profile</xref> to encrypt wire
traffic. <ul>
<li>Set <parmname>UsePasswordAuthentication</parmname> to <userinput>True</userinput> on
your security profile in order to force authentication on user ID
and password.</li>
</ul></li>
<li>Apply the certificate profile to your security profile.</li>
<li>Apply the security profile to the <userinput>Car Hire External
Endpoint</userinput> and the <userinput>Car Hire Internal Endpoint</userinput>.</li>
</ol><p>For more information about certificates, see <xref format="dita"
href="../Security/se00005_.dita" scope="local" type="concept">Transport
level security</xref>.</p></li>
<li>Using a client certificate. You must have a sever certificate
installed before you use a client certificate.<ol>
<li>Upload a client certificate, or CA certificate and key on each
client.</li>
<li>Add the specific client certificate, or the CA certificate to
the <uicontrol>trustStore</uicontrol> on the <ph
conref="../TextEntities.dita#TextEntities/ISMappliance"></ph> server.
The <uicontrol>trustStore</uicontrol> points to a file containing
trusted certificates, so that the server can authenticate the client. </li>
</ol></li>
<li>Using FIPS.<p>FIPS increases message security by using cryptography
that complies with the Federal Information Processing Standards (FIPS).
Enable FIPS mode by setting the <parmname>FIPS</parmname> parameter
to <userinput>True</userinput>. You can set <parmname>FIPS</parmname> to <userinput>True</userinput> either
by using the command line, or by using the <ph
conref="../TextEntities.dita#TextEntities/ISMgui"></ph>. For more
information about enabling FIPS mode, see <xref format="dita"
href="../Administering/ad00330_.dita" scope="local" type="concept">Configuring
security</xref>.</p></li>
</ul></dd>
</dlentry></dl></section>
</conbody>
</concept>
<?Pub *0000015632?>
