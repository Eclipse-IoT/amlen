<?xml version="1.0" encoding="UTF-8"?>
<!--Arbortext, Inc., 1988-2011, v.4002-->
<!DOCTYPE concept PUBLIC  "-//OASIS//DTD DITA Concept//EN"
 "concept.dtd">
<?Pub Sty _display FontColor="red"?>
<?Pub Inc?>
<concept id="sc_00003" xml:lang="en-us">
<title>Scenario 3: Fan out per device</title>
<shortdesc>There are a number of messaging patterns that identify
common message flows that are used in messaging solutions. You can
use the messaging patterns to identify your messaging needs, and use
the scenarios to get up and running quickly. In this scenario, publisher
devices publishe messages to many topic strings. Each topic string
has only one subscriber device.</shortdesc>
<conbody>
<section><title>Background to this scenario</title><p>A hire car company
wants to be able to instruct each car in the fleet to lock or unlock.
These commands are sent from a number of publishing devices with a
publishing application each device. An application on those publishing
devices connects to the <ph
conref="../TextEntities.dita#TextEntities/ISMappliance"></ph>, and
sends messages on specific topic strings to the subscriber devices.
The publishing devices sit within the company intranet. Each car in
the fleet contains a embedded device with a receiving application
on it. The application on that receiving device connects to the <ph
conref="../TextEntities.dita#TextEntities/ISMappliance"></ph>, and
can receive messages that are published to their specific topic string.
The receiving device sits within the internet. The <ph
conref="../TextEntities.dita#TextEntities/ISMappliance"></ph> sits
within the DMZ. The publishing and receiving devices communicate by
using satellites. Complete the steps in the following section to understand
how to set up this scenario. </p></section>
<section><title>Planning and implementing the solution</title><p>Use
the following information to help you to plan, and implement your
fan-out per device scenario.</p><dl><dlentry>
<dt>Understand your publish/subscribe architecture</dt>
<dd><p>In this scenario, there are many publisher devices. These devices
are used by many service representatives. These devices each run an
application that publishes messages to many topic strings. Each topic
string has one subscriber device that runs a receiving application.
Therefore, this scenario is a fan-out per device scenario. The following
diagram shows the architecture of this fan out broadcast scenario.</p><image
href="../Planning/ov00101c.gif"><alt>Fan out per device diagram. One
publisher device publishes messages to many topic strings. Each message
has only one subscriber device.</alt></image></dd>
</dlentry><dlentry>
<dt>Understand the required messaging behavior for your solution</dt>
<dd><p>For example, do you want durable or non-durable subscriptions?
What quality of service do you need?</p><p>If a subscription is durable,
when the subscribing application disconnects, the subscription remains
in place and can be used by the subscribing application when it reconnects.
In this scenario, the receiving applications must be available to
receive a message. Therefore, the subscriptions must be durable. A
quality of service of 2 is appropriate because the message delivery
across the network must be guaranteed. QoS 2 messages are persistent.
The message is stored on the <ph
conref="../TextEntities.dita#TextEntities/ISMappliance"></ph> until
the message is received by all the subscribers of the message. When
the maximum message depth is reached, you cannot publish any more
updates to that topic string until the number of messages is reduced.
However, as each embedded device has a specific topic string from
which messages are received, the maximum queue depth does not need
to be as large as it would be if all devices received messages from
the same topic string. </p></dd>
</dlentry><dlentry>
<dt>Plan your solution</dt>
<dd><p>In this scenario, consider the following key points: <ul>
<li>The IBM Messaging Appliance supports MQTT and JMS. You must consider
which protocol is appropriate for your business needs.<p>The small
publishing and receiving devices communicate by using satellites which
is expensive. The messages between the devices must be sent reliably.
The MQTT protocol is designed for exchanging messages between small
devices on expensive connections, and to send messages reliably. Therefore,
MQTT protocol is appropriate in this scenario. </p></li>
<li>What message size is appropriate?<p>In this scenario, the car
hire company wants to send large numbers of small, persistent messages.
You can limit the message size that is allowed to be sent through
the IBM Messaging Appliance by using the maximum message size attribute
of an endpoint. For more information about endpoints, see <xref
format="dita" href="../Overview/ov00060.dita" scope="local"
type="concept">Message hub, endpoints, and policies</xref>.</p></li>
<li>What message count is appropriate?<p>Consider what maximum message
count is sensible for your messaging needs. In this scenario, the
quality of service is 2, so messages are stored until a subscriber
receives the message. Therefore, a higher message count might typically
be considered. However, as each subscriber device subscribes to a
specific topic string, a low maximum message count is sufficient.</p></li>
<li>What is the maximum message length that you need?<p>In this scenario,
the information that is contained within the message is about locking
or unlocking car doors. Therefore, the length of the topic string
can be relatively short. </p> </li>
<li>How are you going to ensure that all of your client IDs are unique?<p>In
this scenario, it is crucial that all client IDs are unique so that
each car only receives only messages that are intended for itself.
In this scenario, you might decide to use the car registration number
as that number is unique to each car. Alternatively, you can generate
unique client IDs automatically when you write your application. </p></li>
</ul></p><p>For more information about planning your solution, see <xref
format="dita" href="../Planning/pl00001_.dita" scope="local"
type="concept">Planning</xref>.</p></dd>
</dlentry><dlentry>
<dt>Write your applications</dt>
<dd><p>In this scenario, you must decide the name of the topic strings
that you are publishing and subscribing to. The car hire company needs
many topic strings because they are sending out information to many
cars. For this messaging pattern, each subscriber must subscribe to
a unique topic. By using the unique client ID in the topic string,
you can ensure that each topic is unique. </p><p>To ensure that subscribers
cannot access the topics of other subscribers, you can use the topic
string variable substitution available in the <ph
conref="../TextEntities.dita#TextEntities/ISMappliance"></ph> messaging
policies. By using topic string variable substitution you can create
a messaging policy with single topic string that includes a client
ID variable. This substitution ensures that applications can subscribe
only to the topic string that matches their client ID. For example,
a topic string of <userinput>Car/${ClientID}</userinput> is specified
in the messaging policy. The application with a client ID of 123 is
allowed to subscribe to <userinput>Car/123</userinput>, but is not
allowed to subscribe to<userinput> Car/456</userinput>, or <userinput>Car/789</userinput> because
the client ID does not match. For more information about messaging
policies and variable substitution, see <xref format="dita"
href="../Security/se00004_.dita" scope="local" type="concept">Messaging
policies</xref>.</p><p>In this scenario, the name of the topic string
is <userinput>Car/${ClientID}</userinput>.</p></dd>
</dlentry><dlentry>
<dt>Set up your <ph
conref="../TextEntities.dita#TextEntities/ISMappliance"></ph> infrastructure,
and security</dt>
<dd><p>Create the infrastructure by configuring message hubs and endpoints.
Set up your security by creating connection and messaging policies. </p><p>In
this scenario, the car hire company requires one message hub because
there is one goal - locking or unlocking cars. The car hire company
requires two endpoints to ensure that internal and external network
traffic is kept separate.</p><p>Complete the following steps to <xref
format="dita" href="../Administering/ad00360_.dita" scope="local"
type="concept">set up a message hub and endpoints</xref> for this
scenario: </p><p><ol>
<li>Configure your appliance messaging users and groups. In this scenario,
the car hire company wants to restrict who can subscribe to a topic
string based on messaging group. <ul>
<li>Create a user ID for each car. In this scenario, the subscriber
user ID is based on the car registration number. </li>
<li>Create an appliance messaging group. In this scenario, the appliance
messaging group is called <userinput>Car Hire</userinput>. Add the
relevant user IDs that you created to this messaging group. </li>
</ul><p>Messaging groups are collections of messaging users. Messaging
groups are used in connection policies, messaging policies, and security
policies when you filter access by group name.</p></li>
<li>Create your message hub. In this scenario, the message hub is
called <userinput>Car Messaging Hub</userinput>.<p>A message hub is
an organizational configuration object to collect the endpoints, connection
policies, and messaging policies that are associated with a specific
goal in a single place. </p></li>
<li>Create your connection policies. <ul>
<li>Create a connection policy for the subscriber. In this scenario,
the connection policy is called <userinput>Car Messaging Internet
ConPol</userinput>.<p>In this scenario, the car hire company restricts
subscriber access so that the subscriber devices must use MQTT protocol.
Additionally, subscriber access is restricted on appliance messaging
group, where all subscribers must be a member of the <userinput>Car
Hire</userinput> group.</p></li>
<li>Create a connection policy for the publisher. In this scenario,
the connection policy is called <userinput>Car Messaging Intranet
ConPol</userinput>.<p>In this scenario, the retailer restricts publisher
access so that the publisher device must use MQTT protocol, and use
the IP address range <userinput>192.0.2.020</userinput> to <userinput>192.0.2.100</userinput>.
A range of IP addresses are required because a number of service representatives
can publish messages can be published from more than one location.
However, all locations are within the company intranet. </p></li>
</ul><p>A connection policy is used to authorize a client to connect
to an endpoint. </p></li>
<li>Create your messaging policies.<ul>
<li>Create a messaging policy for the subscriber. In this scenario,
the messaging policy is called <userinput>Car Messaging Internet MsgPol</userinput>.<p>In
this scenario, the retailer restricts subscriber access so that the
subscriber devices can subscribe to the topic string <userinput>Car/${ClientID}</userinput> only.
Additionally, subscriber access is restricted on appliance messaging
group, where all subscribers must be a member of the <userinput>Car
Hire</userinput> group.</p></li>
<li>Create a messaging policy for the publisher.  In this scenario,
the messaging policy is called <userinput>Car Messaging Intranet MsgPol</userinput>.<p>In
this scenario, the retailer restricts publisher access so that the
publisher device can publish to the topic string <userinput>Car/${ClientID}</userinput> only.</p></li>
</ul><p>A messaging policy is used to authorize a client to publish
or subscribe to a topic.</p></li>
<li>Create an endpoint that is called <userinput>Car Messaging Endpoint</userinput> and
apply the policies that you created to this endpoint.<p>An endpoint
authorizes a client to connect to the <ph
conref="../TextEntities.dita#TextEntities/ISMappliance"></ph> on one
or all configured ethernet interfaces, and a specific port.  You create
endpoints on a message hub.</p></li>
</ol></p></dd>
</dlentry><dlentry>
<dt>Test your solution</dt>
<dd><p>For information about troubleshooting any problems that arise
during testing, see <xref format="dita"
href="../Troubleshooting/tr10000_.dita" scope="local" type="concept">Troubleshooting</xref>.</p></dd>
</dlentry><dlentry>
<dt>Monitor your solution</dt>
<dd><p>There are various statistics that you can <xref format="dita"
href="../Monitoring/admin00008_.dita" scope="local" type="concept">monitor</xref>.
In this scenario, use <xref format="dita"
href="../Monitoring/admin00016.dita" scope="local" type="concept">topic
monitor</xref>, <xref format="dita" href="../Monitoring/admin00009.dita"
scope="local" type="concept">connection monitor</xref>, and <xref
format="dita" href="../Monitoring/admin00022.dita" scope="local"
type="concept">subscription monitor</xref> to understand the health
of the solution. </p></dd>
</dlentry><dlentry>
<dt importance="optional">Strengthen your security</dt>
<dd><p>You can increase the level of security of a solution in a number
of ways:</p><ul>
<li>Using a server certificate.<ol>
<li>Set up a certificate profile.</li>
<li>Apply the certificate profile to your security profile.</li>
<li>Apply the security profile to the <userinput>Car Messaging Endpoint</userinput>.</li><?Pub
Caret 49?>
</ol><p>For more information about certificates, see <xref format="dita"
href="../Security/se00005_.dita" scope="local" type="concept">Transport
level security</xref>.</p></li>
<li>Using a client certificate.</li>
<li>Using FIPS.<p>FIPS increases message security by using cryptography
that complies with the Federal Information Processing Standards (FIPS).
Enable FIPS mode by setting the <parmname>FIPS</parmname> parameter
to <userinput>True</userinput>. You can set <parmname>FIPS</parmname> to <userinput>True</userinput> either
by using the command line, or by using the <ph
conref="../TextEntities.dita#TextEntities/ISMgui"></ph>. For more
information about enabling FIPS mode, see <xref format="dita"
href="../Administering/ad00330_.dita" scope="local" type="concept">Configuring
security</xref>.</p></li>
</ul></dd>
</dlentry></dl></section>
</conbody>
</concept>
<?Pub *0000014175?>
