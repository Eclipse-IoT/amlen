<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC  "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="pdf_sc00009_" xml:lang="en-us">
    <title>Scenario 2: Viewing message flow across a cluster </title>
    <!--To optimize search results, add tags that clarify product name, target platform, or other contexts. To enable the tags, right-click, select Refactoring > Toggle Comment.-->
    <!--<titlealts><navtitle></navtitle><searchtitle></searchtitle></titlealts>-->
    <!--Put your short description next; used for first paragraph and abstract.-->
    <shortdesc>You can configure a publish/subscribe mechanism to verify the flow of messages across your<ph
        conref="../TextEntities.dita#TextEntities/ISM"
        /> cluster by using the <uicontrol>Messaging Tester Sample Application</uicontrol> and a demonstration MQTT endpoint called DemoMqttEndpoint. DemoMqttEndpoint allows applications to connect to <ph
        conref="../TextEntities.dita#TextEntities/ISM"
        /> on port 1883, and from any configured IP address. </shortdesc>
    <conbody>
        <section>
            <title>Background to this scenario</title>
            <p>This scenario uses a sample application and a demonstration endpoint to verify the
                flow of messages across a cluster. You can add publishers and subscribers to
                generate publications on and subscriptions to one or more topics. Use this
                publish/subscribe method to watch messages flow across your cluster.</p>
            <p>For cluster environments, all servers need to publish and subscribe on the same
                topics. To configure this scenario, you must provide a
                    <parmname>TopicRoot</parmname>, and use the same <parmname>TopicRoot</parmname>
                for each of your three browser instances. For example,
                    <codeph>MarkSmith/TopicA</codeph>. If another person wants to use the
                    <uicontrol>Messaging Tester Sample Application</uicontrol> with the same cluster
                members, they must use a different <parmname>TopicRoot</parmname> so that their
                messages are published to a different topic tree. For example,
                    <codeph>JoeBrown/TopicA</codeph>.</p>
        </section>
        <section>
            <title>Planning and implementing the scenario</title>
            <p>Use the following information to help you plan and implement your <ph
                    conref="../TextEntities.dita#TextEntities/ISM"/> cluster by
                using <ph conref="../TextEntities.dita#TextEntities/RESTAPIs"
                />.</p>
            <dl>
                <dlentry>
                    <dt>Understanding the clustering architecture</dt>
                    <dd>
                        <p>In this scenario, three servers are configured as a cluster. You can use
                            the same configuration that is described in <xref href="sc00007_.dita">
                                Scenario 1</xref>. This scenario tests that the cluster can deliver
                            directives and responses and have them display correctly on other nodes
                            of the cluster.</p>
                    </dd>
                </dlentry>
                <dlentry>
                    <dt>Setting up your cluster for this scenario</dt>
                    <dd>
                        <p>You can configure your <ph
                                conref="../TextEntities.dita#TextEntities/ISM"/>
                            cluster by using <ph
                                conref="../TextEntities.dita#TextEntities/RESTAPIs"
                            />. For information about setting up your cluster for this scenario, see
                                <xref href="sc00008_.dita"/>.</p>
                    </dd>
                </dlentry>
            </dl>
        </section>
        <section>
            <title>Testing the scenario</title>
            <p>
                <ol>
                    <li>Open an Internet Explorer 11, Firefox, or Chrome browser and connect to the
                            <ph conref="../TextEntities.dita#TextEntities/ISMappliance"/> Web UI by
                        entering the following URL: <codeph>https://{Server IP}:9087</codeph>.</li>
                    <li>Click the <wintitle>Messaging</wintitle> tab and select <uicontrol>Sample
                            Application</uicontrol> from the menu. The <wintitle>Messaging Tester
                            Sample Application</wintitle> page is displayed. </li>
                    <li>Follow the instructions on the <wintitle>Messaging Tester Sample
                            Application</wintitle> page to download  and set up the latest version
                        of the <uicontrol>Messaging Tester Sample Application</uicontrol>. This
                        version of the <uicontrol>Messaging Tester Sample Application</uicontrol>
                        supports clustering.</li>
                    <li>Enable the <uicontrol>DemoMqttEndpoint</uicontrol> on port <userinput>1883</userinput> on all three servers.</li>
                    <li>Launch an instance of the <uicontrol>Messaging Tester Sample
                            Application</uicontrol> in a separate browser instance for each member
                        of the cluster. For each cluster member complete the following steps:<ol>
                            <li>Enter the server IP address, port number, and a <parmname>TopicRoot</parmname>.<note>Use the same <parmname>TopicRoot</parmname> for all three instances of the application. The <parmname>TopicRoot</parmname> is prepended to the <parmname>TopicName</parmname> to create a unique topic for each user of the messaging tester application. For example, <codeph>MarkSmith/TopicA</codeph>. The <parmname>TopicRoot</parmname> is required so that multiple instances of the messaging tester application that are running against the same server or servers, do not interfere with each other. If <parmname>TopicRoot</parmname> is not specified, a unique <parmname>TopicRoot</parmname> is automatically generated for each browser instance. Automatic generation of a unique <parmname>TopicRoot</parmname> means that the scenario runs successfully if your application is running against a single server.</note><p>For example specify the following values:<ul>
                            <li>On browser instance 1:<lines>IP: 10.10.33.10
Port: 1883
TopicRoot: MyTopic</lines><p/></li>
                            <li>On browser instance 2:<lines>IP: 10.10.33.11
Port: 1883
TopicRoot: MyTopic</lines><p/></li>
                            <li>On browser instance 3:<lines>IP: 10.10.33.12
Port: 1883
TopicRoot: MyTopic</lines><p/></li>
                            </ul></p></li>
                            <li>Click <uicontrol>Connect</uicontrol>. The Web Client is now
                                connected to your server.</li>
                        </ol></li>
                </ol>
            </p>
        </section>
        <section>
            <title>Next steps</title>
            <p>After you have successfully connected each of your three Web Clients to your
                configured servers, you can set up publishers and subscribers on one or more a
                topics and watch  messages flow across the cluster.</p>
            <ol>
                <li>Scenario A:  <ol>
                        <li>Add a publisher on Topic A on Web Client 1. </li>
                        <li>Add subscribers to Topic A on Web Client 2 and 3. </li>
                        <li>View the flow of messages that are published by Web Client 1 to <ph
                                conref="../TextEntities.dita#TextEntities/ISM"/>
                            Server 1. These messages are received by Web Client 2 and 3, even though
                            these Web Clients are connected to the different <ph
                                conref="../TextEntities.dita#TextEntities/ISM"/>
                            servers. </li>
                    </ol></li>
                <li>Scenario B:  <ol>
                        <li>Add a publisher on Topic A on Web Client 2. </li>
                        <li>View that the number of messages being received by Web Client 2 and Web
                            Client 3 doubles. This is because messages from two different servers
                            are being sent to subscribers on two different servers. Messages that
                            are published by Web Client 2 to <ph
                                conref="../TextEntities.dita#TextEntities/ISM"/>
                            Server 2 go directly to the local subscriber on Web Client 2.</li>
                    </ol></li>
                <li>Scenario C:  <ol>
                        <li>Add and remove publishers and subscribers on other topics for each Web
                            Client. </li>
                        <li>View the flow of messages across the cluster, verifying that you see the
                            messages flow as you expect them to.</li>
                    </ol></li>
            </ol>
        </section>
    </conbody>
</concept>
