<?xml version="1.0" encoding="UTF-8"?>
<!--Arbortext, Inc., 1988-2011, v.4002-->
<!DOCTYPE concept PUBLIC  "-//OASIS//DTD DITA Concept//EN"
 "concept.dtd">
<?Pub Sty _display FontColor="red"?>
<?Pub Inc?>
<concept id="sc00004" xml:lang="en-us">
<title>Scenario: Fan-out per device request-reply</title>
<shortdesc>In this scenario, one publisher device publishes messages
to many topic strings. Each message has only one subscriber device.
Each subscriber device publishes reply messages to the publisher device.</shortdesc>
<conbody>
<section><title>Background to this scenario</title><p>A company wants
to be able to complete remote emergency shutdowns on machines that
are located within its various factories. A request is published from
a centralized back-end system that runs in the company intranet, and
a response is required from each machine to confirm that the shutdown
is complete. The back-end application is a publisher and subscriber
device on the intranet. The machines are publisher and subscriber
devices on the intranet. <ph
conref="../TextEntities.dita#TextEntities/ISMappliance"></ph> sits
within the intranet. Complete the steps in the following section to
understand how to set up this scenario.</p></section>
<section><title>Planning and implementing the solution</title><p>Use
the following information to help you to plan and implement a fan-out
per device request-reply scenario.</p><dl><dlentry>
<dt>Understanding your publish/subscribe architecture</dt>
<dd><p>In this scenario, one publisher device publishes messages to
many topic strings. Each message has only one subscriber device. Each
subscriber device publishes reply messages to the publisher device.
This scenario is a fan-out per device request-reply. The following
diagram shows the architecture of a fan-out per device request-reply
scenario.<image href="../Planning/ov00101d_v2.gif"><alt>Fan-out per device
request-reply diagram. One publisher device publishes messages to
many topic strings. Each message has only one subscriber device. Each
subscriber device publishes reply messages to the publisher device.</alt>
</image></p></dd>
</dlentry><dlentry>
<dt>Understanding the required messaging behavior for your solution</dt>
<dd><p>Do you want durable or non-durable subscriptions? What quality
of service do you need?</p><p>If a subscription is durable, when the
subscribing application disconnects, the subscription remains in place
and can be used by the subscribing application when it reconnects.
In this scenario, the subscriptions are durable because it is important
that the devices receive the request and response messages even if
the connection is lost. </p><p>A quality of service of 1 is appropriate
because the message delivery across the network must be guaranteed
at least once. It is acceptable to have duplicates as any duplicates
can be discarded. QoS 1 messages are persistent. The message is stored
on <ph conref="../TextEntities.dita#TextEntities/ISMappliance"></ph> until
the message is received by the subscriber of the message. </p></dd>
</dlentry><dlentry>
<dt>Planning your solution</dt>
<dd><p>In this scenario, consider the following key points: <ul>
<li>Which protocol is appropriate? <p><ph conref="../TextEntities.dita#TextEntities/ISMappliance"/>
          natively supports MQTT and JMS. You can also install your own protocol by using the
          protocol plug-in.  You must consider which protocol is appropriate for your business
          needs. The amount of data that is sent between the devices is small. The messages between
          the devices must be sent reliably. The MQTT protocol is designed for exchanging messages
          between small devices on low bandwidth, or expensive connections, and to send messages
          reliably. Therefore, MQTT protocol is appropriate in this scenario. </p></li><?Pub Caret 6?>
<li>What message size is appropriate?<p>In this scenario, the back-end
appliance and the machines send small, persistent messages. The information
that is contained within the message is about shutting down. Therefore,
the message can be relatively small. You can limit the message size
that is allowed to be sent through <ph
conref="../TextEntities.dita#TextEntities/ISMappliance"></ph> by using
the maximum message size attribute of an endpoint. For more information
about endpoints, see <xref format="dita" href="../Overview/ov00060.dita"
scope="local" type="concept">Message hub, endpoints, and policies</xref>.</p></li>
<li>What message count is appropriate?<p>Consider what maximum message
count is sensible for your messaging needs. In this scenario, the
quality of service is 1, so messages are stored until a subscriber
receives the message. Therefore, a higher message count might typically
be considered. However, as each device publishes and subscribes to
unique topic strings, a lower maximum message count is sufficient.</p></li>
<li>What is the maximum number of topic levels that you need?<p>You
can have up to 32 levels in a topic string. Fewer levels are easier
to manage, but many levels might be required to set up specific solutions.
In this scenario, the topic string length can be relatively short.
For example, <codeph>Shutdown/Request/DeviceID</codeph> or <codeph>Shutdown/Response/DeviceID</codeph>. </p> </li>
<li>How are you going to ensure that all of your client IDs are unique?<p>In
this scenario, it is crucial that all client IDs are unique so that
the shutdown response from each machine is recorded against the correct
machine. For example, you might decide to use the device ID as that
number is unique to each machine. Therefore in this scenario the client
ID is set to be the device ID of the machine. </p></li>
<li>What message depth is appropriate?<p>You can specify the maximum message depth by setting the
          maximum message count attribute of a topic policy. When the maximum message depth is
          reached, you cannot publish any more messages to that topic string until the number of
          messages is reduced. However, as each machine publishes and subscribes to unique topic
          strings, the maximum message depth does not need to be as large as it would be if all
          machines published and subscribed to the same topic string. </p></li>
</ul></p><p>For more information about planning your solution, see <xref
format="dita" href="../Planning/pl00001_.dita" scope="local"
type="concept">Planning</xref>.</p></dd>
</dlentry><dlentry>
<dt>Writing your applications</dt>
<dd><p>In this scenario, you must decide the name of the topic strings
that you are publishing and subscribing to. The company needs many
topic strings because they are sending requests to, and receiving
responses from many machines. For this messaging pattern, the machines
publish and subscribe to their unique topic strings. By using the
unique client ID in the topic string, you can ensure that each topic
is unique. All response topic strings must be subscribed to by the
intranet device. </p><p>To ensure that machines do not publish to an incorrect topic string, you can use the topic string
       variable substitution available in the <ph
        conref="../TextEntities.dita#TextEntities/ISMappliance"/> topic policies. By using topic
       string variable substitution, you can create a topic policy with single topic string that
       includes a client ID variable. This substitution ensures that applications can publish and
       subscribe only to the topic string that matches their client ID. For example, a topic string
       of <codeph>Shutdown/Response/${ClientID}</codeph> is specified in the topic policy. The
       application with a client ID of 123 is allowed to publish to
        <codeph>Shutdown/Response/123</codeph>, but is not allowed to publish to
        <codeph>Shutdown/Response/456</codeph>, or <codeph>Shutdown/Response/789</codeph> because
       the client ID does not match. For more information about topic policies and variable
       substitution, see <xref format="dita" href="../Security/se00004_.dita" scope="local"
        type="concept">Messaging policies</xref>.</p><p>You can also use the topic string variable substitution to ensure that applications do not
       subscribe to an incorrect topic string. For example, if you specify a topic string of
        <codeph>Shutdown/Request/${ClientID}</codeph> in the topic policy, then only the application
       with a client ID of 123 is allowed to subscribe to <codeph>Shutdown/Request/123</codeph>.</p><p>In
this scenario, the name of the request topic string is <codeph>Shutdown/Request/${ClientID}</codeph>.
The name of the response topic string is <codeph>Shutdown/Response/${ClientID}</codeph>.</p><p>The
order in which your applications perform publish and subscribe actions
is important. Both the client and the back-end application must subscribe
to the relevant topic string before any messages are published. Otherwise,
messages might be published but not received as no subscription was
set up at the time that the message was published. </p><p>The following
diagram shows this message flow between client and back-end devices
through <ph conref="../TextEntities.dita#TextEntities/ISMappliance"></ph>. <image
href="sc00004c_v2.gif" scope="local"><alt>Message flow between client
and back-end devices.</alt></image></p><p><ol>
<li>The back-end appliance publishes a message to the topic string <codeph>Shutdown/Request/${ClientID}</codeph>.</li>
<li>The message is sent to the machine that is authorized to subscribe
to topic string <codeph>Shutdown/Request/${ClientID}</codeph>.</li>
<li>The machine publishes a response to <codeph>Shutdown/Response/${ClientID}</codeph>.</li>
<li>The message is sent to the back-end appliance that is authorized
to subscribe to topic string <codeph>Shutdown/Response/#</codeph>.</li>
</ol></p><p></p></dd>
</dlentry><dlentry>
<dt>Setting up your <ph
conref="../TextEntities.dita#TextEntities/ISMappliance"></ph> infrastructure,
and security</dt>
<dd><p>Create the infrastructure by configuring message hubs and endpoints. Set up your security by
       creating connection and topic policies. </p><p>In
this scenario, the company requires one message hub because there
is one goal - shutting down machines. The company requires one endpoint.</p><p>Complete
the following steps to <xref format="dita"
href="../Administering/ad00360_.dita" scope="local" type="concept">set
up a message hub and endpoint</xref> for this scenario: </p><p><ol>
<li>Create your message hub. A message hub is an organizational configuration object to collect the
         endpoints, connection policies, and topic policies that are associated with a specific goal
         in a single place. In this scenario, the message hub is called <codeph>Shutdown
          Hub</codeph>.</li>
<li>Create your connection policies. A connection policy is used to
authorize an application to connect to an endpoint.<ul>
<li>Create one connection policy for the applications. In this scenario,
the connection policy is called <codeph>Shutdown Intranet ConPol</codeph>.<p>In
this scenario, the company restricts access so that the applications
must use MQTT protocol, and use the IP address range <codeph>192.0.2.020</codeph> - <codeph>192.0.2.255</codeph>.
Only one IP address is required because only one back-end system is
publishing and subscribing.</p></li>
</ul></li>
<li>Create your topic policies. A topic policy is a type of messaging policy that used to authorize
         an application to publish or subscribe to a topic.<ul>
          <li>Create two topic policies for the machines. Set up a messaging user group called
            <codeph>Machine Group</codeph> that contains the device IDs of the machines. Set up your
           machine topic policies so that access is restricted based on this messaging user group
           name. In this scenario, the request topic policy is called <codeph>Shutdown Request
            Machine TopicPol</codeph> and the response topic policy is called <codeph>Shutdown
            Response Machine TopicPol</codeph>.<p><codeph>Shutdown Request Machine TopicPol</codeph>
            authorizes a machine to subscribe to the topic string
             <codeph>Shutdown/Request/${ClientID}</codeph>. <codeph>Shutdown Response Machine
             TopicPol</codeph> authorizes a machine to publish to
             <codeph>Shutdown/Response/${ClientID}</codeph>. </p></li>
          <li>Create two topic policies for the back-end. In this scenario, the request topic policy
           is called <codeph>Shutdown Request Backend TopicPol</codeph> and the response topic
           policy is called <codeph>Shutdown Response Backend TopicPol</codeph>. You can set up
           these topic policies so that access is restricted based on the IP address of the back-end
             appliance.<p><codeph>Shutdown Request Backend TopicPol</codeph> authorizes the back-end
            application to publish to the topic string
            <codeph>Shutdown/Request/${ClientID}</codeph>. <codeph>Shutdown Response Backend
             TopicPol</codeph> authorizes the back-end application to subscribe to
             <codeph>Shutdown/Response/#</codeph>. </p></li>
         </ul></li>
<li>Create your endpoint. An endpoint authorizes an application to
connect to <ph conref="../TextEntities.dita#TextEntities/ISMappliance"></ph> on
one, or all configured ethernet interfaces, and a specific port. 
You create endpoints on a message hub.<ul>
<li>Create an endpoint for intranet network requests. In this scenario, the endpoint is called
            <codeph>Shutdown Intranet Endpoint</codeph>. Apply all of your connection and topic
           policies to the endpoint.</li>
</ul></li>
</ol></p></dd>
</dlentry><dlentry
conref="sc00001_.dita#sc_00001/TestYourSolutionForInformationAbout">
<dt>Testing your solution</dt>
<dd><p>For information about troubleshooting any problems that arise
during testing, see <xref format="dita"
href="../Troubleshooting/tr10000_.dita" scope="local" type="concept">Troubleshooting</xref>.</p></dd>
</dlentry><dlentry
conref="sc00001_.dita#sc_00001/MonitoringYourSolutionThereAreVario">
<dt>Monitoring your solution</dt>
<dd><p>There are various statistics that you can <xref format="dita"
href="../Monitoring/admin00008_.dita" scope="local" type="concept">monitor</xref>.
In this scenario, use <xref format="dita"
href="../Monitoring/admin00016.dita" scope="local" type="concept">topic
monitor</xref>, <xref format="dita" href="../Monitoring/admin00009.dita"
scope="local" type="concept">connection monitor</xref>, and <xref
format="dita" href="../Monitoring/admin00022.dita" scope="local"
type="concept">subscription monitor</xref> to understand the health
of the solution. </p></dd>
</dlentry><dlentry
conref="sc00001_.dita#sc_00001/StrengtheningYourSecurityYouCanIncr">
<dt importance="optional">Strengthening your security</dt>
<dd><p>You can increase the level of security of a solution in a number
of ways:</p><ul>
<li>Using a server certificate.<ol>
<li>Create a <xref format="dita" href="../Administering/ad00710_.dita"
scope="local" type="task">certificate profile</xref>.</li>
<li>Create a <xref format="dita" href="../Administering/ad00740_.dita"
scope="local" type="task">security profile</xref> to encrypt wire
traffic. <ul>
<li>Set <parmname>UsePasswordAuthentication</parmname> to <userinput>True</userinput> on
your security profile to force authentication on user ID and password.</li>
</ul></li>
<li>Apply the security profile to the <userinput>Shutdown Intranet
Endpoint</userinput>.</li>
</ol><p>For more information about certificates, see <xref format="dita"
href="../Security/se00005_.dita" scope="local" type="concept">Transport
level security</xref>.</p></li>
<li>Using a client certificate. You must install a server certificate
before you use a client certificate.<ol>
<li>Upload a client certificate, or CA certificate and key on each
client.</li>
<li>Add the specific client certificate, or the CA certificate to
the <uicontrol>trustStore</uicontrol> on the <ph
conref="../TextEntities.dita#TextEntities/ISMappliance"></ph> server.
The <uicontrol>trustStore</uicontrol> points to a file that contains
trusted certificates so that the server can authenticate the client. </li>
</ol></li>
<li>Using FIPS.<p>FIPS increases message security by using cryptography
that complies with the Federal Information Processing Standards (FIPS).
Enable FIPS mode by setting the <parmname>FIPS</parmname> parameter
to <userinput>True</userinput>. You can set <parmname>FIPS</parmname> to <userinput>True</userinput> either
by using the command line, or by using the <ph
conref="../TextEntities.dita#TextEntities/ISMgui"></ph>. For more
information about enabling FIPS mode, see <xref format="dita"
href="../Administering/ad00330_.dita" scope="local" type="concept">Configuring
security</xref>.</p></li>
</ul></dd>
</dlentry></dl></section>
</conbody>
</concept>
<?Pub *0000016510?>
