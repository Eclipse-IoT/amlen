<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC  "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="ov00150_" xml:lang="en-us">
<title>Clustering in <ph conref="../TextEntities.dita#TextEntities/ISM"/></title>
<!--To optimize search results, add tags that clarify product name, target platform, or other contexts. To enable the tags, right-click, select Refactoring > Toggle Comment.-->
<!--<titlealts><navtitle></navtitle><searchtitle></searchtitle></titlealts>-->
<!--Put your short description next; used for first paragraph and abstract.-->
<shortdesc>You can use clusters of <ph
        conref="../TextEntities.dita#TextEntities/ISM"
        /> servers to permit a greater number of connections than would be possible on a single server or Docker container and, thereby, allow a greater throughput of messaging traffic. Clustering extends the scope of topic trees beyond the limit of a single server; a common topic space is created in which messages are received by subscribers regardless of the server on which they are published as long as the subscribers are using MQTT non-shared subscriptions. </shortdesc>
<conbody>
<p>By connecting multiple <ph conref="../TextEntities.dita#TextEntities/ISM"/>
            servers together on a local high-speed LAN to form a cluster, you can scale the maximum
            messaging throughput or the maximum number of concurrent connections beyond the capacity
            of a single <ph conref="../TextEntities.dita#TextEntities/ISM"/>
            server. All <ph conref="../TextEntities.dita#TextEntities/ISM"/>
            servers in a cluster share a common topic space which means that messages that are
            published on a particular topic are received by clients that are using MQTT non-shared
            subscriptions and that are subscribed to that topic regardless of which server they are
            connected to. Clients that use JMS, MQ Connectivity, or shared subscriptions can receive
            messages only from the servers on which the messages are published. For more information
            about shared subscriptions, see the <cite>Shared subscriptions</cite> topic in the <ph conref = "../TextEntities.dita#TextEntities/ISM"/> documentation in <xref format="dita" scope="peer"
                href="../../Developing/devsharedsubscriptions.dita">Shared subscriptions</xref>. </p>
<p>Clustering of <ph conref="../TextEntities.dita#TextEntities/ISM"
            /> servers is of particular use in Internet of Things (IoT) applications where there are large numbers of devices or simple applications which publish and subscribe to a small number of data center applications. In such scenarios, the devices or simple applications typically use MQTT and non-shared subscriptions; the data center applications are more likely to use JMS, MQ Connectivity or shared subscriptions.</p>
<section>
<title>Cluster configuration</title>
<p>The following diagram shows a simple clustering configuration. There are two <ph
conref="../TextEntities.dita#TextEntities/ISM"
/> servers in the cluster which is routing messages to and from the devices and simple applications which are using MQTT and non-shared subscriptions and also to and from the data center applications which are using shared subscriptions. A load balancer makes the cluster appear as a single server to clients and ensures that they connect to the correct server. </p>
<p>
<image placement="break" href="MSClustering01.jpg" alt=""/>
</p>
<p>A server finds other servers in the cluster by using multicast discovery, or by specifying a
                known subset of  the other servers in the cluster. Each server is a peer of all
                other servers in the cluster. The control channel sends subscription information and
                other related information to all servers in the cluster; the same control
                information is sent to all the servers in the cluster. In addition, a message
                channel is created from each server to each of the other servers in the cluster.
                Only messages that might be needed on the remote server are sent on the message
                channel.</p>
<p>In the simple configuration illustrated in the diagram, the devices and simple applications use non-shared subscriptions to subscribe to topics in the common topic space. These devices and applications receive messages from the other devices, simple applications and data center applications that publish messages to those topics regardless of the server that they are connected to. </p>
            <p>Data center applications use shared subscriptions to subscribe to topics. Shared subscriptions do not participate in the common topic space. Therefore, each data center application only receives messages that are published to the same server to which that data center is connected. It is good practice, therefore, to connect your data center applications to every server in the cluster. </p>
<p>For more information about configuring a cluster, see <xref format="dita"
                    href="../../Administering/ad00940_.dita" scope="local" type="reference"/>.</p>
</section>
<section>
<title>Application support</title>
<p>While direct device to device messaging is fully supported in a cluster, the more common scenario for Internet of Things messaging is to route messages between devices and applications. An application can use non-shared subscriptions to publish and subscribe to topics in the common topic space of the cluster. However, many data center applications use other protocols and shared subscriptions. This means that they only receive messages for topics to which they subscribe, and only if the messages are published on the server to which they are connected.</p>
<p>When such data center applications are used in a cluster, you need to configure them to subscribe
                on each of the servers in the cluster. This allows the data center applications to
                get messages for topics to which they are subscribed, regardless of the server on
                which the messages are published. This configuration improves the performance of the
                cluster by not routing messages destined for applications which support shared
                subscriptions. </p>
            <p>If the data center application publishes a message, that message will be routed to
                all servers which have a subscription on the published topic. The data center
                application therefore does not need to know which server subscribers are connected
                to. </p>
</section>
</conbody>
</concept>
