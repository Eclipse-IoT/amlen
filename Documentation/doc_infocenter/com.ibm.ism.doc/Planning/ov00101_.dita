<?xml version="1.0" encoding="UTF-8"?>
<!--Arbortext, Inc., 1988-2011, v.4002-->
<!DOCTYPE concept PUBLIC  "-//OASIS//DTD DITA Concept//EN"
 "concept.dtd">
<?Pub Sty _display FontColor="red"?>
<?Pub Inc?>
<concept id="pl00001_" xml:lang="en-us">
<title>Messaging patterns</title><?Pub Caret -2?>
<shortdesc>The messaging patterns identify common message flows that
are used in messaging solutions. There are five messaging patterns:
fan out broadcast, fan in per device notification, fan out per device
notification, fan out per device request-reply, and fan in per device
request-reply.</shortdesc>
<conbody>
<section><title>Fan out broadcast</title><p>One publisher device publishes
a message to a topic string. The messages have many subscriber devices.</p><p>An example usage of this pattern is broadcasting reference data. For example, broadcasting an
    updated price list.<fig>
     <title>Fan out broadcast</title>
     <image href="ov00101a_v2.gif">
      <alt>One message is published. <ph conref="../TextEntities.dita#TextEntities/ISM"/> delivers
       the message to all subscribers.</alt>
     </image>
    </fig><ph otherprops="NOTbeta">For an example implementation of this pattern, see <xref
      format="dita" href="../Scenarios/sc00006_.dita" scope="local" type="concept">Scenario: Fan out
      broadcast</xref>.</ph></p></section>
<section><title>Fan in per device notification</title><p>Many publisher
devices publish messages to a topic string. The messages have one
subscriber device.</p><p>An example usage of this pattern is receiving data from a number of sensors. For example,
        receiving data from earthquake sensors.<fig>
          <title>Fan in per device notification</title>
          <image href="ov00101b_v2.gif">
            <alt>Many messages are published. <ph conref="../TextEntities.dita#TextEntities/ISM"/>
              delivers the message to one subscriber.</alt>
          </image>
        </fig></p><p>For
an example implementation of this pattern, see <xref format="dita"
href="../Scenarios/sc00002_.dita" scope="local" type="concept">Scenario
2: Fan in per device notification</xref></p></section>
<section><title>Fan out per device notification</title><p>One publisher
device publishes messages to many topic strings. Each message has
only one subscriber device.</p><p>An example usage of this pattern
is sending control commands to a device. For example, sending a command
to an application to activate a feature.<fig><title>Fan out per device
notification</title><image href="ov00101c_v2.gif"><alt>Many unique messages
are sent by one publisher to many devices. <ph
conref="../TextEntities.dita#TextEntities/ISM"></ph> sends the messages
to each subscriber.</alt></image></fig></p><p>For this messaging pattern,
each subscriber must subscribe to a unique topic. By using the unique
user ID, group ID or client ID of the subscribing application in the
topic string, you can ensure that each topic is unique. For example,
a subscriber application instance that connects with a client ID of <codeph>123</codeph> subscribes
to <codeph>RESPONSE/123</codeph>. A subscriber application instance
that connects with a client ID of <codeph>456</codeph> subscribes
to <codeph>RESPONSE/456</codeph>. A subscriber application instance
with a client ID of <codeph>789</codeph> subscribes to <codeph>RESPONSE/789</codeph>.</p><p>For
an MQTT application, the code might look like the following example:<codeblock>//Generate clientID
String clientID = String.format("%-23.23s", UUID.randomUUID().toString()).trim().replace('-', '_');

//Create an MQTT client with the generated clientID
MqttClient mobileClient = new MqttClient("tcp://MessageSightHostName:MessageSightEndpointPort", clientID);

//Subscribe to the RESPONSE/${ClientID} topic
mobileClient.subscribe("RESPONSE/"+clientID, 0);</codeblock></p><p>To
ensure that subscribers cannot access the topics of other subscribers,
you can use the topic string variable substitution available in the <ph
conref="../TextEntities.dita#TextEntities/ISM"></ph> messaging policies.
 By using topic string variable substitution you can create a messaging
policy with single topic string that includes a user ID, group ID
or client ID variable. This substitution ensures that applications
can subscribe only to the topic string that matches their user ID,
group ID or client ID. For example, a topic string of <codeph>RESPONSE/${ClientID}</codeph> is
specified in the messaging policy. The application with a client ID
of <codeph>123</codeph> is allowed to subscribe to <codeph>RESPONSE/123</codeph>,
but is not allowed to subscribe to <codeph>RESPONSE/456</codeph>,
or <codeph>RESPONSE/789</codeph> because the client ID does not match.
For more information about messaging policies and variable substitution,
see <xref format="dita" href="../Security/se00004_.dita" scope="local"></xref>.</p><p><ph
otherprops="NOTbeta">For an example implementation of this pattern,
see <xref format="dita" href="../Scenarios/sc00003_.dita" type="concept">Scenario
3: Fan out per device notification</xref>.</ph></p></section>
<section><title>Fan out per device request-reply</title><p>One publisher
device publishes messages to many topic strings. Each topic string
has only one subscriber device. Each subscriber device publishes reply
messages on a separate topic string. The publisher device subscribes
to all the reply topics.</p><p>An example usage of this pattern is
a control center that interrogates the state of a device. For example,
requesting a temperature reading from a sensor.<fig><title>Fan out
per device request-reply</title><image href="ov00101d_v2.gif"><alt>Many
messages are sent by one publisher.<ph
conref="../TextEntities.dita#TextEntities/ISM"></ph> sends the messages
to each subscriber. Each subscriber sends a reply to the publisher.</alt>
</image></fig></p><p><ph otherprops="NOTbeta">For an example implementation
of this pattern, see <xref format="dita"
href="../Scenarios/sc00004_.dita" scope="local" type="concept">Scenario
4: Fan out per device request-reply</xref>.</ph></p></section>
<section><title>Fan in per device request-reply</title><p>Many publisher
devices publish messages to many topic strings. A single subscriber
device subscribes to all of the topic strings. The subscriber device
publishes reply messages on separate topic strings for each publisher
device.</p><p>An example usage of this pattern is a device polling a control center for information updates.
        For example, polling for information about firmware updates.<fig>
          <title>Fan in per device request-reply</title>
          <image href="ov00101e_v2.gif">
            <alt>Many messages are sent by many publishers. <ph
                conref="../TextEntities.dita#TextEntities/ISM"/> sends the messages to one
              subscriber. The subscriber sends a reply to each publisher.</alt>
          </image>
        </fig></p><p><ph
otherprops="NOTbeta">For an example implementation of this pattern,
see <xref format="dita" href="../Scenarios/sc00005_.dita" scope="local"
type="concept">Scenario 5: Fan in per device request-reply</xref>.</ph></p></section>
</conbody>
<?tm 1413223986 0?>
</concept>
<?Pub *0000007471?>
