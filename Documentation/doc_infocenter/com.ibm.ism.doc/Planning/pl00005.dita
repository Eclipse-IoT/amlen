<?xml version="1.0" encoding="UTF-8"?>
<!--Arbortext, Inc., 1988-2011, v.4002-->
<!DOCTYPE concept PUBLIC  "-//OASIS//DTD DITA Concept//EN"
 "concept.dtd">
<?Pub Sty _display FontColor="red"?>
<?Pub Inc?>
<concept id="pl00005" xml:lang="en-us">
<title>Conversion between MQTT and JMS</title>
<shortdesc>When messages are converted between MQTT and JMS, there
is a set of rules that are applied to the conversion.</shortdesc>
<conbody>
<p>If the source and destination protocols are the same, then no conversion occurs. For MQTT to JMS
message conversion, when the content is ambiguous, the property
<uicontrol>ConvertMessageType</uicontrol> is used to decide what action to take. <ph
conref="../TextEntities.dita#TextEntities/ISMappliance"/> sets the message type when a message is
received from <ph conref="../TextEntities.dita#TextEntities/wmq"/>. Messages are treated as JMS
messages when received from <ph conref="../TextEntities.dita#TextEntities/ISMappliance"/>.</p>
<p>The following table shows the six message types that define the type of content in JMS, and two
message types that defines the type of content in MQTT:</p>
<p>
<table>
<title>The message types that define the type of content in JMS and MQTT.</title>
<tgroup cols="3">
<thead>
<row>
<entry>Message type</entry>
<entry>To MQTT</entry>
<entry>From MQTT</entry>
</row>
</thead>
<tbody>
<row>
<entry>Message</entry>
<entry>Zero length payload</entry>
<entry>Never created </entry>
</row>
<row>
<entry>BytesMessage</entry>
<entry>The byte array content is used as the payload.</entry>
<entry>Use the payload as a byte content if one of the following is true:<ul>
<li>The <uicontrol>ConvertMessageType</uicontrol> property is 'bytes'</li>
<li>The convert type is automatic and the payload contains any byte sequence that is not a valid
UTF-8 encoded string, or contains any byte less than 0x20 except 0x09, 0x0a, or 0x0d.</li>
</ul>
</entry>
</row>
<row>
<entry>MapMessage</entry>
<entry>The map is converted to JSON in a UTF-8 encoding.</entry>
<entry>Never created </entry>
</row>
<row>
<entry>ObjectMessage</entry>
<entry>The serialized form of the object is used as the payload. If the object is null, a zero
length payload is used.</entry>
<entry>Never created </entry>
</row>
<row>
<entry>StreamMessage</entry>
<entry>The stream is converted to JSON in a UTF-8 encoding.</entry>
<entry>Never created </entry>
</row>
<row>
<entry>TextMessage</entry>
<entry>The UTF-8 encoding of the text is used as the payload. If the text is null, a zero length
payload is used.</entry>
<entry>Interpret the payload as a UTF-8 encoded string if the convert type is text, or the convert
type is automatic and the payload contains only valid UTF-8 characters and only the control
characters <uicontrol>NL</uicontrol>, <uicontrol>CR</uicontrol>, and
<uicontrol>HT</uicontrol>.</entry>
</row>
</tbody>
</tgroup>
</table>
</p>
<p>Differences exist in the implementation of common concepts between the MQTT and JMS protocols.
If you are planning to interchange messages between the two protocols, restrict your messages to
functionality that is supported by both.  Before you convert your messages, familiarize yourself
with the following implementation characteristics of MQTT and JMS protocols and with the mapping
information.</p>
<ul id="ul_l2x_ps4_xhb">
<li>Named user properties are mapped in both directions.</li>
<li>JMS user properties must start with <codeph>JMSX</codeph> and cannot start with
<codeph>JMS</codeph>. When you convert from MQTT to JMS, ensure user properties start with
<codeph>JMSX</codeph>.</li>
<li>Differences exist in how property values are handled:<ul id="ul_zly_cw4_xhb">
<li>MQTT allows  a string only as a property type. </li>
<li>JMS allows a string, integers of various sizes, a floating value, a Boolean, and a byte array as
a property type. </li>
<li>When you convert a JMS property value to an MQTT property value, covert the JMS property value
to a string, where possible. </li>
<li>When you convert a JMS byte array, convert the value to a string. If the value cannot be
converted to a valid UTF-8 string, the property value is not written.</li>
<li>When you convert from MQTT to JMS, all property values are converted to strings.</li>
</ul></li>
<li>MQTT Content Type maps to <uicontrol>JMSType</uicontrol> in both directions.</li>
<li>MQTT Response Topic maps to <uicontrol>JMSReplyTo</uicontrol> in both directions</li>
<li>MQTT Correlation Identifier maps to <uicontrol>JMSCorrelationID</uicontrol> in both directions.
Use valid UTF-8 strings as correlation IDs when you interchange messages between protocols. For JMS,
the correlation identifier must be a string. To use request and response between JMS and MQTT, you
must update to the new version of the MQTT client.</li>
<li><uicontrol>JMSMessageID</uicontrol> maps to the MQTT user property
<uicontrol>JMSMessageID</uicontrol> in both directions.</li>
<li><uicontrol>JMSTimestamp</uicontrol> maps to the MQTT user property
<uicontrol>JMSTimestamp</uicontrol> in both directions. In MQTT, <uicontrol>JMSTimestamp</uicontrol>
is an ISO8601 formatted string  that starts with year.</li>
<li>JMS places more stringent restrictions on the names of properties than MQTT. Use property names
that meet both sets of requirements. </li>
<li>MQTT allows multiple instances of the same key. However, JMS allows only one instance of each
key. If multiple instances of a key exist when you send properties from MQTT to JMS, the client sees
one key only . It is not possible to determine which key the client sees. </li>
</ul>
<p>For information about other considerations when MQTT applications interact with JMS applications,
see <xref format="dita" href="../Developing/devmqttapp.dita" scope="local" type="concept">Developing
MQTT applications</xref>.</p>
<?Pub Caret -1?>
</conbody>
</concept>
<?Pub *0000003317?>
