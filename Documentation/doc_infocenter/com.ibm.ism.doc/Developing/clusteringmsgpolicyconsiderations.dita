<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC  "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="clusteringmsgpolicyconsiderations" xml:lang="en-us">
<title>Clustering: Max Messages Behavior</title>
<!--To optimize search results, add tags that clarify product name, target platform, or other contexts. To enable the tags, right-click, select Refactoring > Toggle Comment.-->
<!--<titlealts><navtitle></navtitle><searchtitle></searchtitle></titlealts>-->
<!--Put your short description next; used for first paragraph and abstract.-->
<shortdesc>If you have applications that must receive all the messages that are published for them in a cluster, specify a value of <codeph>Reject New Messages</codeph> in the  <codeph>Max Messages Behavior</codeph> attribute of the messaging policy.   </shortdesc>
<conbody>
<p/>
<p>In a cluster, the <codeph>Reject New Messages</codeph> behavior is ignored for messages that are forwarded from a remote server; subscribers can exceed the limit imposed in the <codeph>Max Messages</codeph> attribute of the messaging policy and the messages are published to the subscribing application. </p>
<p>When a message is published on the same server as a subscription, the server knows the behavior that the subscription is using and, if  <codeph>Reject New Messages</codeph> is specified, the publish fails if there is a subscriber that has already reached its <codeph>Max Messages</codeph> limit. </p>
<p>However, in a cluster, if a message is published on a remote server, the information that indicates that it should be forwarded to another server in the cluster is limited; the remote server is aware only that the topic is of interest to one or more subscribers on another server, or servers, in the cluster. In this situation, it is possible for the message to be forwarded to a server and be published to some subscribers that would reject the message because they have reached their <codeph>Max Messages</codeph> limit, and cause the original publish to fail. However, it is possible that the same message is published successfully to other subscribers because they have not reached their <codeph>Max Messages</codeph> limit and, therefore, the publish operation is successful and cannot be failed. The resulting stranded message cannot be forwarded to those subscribers that have reached their <codeph>Max Messages</codeph> limit and prevents the forwarding of subsequent messages. </p>
<p>To avoid having stranded messages preventing the forwarding of subsequent messages, consider specifying <codeph>Reject New Messages</codeph> for only those applications that must receive all messages that are published for them in a cluster. Specify <codeph>Discard Old Messages</codeph> to ensure that the most recent messages are delivered to subscribers while the size of their message backlog is kept to a maximum.</p>
</conbody>
<related-links>
<link format="dita" href="../Overview/ov00150_.dita" scope="peer" type="concept">
<linktext>Clustering in <ph conref = "../TextEntities.dita#TextEntities/ISM"></ph></linktext>
</link>
<link format="dita" href="../Administering/ad00361_.dita" scope="peer" type="task">
<linktext>Configuring message hubs by using the <ph conref = "../TextEntities.dita#TextEntities/ISMgui"></ph></linktext>
</link>
<link format="dita" href="../Administering/ad00451_.dita" scope="peer" type="task">
<linktext>Creating and updating a topic policy by using REST Administration APIs</linktext>
</link>
<link format="dita" href="../Administering/ad00452_.dita" scope="peer" type="task">
<linktext>Creating and updating a subscription policy by using REST Administration APIs</linktext>
</link>
</related-links>
</concept>
