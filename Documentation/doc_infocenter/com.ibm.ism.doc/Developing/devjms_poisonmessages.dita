<?xml version="1.0" encoding="UTF-8"?>
<!--Arbortext, Inc., 1988-2011, v.4002-->
<!DOCTYPE concept PUBLIC  "-//OASIS//DTD DITA Concept//EN"
 "concept.dtd">
<?Pub Sty _display FontColor="red"?>
<?Pub Inc?>
<concept id="devjms_poisonmessages" xml:lang="en-us">
<title>Poison messages</title><?Pub Caret -2?>
<shortdesc>A poison message is a message that a receiving application
cannot process. You can handle poison messages in your <ph
conref="../TextEntities.dita#TextEntities/ISM"></ph> JMS application
by using the <parmname>JMSXDeliveryCount</parmname> message property.</shortdesc>
<conbody>
<p>A poison message might be a corrupted message, or a message in
an unexpected format. For example, if an application handles JMS messages
of type <codeph>TextMessage</codeph> receives a message of a different
type, that message is a poison message.</p>
<p>If an application encounters a poison message, it can take one
of the following actions:<ul>
<li> <p>Roll back the message to the topic or queue it came from.</p> <p>You
can roll back the message if the application is using transactions.
Rolling back the message ensures that the message is not lost. It
is useful if a message is incorrectly identified as a poison message
because the application is unable to process it due to a transient
issue.<note>If the application is a Message Driven Bean (MDB), the
MDB can call the <codeph>setRollbackOnly()</codeph> method on the
message-driven context that is associated with it.</note></p> </li>
<li> <p>Move the message onto a special queue.</p> <p>You might want
to move the message to a special queue if the application is not using
transactions and you do not want the message to be lost.</p> </li>
<li> <p>Discard the message.</p> <p>If you discard the message, the
message is lost.</p> </li>
</ul>It is the responsibility of the application to determine whether
a poison message is received. <ph
conref="../TextEntities.dita#TextEntities/ISM"></ph> cannot detect
that a message is corrupted and does not know whether an application
expects to receive a specific JMS message type. </p>
<section> <title>Handling poison messages by using <parmname>JMSXDeliveryCount</parmname></title> <p>You
can use the <parmname>JMSXDeliveryCount</parmname> message property
to detect situations where a poison message is being continually received
and rolled back. The <parmname>JMSXDeliveryCount</parmname> message
property provides a count value for the number of times that a particular
message is delivered. You can use this property in your application
to identify poison messages by establishing a threshold value for
the delivery count. When the threshold is reached, you can provide
alternative handling for the message. For example, you can send the
message to a special queue for failed messages, or you can discard
the message.</p> <p>To use the <parmname>JMSXDeliveryCount</parmname> property,
configure your application to call the <codeph>getIntProperty()</codeph> method
on the message:<codeblock>int deliveryCount = message.getIntProperty("JMSXDeliveryCount");</codeblock>The
maximum value for the <parmname>JMSXDeliveryCount</parmname> property
in <ph conref="../TextEntities.dita#TextEntities/ISM"></ph> is 64.
Therefore, you must set your delivery count threshold value to 64
or less when you write your application.</p> </section>
<section><title>Considerations for MDB applications that use the <ph
conref="../TextEntities.dita#TextEntities/ISM"></ph> resource adapter</title><p>In
some cases, unexpected transient issues, such as a database outage,
can lead to valid messages not being processed. To avoid incorrectly
identifying messages as poison messages, you can set the <parmname>maxDeliveryFailures</parmname> property
on the activation specification. The <parmname>maxDeliveryFailures</parmname> property
pauses the MDB after the set number of failures is reached. Pausing
the MDB gives the administrator time to address the issues that are
preventing successful message processing.</p><p>When the destination is a queue or when a durable subscription is used, the MDB must be restarted
    promptly after a pause. If the MDB is not restarted after a pause, a backlog of messages can
    accumulate.</p><p>For more information about the <parmname>maxDeliveryFailures</parmname> property, see <xref
format="dita"
href="../Administering/configuringinboundcomms.dita#configuringinboundcomms/MaxDeliveryFailuresNumeric-1Or0AndA"
scope="peer" type="row">Configuring the <ph conref="../TextEntities.dita#TextEntities/ISM"
/> resource adapter for inbound communication</xref>.</p></section>
</conbody>
<?tm 1413224019 1?>
</concept>
<?Pub *0000004736?>
