<?xml version="1.0" encoding="UTF-8"?>
<!--Arbortext, Inc., 1988-2011, v.4002--><!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "task.dtd">
<?Pub Sty _display FontColor="red"?><?Pub Inc?><task id="devplug-ineclipse" xml:lang="en-us">
<title>Debugging a protocol plug-in by running the plug-in server
in Eclipse</title>
<shortdesc>You can debug your protocol plug-in by running the plug-in
server in Eclipse.</shortdesc>
<taskbody>
<prereq><p>Download and extract the contents of the SDK bundle. Then,
follow the instructions in <filepath>ImaTools/ImaPlugin/README.txt</filepath> to
import the sample plug-in projects that are provided with the SDK
bundle.</p></prereq>
<context><p>If you run the protocol plug-in server in Eclipse, you can run the protocol plug-in server process remotely and use the <ph conref="../TextEntities.dita#TextEntities/ISM" /> server to forward messages to the external plug-in server process. This approach is intended for use during the early stages of development. With this approach, you can deploy a plug-in .zip file that contains only a <codeph>plugin.json</codeph> descriptor file and no JAR files. Then, you can debug and update your plug-in classes in your local development environment without redeploying a plug-in .zip file on the server. When you use this method of debugging, you must use a non-standard version of the <codeph>plugin.json</codeph> file. This version of the file provides the class path for your plug-in classes in your development environment.</p><p>In later stages of development, you must test your production protocol plug-in by installing it and running it on your <ph conref="../TextEntities.dita#TextEntities/ISM" /> server. For more information, see <xref href="devplug-invirtual.dita" />.</p></context>
<steps>
<step><cmd>Run the protocol server in Eclipse:</cmd>
<substeps>
<substep><cmd>From the <uicontrol>Run</uicontrol> menu, select <uicontrol>External
Tools &gt; External Tools Configurations...</uicontrol></cmd></substep>
<substep><cmd>Right-click <uicontrol>Program</uicontrol> and select <uicontrol>New</uicontrol></cmd>
</substep>
<substep><cmd>In the <uicontrol>Name</uicontrol> field, enter <codeph>ImaPluginServerInEclipse</codeph></cmd>
</substep>
<substep>
<cmd>In the <uicontrol>Location</uicontrol> field, enter the full path to the <tm trademark="Java" tmtype="tm">Java</tm> executable file that starts the plug-in server.</cmd>
<stepxmp>
<p>For example, on <tm trademark="Windows" tmtype="tm" tmclass="IGNORE">Windows</tm>, your path might look like the following path: <filepath>C:\eclipse\jdk\jre\bin\java.exe</filepath></p>
</stepxmp>
</substep>
<substep><cmd>In the <uicontrol>Arguments</uicontrol> field, enter
the following arguments to run the protocol plug-in server:</cmd><info><codeph>-Xdebug
-Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=n -jar <varname>path_to_SDKInstall</varname>/ImaTools/ImaPlugin/lib/imaPlugin.jar
-i @</codeph><note><ul>
<li>You must enter the correct value for <varname>path_to_SDKInstall</varname> for
your environment.</li>
<li>The plug-in server uses port 9091. You must ensure that this port
is available before you start the process.</li>
<li>The value that is specified for address must match the port value
that is specified for the Eclipse remote debugger configuration. This
port value is specified in step 2e.</li>
</ul></note></info></substep>
<substep><cmd>Click <uicontrol>Apply</uicontrol></cmd></substep>
<substep><cmd>Click <uicontrol>Run</uicontrol> to start the protocol
plug-in server.</cmd></substep>
</substeps>
</step>
<step><cmd>Start the Eclipse remote <tm trademark="Java" tmtype="tm">Java</tm> debugger for the plug-in server that is running in Eclipse:</cmd>
<substeps>
<substep><cmd>From the <uicontrol>Run</uicontrol> menu, select <uicontrol>Debug
Configurations...</uicontrol></cmd></substep>
<substep><cmd>Right-click <uicontrol>Remote Java Application</uicontrol> and
select <uicontrol>New</uicontrol></cmd></substep>
<substep><cmd>In the <uicontrol>Name</uicontrol> field, enter <codeph>ImaPluginOnEclipse</codeph></cmd>
</substep>
<substep><cmd>In the <uicontrol>Host</uicontrol> field, enter the
IP address of the host where you are running Eclipse</cmd></substep>
<substep><cmd>In the <uicontrol>Port</uicontrol> field, enter <codeph>8000</codeph></cmd>
<info><note>This port value must match the value that was specified
for the address in the arguments for running the plug-in server in
Eclipse. This value was specified in Step 1e.</note></info></substep>
<substep><cmd>Select the <uicontrol>Source</uicontrol> tab and click <uicontrol>Add</uicontrol></cmd>
</substep>
<substep><cmd>Select <uicontrol>Java Project</uicontrol> and click <uicontrol>OK</uicontrol></cmd>
</substep>
<substep><cmd>Select the project where the plug-in that you want to
debug is and click <uicontrol>OK</uicontrol></cmd></substep>
<substep><cmd>Click <uicontrol>Apply</uicontrol></cmd></substep>
<substep><cmd>Click <uicontrol>Debug</uicontrol></cmd></substep>
</substeps>
</step>
<step><cmd>To use the plug-in server that is running in Eclipse to
debug your plug-in, you must create a debug version of your <codeph>plugin.json</codeph> descriptor
file. Set the <codeph>Classpath</codeph> property to the location
of the compiled classes for the plug-in that you are debugging in
Eclipse.</cmd><stepxmp><p>For example, to debug the sample plug-in
that is provided in the SDK bundle, set the <codeph>Classpath</codeph> to <filepath><varname>path_to_SDKInstall</varname>/ImaTools/ImaPlugin/samples/jsonmsgPlugin/bin</filepath></p></stepxmp>
<info><note>If you run Eclipse on <tm trademark="Windows" tmtype="tm" tmclass="IGNORE">Windows</tm>, you must either convert the backslashes (\) that are used in the path to forward slashes (/), or use double backslashes (\\).</note></info></step><?Pub Caret -2?>
<step>
<cmd>Create a .zip file that contains only the debug <codeph>plugin.json</codeph> file in the root directory of the zip.</cmd>
</step>
<step>
<cmd>Install the .zip file on your <ph conref="../TextEntities.dita#TextEntities/ISM"
/> server. For more information, see <xref href="../Administering/dv00010.dita"/>.</cmd>
</step>
<step>
<cmd>Configure your <ph conref="../TextEntities.dita#TextEntities/ISM"
/> server to forward messages to the debug plug-in server that you are running on Eclipse:</cmd>
<substeps>
<substep>
<cmd>Ensure that the <codeph>PluginDebugPort</codeph> object is not set by using the <ph
conref="../TextEntities.dita#TextEntities/ISM"/> REST API POST method with the following <ph
conref="../TextEntities.dita#TextEntities/ISM"/> configuration URI:</cmd>
<info>
<p><codeph>http://&lt;admin-endpoint-IP:Port&gt;/ima/v1/configuration/</codeph></p>
<p>Provide PluginDebugPort object configuration data in the payload of the POST method by using the following schema. <parmname>Content-type</parmname> is set to <userinput>application/json</userinput>. Ensure that capitalization and double quotation marks are used as shown. <codeblock>
{    
  "PluginDebugPort": 0
}</codeblock></p>
</info>
</substep>
<substep>
<cmd>Set the <codeph>PluginDebugServer</codeph> property to the IP address of the host where Eclipse is running the plug-in server by using the <ph
conref="../TextEntities.dita#TextEntities/ISM"/> REST API POST method with the following <ph
conref="../TextEntities.dita#TextEntities/ISM"/> configuration URI:</cmd>
<info>
<p><codeph>http://&lt;admin-endpoint-IP:Port&gt;/ima/v1/configuration/</codeph></p>
<p>Provide PluginDebugServer object configuration data in the payload of the POST method by using the following schema. <parmname>Content-type</parmname> is set to <userinput>application/json</userinput>. Ensure that capitalization and double quotation marks are used as shown. <codeblock>
{    
  "PluginDebugServer": "string"
}</codeblock></p>
<p>Where:<dl>
<dlentry>
<dt>PluginDebugServer</dt>
<dd>Specifies the IPv4 or IPv6 address of the host where Eclipse is running the plug-in server. </dd>
<dd>By default, this value is not set.</dd>
</dlentry>
</dl></p>
<note type="tip"
>You can check the value of the <codeph>PluginDebugServer</codeph> object by using the <ph
conref="../TextEntities.dita#TextEntities/ISM"/> REST API GET method with the following <ph
conref="../TextEntities.dita#TextEntities/ISM"/> configuration URI:<p>
<codeblock>http://&lt;admin-endpoint-IP:Port&gt;/ima/v1/configuration/PluginDebugServer</codeblock>
</p></note>
<p/>
</info>
</substep>
<substep>
<cmd>Stop and restart the server by using the <ph conref="../TextEntities.dita#TextEntities/ISM"
/> REST API POST method with the following <ph conref="../TextEntities.dita#TextEntities/ISM"
/> configuration URI:</cmd>
<info>
<p><codeph>http://&lt;admin-endpoint-IP:port&gt;/ima/v1/service/restart</codeph></p>
<p>Provide configuration data in the payload of the POST method by using the following schema. <parmname>Content-type</parmname> is set to <userinput>application/json</userinput>. Ensure that capitalization and double quotation marks are used as shown. <codeblock>
{    
  "Service": "Server"
}</codeblock></p>
</info>
</substep>
</substeps>
</step>
<step><cmd>Set breakpoints in your plug-in source code and debug it
by using the client applications for the protocol that is implemented
in your plug-in.</cmd></step>
<step importance="optional"><cmd>If you stop the <ph conref="../TextEntities.dita#TextEntities/ISM" /> server after you start debugging, or if you stop the plug-in server process or the remote <tm trademark="Java" tmtype="tm">Java</tm> debugger, you must restart all three processes:</cmd>
<substeps>
<substep><cmd>In Eclipse, from the <uicontrol>Run</uicontrol> menu,
select <uicontrol>External Tools</uicontrol></cmd></substep>
<substep><cmd>Select the <codeph>ImaPluginServerInEclipse</codeph> configuration
that you created.</cmd></substep>
<substep><cmd>From the <uicontrol>Run</uicontrol> menu, select<uicontrol> Debug
Configurations..</uicontrol></cmd></substep>
<substep><cmd>Find <uicontrol>Remote Java Application</uicontrol> and
select <codeph>ImaPlugInOnEclipse</codeph>. Then, click <uicontrol>Debug</uicontrol>.</cmd>
</substep>
<substep>
<cmd>On the <ph conref="../TextEntities.dita#TextEntities/ISM" /> server, stop and restart the server by using the <ph conref="../TextEntities.dita#TextEntities/ISM" /> REST API POST method with the following <ph conref="../TextEntities.dita#TextEntities/ISM" /> configuration URI:</cmd>
<info>
<p><codeph>http://&lt;admin-endpoint-IP:port&gt;/ima/v1/service/restart</codeph></p>
<p>Provide configuration data in the payload of the POST method by using the following schema. <parmname>Content-type</parmname> is set to <userinput>application/json</userinput>. Ensure that capitalization and double quotation marks are used as shown. <codeblock>
{    
  "Service": "Server"
}</codeblock></p>
</info>
</substep>
</substeps>
</step>
</steps>
<postreq><ol>
<li>When you complete this phase of debugging, reset the <codeph>PluginDebugServer</codeph> object on the <ph conref="../TextEntities.dita#TextEntities/ISM" /> server. Use the <ph conref="../TextEntities.dita#TextEntities/ISM" /> REST API POST method with the following <ph conref="../TextEntities.dita#TextEntities/ISM" /> configuration URI: :<p><codeph>http://&lt;admin-endpoint-IP:Port&gt;/ima/v1/configuration/</codeph></p><p>Provide PluginDebugServer object configuration data in the payload of the POST method by using the following schema. <parmname>Content-type</parmname> is set to <userinput>application/json</userinput>. Ensure that capitalization and double quotation marks are used as shown. <codeblock>
{    
  "PluginDebugServer": ""
}</codeblock></p></li>
<li>Move to the next phase of debugging, by running the plug-in server and your plug-in on an <ph
conref="../TextEntities.dita#TextEntities/ISM"/> server. For more information, see <xref
href="devplug-invirtual.dita"/>.</li>
</ol></postreq>
</taskbody>
</task><?Pub *0000008743?><?tm 1462280096293 5 Windows||Java ?>
