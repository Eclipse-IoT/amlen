<?xml version="1.0" encoding="UTF-8"?>
<!--Arbortext, Inc., 1988-2011, v.4002--><!DOCTYPE concept PUBLIC  "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<?Pub Sty _display FontColor="red"?><?Pub Inc?><concept id="devmqttapp" xml:lang="en-us">
<title>Developing MQTT applications</title><?Pub Caret -2?>
<shortdesc>The MQ Telemetry Transport (MQTT) is a lightweight publish/subscribe
protocol that uses TCP/IP to connect large numbers of remote sensors
and control devices. MQTT is used by specialized applications on small
footprint devices that must tolerate low bandwidth and unreliable
communication. </shortdesc>
<conbody>
<section><title>Using MQTT <tm tmtype="tm" trademark="JavaScript">JavaScript</tm> in
a web browser</title><p>The following table lists the latest versions
of browsers that are supported for use with the messaging client.</p>
<table id="datasimpletable_ukr_s23_qfb">
<title>The table shows the supported browser levels for use with the MQTT messaging
client for <tm tmtype="tm" trademark="JavaScript" tmclass="IGNORE"
>JavaScript</tm>.</title>
<tgroup cols="4">
<thead>
<row>
<entry>Android</entry>
<entry>iOS</entry>
<entry><tm tmtype="tm" trademark="Linux" tmclass="IGNORE">Linux</tm></entry>
<entry><tm tmtype="tm" trademark="Windows" tmclass="IGNORE">Windows</tm></entry>
</row>
</thead>
<tbody>
<row>
<entry>Firefox for Android 19.0 and later</entry>
<entry>Safari 6.0 and later</entry>
<entry>Firefox 6.0 and later</entry>
<entry>Firefox 6.0 and later</entry>
</row>
<row>
<entry>Chrome for Android 25.0 and later</entry>
<entry>Chrome 14.0 and later</entry>
<entry>Chrome 14.0 and later </entry>
<entry>Chrome 14.0 and later</entry>
</row>
</tbody>
</tgroup>
</table></section>
<section><title>Developing MQTT applications</title><p>You can find
more information about developing MQTT applications in the <xref format="html" href="https://www.ibm.com/developerworks/community/blogs/c565c720-fe84-4f63-873f-607d87787327/entry/mobile_and_device_messaging_articles?lang=en" scope="external">Mobile Messaging &amp; M2M articles</xref> in the <tm tmtype="reg" trademark="IBM">IBM</tm> Messaging Community at <tm tmtype="reg" trademark="developerWorks">developerWorks</tm>. Information
is also available the following sections of the <ph conref="../TextEntities.dita#TextEntities/wmq" /> 7.5 documentation:<ul>
<li><xref
href="http://www-01.ibm.com/support/knowledgecenter/SSFKSJ_9.0.0/com.ibm.mq.pro.doc/q001030_.htm"
scope="external">Introduction to <ph conref="../TextEntities.dita#TextEntities/wmq"/>
Telemetry</xref></li>
<li><xref
href="http://www-01.ibm.com/support/knowledgecenter/SSFKSJ_9.0.0/com.ibm.mm.tc.doc/tc00000_.htm"
scope="external">Mobile Messaging &amp; M2M</xref></li>
</ul></p><p>See also the <xref format="html"
href="http://docs.oasis-open.org/mqtt/mqtt/v5.0/cs02/mqtt-v5.0-cs02.html" scope="external">MQTT V5.0
Protocol Specification</xref>.</p><p>For
more information about obtaining an MQTT client, see the <xref format="html" href="https://www.ibm.com/developerworks/community/blogs/c565c720-fe84-4f63-873f-607d87787327/entry/download?lang=en" scope="external">Downloads page</xref> in the <tm tmtype="reg" trademark="IBM">IBM</tm> Messaging Community at <tm tmtype="reg" trademark="developerWorks">developerWorks</tm>. Click <uicontrol>Download
Mobile Messaging &amp; M2M Client Pack</uicontrol>. Or, you can use
the Paho client, which is available from <xref href="http://www.eclipse.org/paho/" scope="external">Eclipse</xref>.</p><p>Consider
the following points when you develop MQTT applications:<ul>
<li>The keywords <codeph>${UserID}</codeph>, <codeph>${GroupID}</codeph>, <codeph>${ClientID}</codeph>,
and <codeph>${CommonName}</codeph> are used in <ph conref="../TextEntities.dita#TextEntities/ISM" /> as substitution
variables. Using these keywords in your application can lead to policy
validation failures. Therefore, understand how these keywords are
used before you use them in your MQTT application. For more information
about these substitution variables, see <xref format="dita" href="../Security/se00018.dita" scope="local" type="concept" />,
and <xref href="../Security/se00003_.dita#se00003___VariableSubstitution">Variable
substitution in connection policies</xref>.</li>
<li>Each time that you restart an MQTT application that uses memory-based
persistence, and uses <codeph>cleanSession=False</codeph>, you must
clean up old subscription data on <ph conref="../TextEntities.dita#TextEntities/ISM" /> for that client
application. You can remove old subscription data in one of the following
two ways: <ul>
<li>You can administratively remove any old subscriptions and any
previously existing clients that used the same client ID from <ph conref="../TextEntities.dita#TextEntities/ISM" /> by completing
the following steps: <ol>
<li>From the <ph conref="../TextEntities.dita#TextEntities/ISMgui" />,
select <menucascade><uicontrol>Monitoring</uicontrol><uicontrol> MQTT
Clients</uicontrol></menucascade>. The disconnected MQTT clients are
listed in the MQTT client table.</li>
<li>From the MQTT client table, select the client that you want to
delete.</li>
<li>Click <uicontrol>Actions</uicontrol>, and select <uicontrol>Delete
Client</uicontrol> to delete the client, and any subscriptions that
are associated with the client.</li>
</ol></li>
<li>Alternatively, you can create a clean environment by completing
the following steps:<ol>
<li>Temporarily connect a client with the same client ID and the <codeph>cleanSession=True</codeph> flag
set.</li>
<li>Disconnect.</li>
<li>Reconnect the client with the <codeph>cleanSession=False</codeph> flag
set.</li>
</ol></li>
</ul></li>
<li>When you develop MQTT QoS 2 applications that interact with JMS
applications, you must configure the JMS applications so that QoS
2 is maintained.<ul>
<li>If your MQTT QoS 2 applications interact with stand-alone JMS
applications, complete the following steps to maintain QoS 2 across
applications: <ul>
<li>Ensure that JMS client sessions that receive messages from and
send messages to MQTT QoS 2 applications are transacted.</li>
<li>Ensure that all messages that are sent from JMS client applications
to MQTT QoS 2 applications use the <codeph>JMSDeliveryMode.PERSISTENT</codeph> delivery
mode.</li>
</ul></li>
<li>If your MQTT QoS 2 applications interact with <tm tmtype="tm" trademark="Java">Java</tm> EE applications that use the <ph conref="../TextEntities.dita#TextEntities/ISM" /> resource adapter,
complete the following steps to maintain QoS 2 across applications: <ul>
<li>Ensure that your <tm tmtype="tm" trademark="Java">Java</tm> EE
applications are configured to use global transactions.</li>
<li>Ensure that your <tm tmtype="tm" trademark="Java">Java</tm> EE
applications use the default transaction type of container managed
transactions. If you do not want to configure your container managed
transaction to use the default transaction attribute of <codeph>Required</codeph>,
then you must use <codeph>RequiresNew</codeph>, <codeph>Mandatory</codeph>,
or <codeph>Supports</codeph>. </li>
<li>If your <tm tmtype="tm" trademark="Java">Java</tm> EE applications
send messages to MQTT QoS 2 applications, ensure that your <tm tmtype="tm" trademark="Java">Java</tm> EE applications use the <codeph>JMSDeliveryMode.PERSISTENT</codeph> delivery
mode.</li>
</ul></li>
</ul></li>
<li>When you develop MQTT applications that interact with the <ph conref="../TextEntities.dita#TextEntities/ISM" /> resource adapter,
consider the following information if you want to maintain message
order:<ul>
<li>For information about configuring the <ph conref="../TextEntities.dita#TextEntities/ISM" /> resource adapter to support preservation of message order, see <xref format="dita" href="../Administering/considerationsformsgorder.dita" scope="local" type="task">Configuring the <ph conref="../TextEntities.dita#TextEntities/ISM" /> resource adapter to preserve message order</xref></li>
<li>If you are using MQTT QoS 2, see <xref format="dita" href="../Administering/ad00777.dita" scope="local" type="concept">Message order limitations with the <ph conref="../TextEntities.dita#TextEntities/ISM" /> resource adapter</xref> for important information about message order limitations. If message order is critical to your application, then you might need to embed sequence numbers in your messages. Sequence numbers can enable your MQTT subscriber applications to manage cases where message order is disrupted.</li>
</ul></li>
</ul></p></section>
<section><title>Developing MQTT high availability applications</title><p>MQTT
has built-in support for high availability (HA). To develop HA applications
by using MQTT, you must set up the following configurations:<ul>
<li>Set up a list of server URIs for the <ph conref="../TextEntities.dita#TextEntities/ISM" />
						servers that make up your HA pair. </li>
<li>Set up your application to try connecting again after a failure. A call to connect either
						initially or after a connection lost event is received, automatically works
						through the list of configured server URIs. This process continues until a
						successful connection is made or the list is exhausted and a failure is
						returned. If a failure is returned, try to connect again because during
						failover you cannot connect to either server.Â </li>
<li>Set <codeph>cleanSession=0</codeph> for HA publisher and subscriber applications. Otherwise, you
						might lose any messages that were being processed at the time of failover
						when the new <ph conref="../TextEntities.dita#TextEntities/ISM" /> server
						connects.</li>
<li>Set a <parmname>connectTimeout</parmname> that allows your application
to be responsive. </li>
<li>Set a <parmname>keepAliveTimeout</parmname>.</li>
</ul></p><p>To configure connections in C, you can use the following
code snippet:<codeblock>char* serverURIs[2] = {"tcp://myhaserver1:1883", "tcp://myhaserver2:1883"};
MQTTClient_connectOptions opts = MQTTClient_connectOptions_initializer;
opts.serverURIcount = 2;
opts.serverURIs = serverURIs;
opts.keepAliveInterval = 30;
opts.connectTimeout = 60;
MQTTClient_connect(client, &amp;opts);</codeblock></p><p>To  configure
connections in <tm tmtype="tm" trademark="Java">Java</tm>, you can
use the following code snippet:<codeblock>String[] urls = new String[]{"tcp://myhaserver1:1883", "tcp://myhaserver2:1883"};
MqttConnectOptions options = new MqttConnectOptions();
options.setServerURIs(urls);
options.setConnectionTimeout(value)
options.setKeepAliveInterval(value)
client.connect(options);</codeblock></p><p>To set up this example
in <tm tmtype="tm" trademark="JavaScript" tmclass="IGNORE">JavaScript</tm>, you can
use the following code snippet:<codeblock>var defaultServer = "myserver";
var defaultPort = 1883;
var arrHosts = ['myhaserver1', 'myhaserver2'];
var arrPorts = [1883,1883];
		
var client = new Messaging.Client(defaultServer, defaultPort, clientId);
client.connect({
	onSuccess : onConnectSuccess,
	onFailure : onConnectFailure,
	hosts : arrHosts,
	ports : arrPorts
  timeout: &lt;value&gt;
  keepAliveInterval: &lt;value&gt;
});</codeblock></p></section>
</conbody>
<?tm 1413224018 18?>
</concept><?Pub *0000011659?>
