<?xml version="1.0" encoding="UTF-8"?>
<!--Arbortext, Inc., 1988-2011, v.4002-->
<!DOCTYPE concept PUBLIC  "-//OASIS//DTD DITA Concept//EN"
 "concept.dtd">
<?Pub Sty _display FontColor="red"?>
<?Pub Inc?>
<concept id="exceptionhandling" xml:lang="en-us">
<title>Exception Handling</title>
<!--To optimize search results, add tags that clarify product name, target platform, or other contexts. Use Edit > Un Comment to have the tags made live.-->
<!--<titlealts><navtitle></navtitle><searchtitle></searchtitle></titlealts>-->
<!--Put your short description next; used for first paragraph and abstract.-->
<shortdesc>It is important to consider implementing a JMS exception
listener so that your client application is aware of errors that are
reported asynchronously. If you do not implement an exception listener,
some error conditions can cause the <ph
conref="../TextEntities.dita#TextEntities/ISM"> 		</ph> JMS client
to automatically close connections.</shortdesc>
<!--To optimize PDF retrievability, add prolog and indexing tags that help crystalize why users should be looking up this topic (purpose, task, and what they will learn)-->
<!--<prolog><metadata><keywords><indexterm></indexterm></keywords></metadata></prolog>-->
<conbody>
<p>Client applications can detect errors that are reported asynchronously
by using the ExceptionListener interface that is provided by JMS.
Therefore, you might want to implement an exception listener if your
application handles messages asynchronously. If your application implements
a message listener, then you must implement an exception listener
if you want problems that are reported asynchronously to be detected.</p>
<p>In <ph conref="../TextEntities.dita#TextEntities/ISM"> 			</ph>,
there are cases where messages are sent asynchronously. For example,
non-persistent messages are normally sent asynchronously. Messages
that are sent on transacted sessions can be sent asynchronously by
setting the <parmname>AsyncTransactionSend</parmname> connection factory
property to <codeph>true</codeph>. Therefore, you might want to implement
exception listeners for producer applications where these scenarios
apply. There are two error conditions where the<ph
conref="../TextEntities.dita#TextEntities/ISM"> 			</ph> JMS client
automatically closes connections to the <ph
conref="../TextEntities.dita#TextEntities/ISM"> 			</ph> server for
a message producer application that does not specify an exception
listener:<ul>
<li>When the server reports that it is out of memory <xref format="html"
href="../../com.ibm.ism.messages.doc/CWLNC0231.html" scope="peer">CWLNC0231</xref>.</li>
<li>When the server reports that the capacity to store persistent
messages is exceeded <xref format="html"
href="../../com.ibm.ism.messages.doc/CWLNC0223.html" scope="peer">CWLNC0223</xref>.</li><?Pub
Caret 93?>
</ul> 			If you want to handle the two error cases differently, then
you must implement an exception listener and set the listener on the
connection for your producer application. If you implement your own
exception listener and you want to close the connection to the <ph
conref="../TextEntities.dita#TextEntities/ISM"> 			</ph> server in
these or other cases, then you must provide your own implementation
to do this. </p>
</conbody>
</concept>
<?Pub *0000003309?>
