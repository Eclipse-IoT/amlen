<?xml version="1.0" encoding="UTF-8"?>
<!--Arbortext, Inc., 1988-2011, v.4002-->
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN"
 "reference.dtd">
<?Pub Sty _display FontColor="red"?>
<?Pub Inc?>
<reference id="devjms_jmssample" xml:lang="en-us">
<title>The JMSSample application</title>
<!--To optimize search results, add tags that clarify product name, target platform, or other contexts. Use Edit > Un Comment to have the tags made live.-->
<!--<titlealts><navtitle></navtitle><searchtitle></searchtitle></titlealts>-->
<!--Put your short description next; used for first paragraph and abstract.-->
<shortdesc>The JMSSample application demonstrates how to send messages
to and receive messages from <ph
conref="../TextEntities.dita#TextEntities/ISM"></ph> topics and queues.</shortdesc>
<!--To optimize PDF retrievability, add prolog and indexing tags that help crystalize why users should be looking up this topic (purpose, task, and what they will learn)-->
<!--<prolog><metadata><keywords><indexterm></indexterm></keywords></metadata></prolog>-->
<refbody>
<section><p> It is implemented in three classes:<ul>
<li><apiname>com.ibm.ima.samples.jms.JMSSample</apiname></li>
<li><apiname>com.ibm.ima.samples.jms.JMSSampleSend</apiname></li>
<li><apiname>com.ibm.ima.samples.jms.JMSSampleReceive </apiname></li>
</ul></p><p>The JMSSample application can read administered objects
from a JNDI repository or can configure them at run time. </p><p>You
can run the JMSSample application in one of two ways. You can either
run the application by specifying the <ph
conref="../TextEntities.dita#TextEntities/ISM"></ph> server URI or
by using a JNDI repository.</p><ul>
<li><p>To run the JMSSample application by specifying the <ph
conref="../TextEntities.dita#TextEntities/ISM"></ph> server URI, use
the following command:</p><codeblock>java com.ibm.ima.samples.jms.JMSSample -s <varname>URI</varname> -a <varname>action</varname> -t <varname>topic</varname> | -q <varname>queue</varname> </codeblock><p>where:</p><dl>
<dlentry>
<dt>-s <varname>URI</varname></dt>
<dd>The URI address of the <ph
conref="../TextEntities.dita#TextEntities/ISM"></ph> server. This
address is in the format of <codeph>tcp://&lt;ipaddress>:&lt;port></codeph></dd>
</dlentry><dlentry>
<dt>-a <varname>action</varname></dt>
<dd>For this option, <varname>action</varname> can be either <codeph>publish</codeph> or <codeph>subscribe</codeph>.
The option of <codeph>publish</codeph> enables messages to be sent
to a JMS topic or queue. The option of <codeph>subscribe</codeph> enables
messages to be received from a JMS topic or queue.</dd>
</dlentry><dlentry>
<dt>-t <varname>topic</varname></dt>
<dd>This option sets <varname>topic</varname> to be the name of the
topic destination.</dd>
</dlentry><dlentry>
<dt>-q <varname>queue</varname></dt>
<dd>This option sets <varname>queue</varname> to be the name of the
queue destination.</dd>
</dlentry></dl></li>
<li><p>To run the JMSSample application by using a JNDI repository,
use the following command. </p><codeblock>java com.ibm.ima.samples.jms.JMSSample -jcf <varname>connection factory</varname> -jx <varname>JNDI context factory</varname><?linebreak pdf?> -jc <varname>JNDI provider</varname> -a <varname>action</varname> -t <varname>topic</varname> | -q <varname>queue</varname></codeblock><p>where:</p><dl>
<dlentry>
<dt><parmname>-jcf</parmname> <varname>connection factory</varname></dt>
<dd>This option sets <varname>connection factory</varname> to be the
name of a JNDI object that represents a connection factory administered
object.</dd>
</dlentry><dlentry>
<dt><parmname>-jx</parmname> <varname>JNDI context factory</varname></dt>
<dd>This option sets <varname>JNDI context factory</varname> to be
the JNDI initial context factory. For example, <codeph>com.sun.jndi.ldap.LdapCtxFactory</codeph> or <codeph>com.sun.jndi.fscontext.RefFSContextFactory</codeph>.</dd>
</dlentry><dlentry>
<dt><parmname>-jc</parmname> <varname>JNDI provider</varname> [<parmname>-jp</parmname> <varname>provider
password</varname>]</dt>
<dd>This option sets <varname>JNDI provider</varname> to be the JNDI
provider URL. For example,  <filepath>ldap://127.0.0.1/o=jndiTest</filepath> or <filepath>file:///c:/test/MyJndi</filepath> and
sets <varname>provider password</varname> to be the JNDI provider
password. </dd>
</dlentry><dlentry>
<dt><parmname>-a</parmname> <varname>action</varname></dt>
<dd>For this option, <varname>action</varname> can be either <codeph>publish</codeph> or <codeph>subscribe</codeph>.
The option of <codeph>publish</codeph> enables messages to be sent
to a JMS topic or queue. The option of <codeph>subscribe</codeph> enables
messages to be received from a JMS topic or queue.</dd>
</dlentry><dlentry>
<dt><parmname>-t</parmname> <varname>topic</varname></dt>
<dd>This option sets <varname>topic</varname> to be the name of the
JNDI object that represents the destination.</dd>
</dlentry><dlentry>
<dt><parmname>-q</parmname> <varname>queue</varname></dt>
<dd>This option sets <varname>queue</varname> to be the name of the
JNDI object that represents the destination.</dd>
</dlentry></dl></li>
</ul><p></p><p></p><p>The following command-line options are also
available with either of these commands:</p><dl><dlentry>
<dt><parmname>-ks</parmname> <varname>keystore</varname> [<parmname>-kspw</parmname> <varname>keystore
password</varname>]</dt>
<dd>where <varname>keystore</varname> is the keystore repository of
security certificates and <varname>keystore password</varname> is
the keystore password. This option is used for SSL encryption.</dd>
</dlentry><dlentry>
<dt><parmname>-ts</parmname> <varname>truststore</varname> [<parmname>-tspw</parmname> <varname>truststore
password</varname>]</dt>
<dd>where <varname>truststore</varname> is the truststore repository
and <varname>truststore password</varname> is the truststore password.
This option is used to establish trust relationships for SSL connections.</dd>
</dlentry><dlentry>
<dt><parmname>-jn</parmname> <varname>name prefix</varname></dt>
<dd>where <varname>name prefix</varname> is a name prefix. This option
can be used for creating and looking up JNDI objects.</dd>
</dlentry><dlentry>
<dt><parmname>-i</parmname> <varname>clientId</varname></dt>
<dd>where <varname>clientId</varname> is the client identity. This
option specifies the client ID that is associated with the connection
to the <ph conref="../TextEntities.dita#TextEntities/ISM"></ph> server.
 If a client ID is not specified, then one is automatically generated
by the JMS client API.</dd>
</dlentry><dlentry>
<dt><parmname>-m</parmname> <varname>message</varname> </dt>
<dd>where <varname>message</varname> is a string that represents the
message to be sent. The default is <codeph>Sample Message</codeph>.</dd>
</dlentry><dlentry>
<dt><parmname>-n</parmname> <varname>count</varname> </dt>
<dd>where <varname>count</varname> is the number of times the specified
message is to be sent or received. The default number of messages
that are sent or received is <codeph>1</codeph>.</dd>
</dlentry><dlentry>
<dt><parmname>-o</parmname> <varname>logfile name</varname> </dt>
<dd>The log defaults to <codeph>stdout</codeph>.</dd>
</dlentry><dlentry>
<dt><parmname>-u </parmname><varname>userId</varname> <parmname>-p</parmname> <varname>password</varname></dt>
<dd>where <varname>userId</varname> is the user name and <varname>password</varname> is
the user password. These options are used for authentication with <ph
conref="../TextEntities.dita#TextEntities/ISM"></ph></dd>
<dd>If <varname>userId</varname> is specified without <varname>password</varname> then
the user is prompted for the password.</dd>
</dlentry><dlentry>
<dt><parmname>-w</parmname> <varname>rate</varname></dt>
<dd>where <varname>rate</varname> is the rate at which messages are
sent in units of messages/second.</dd>
</dlentry><dlentry>
<dt><parmname>-x</parmname> <varname>timeout</varname></dt>
<dd>where <varname>timeout</varname> is the timeout in seconds for
each synchronous call to receive a message.</dd>
</dlentry><dlentry>
<dt><parmname>-b</parmname></dt>
<dd>This option enables a topic subscription to be made durable. Topic
subscriptions are non-durable by default.</dd>
</dlentry><dlentry>
<dt><parmname>-d</parmname></dt>
<dd>This option enables <parmname>DisableAck</parmname> to be set
in a connection factory.</dd>
</dlentry><dlentry>
<dt><parmname>-e</parmname></dt>
<dd>This option enables the deletion of a durable subscription at
client disconnect. By default, durable subscriptions are preserved
after disconnect.</dd>
</dlentry><dlentry>
<dt><parmname>-h</parmname></dt>
<dd>This option enables output of the usage statement.</dd>
</dlentry><dlentry>
<dt><parmname>-r</parmname></dt>
<dd>This option enables persistent delivery mode. The default delivery
mode is non-persistent.</dd>
</dlentry><dlentry>
<dt><parmname>-v</parmname></dt>
<dd>This option enables the provision of verbose output.</dd>
</dlentry></dl></section>
<section><title>Examples</title><p>The following example uses the
JMSSample application with the <ph
conref="../TextEntities.dita#TextEntities/ISM"></ph> URI to send messages
to a queue. </p><codeblock>java com.ibm.ima.samples.jms.JMSSample -s tcp://10.10.1.2:16102 -a publish -q myQueue</codeblock><p>The
following example uses the JMSSample application with a JNDI repository
to send messages to a topic. </p><codeblock>java com.ibm.ima.samples.jms.JMSSample -jcf myConnFactory -a pubish -t myTopic 
-jx com.sun.jndi.fscontext.RefFSContextFactory -jc file:///c:/test/MyJndi</codeblock><?Pub
Caret 80?></section>
</refbody>
</reference>
<?Pub *0000009670?>
