<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC  "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="br00005.dita" xml:lang="en-us">
<title>Subscriptions</title>
<shortdesc>A set of subscriptions to make on the source connection can be defined by using the
forwarder.</shortdesc>
<conbody>
<section>
<title>Subscriptions</title>
<p>A maximum of 16 subscriptions are allowed per forwarder. The Bridge makes a subscription for each
topic filter in the topic list. The quality of service (QoS) for all  subscriptions is specified by
<parmname>SourceQoS</parmname> and defaults to <userinput>2</userinput>. </p>
<p>As there is a single topic map and single key map for the forwarder, the subscriptions that are
used in a single forwarder must use a common topic space. If different mappings are required, then
separate forwarders can be used.</p>
<p>If the source sever does not allow the specified QoS, the Bridge requests a lower QoS. The server
can also return a lower QoS than requested.</p>
    <p>If the destination is <ph conref="../TextEntities.dita#TextEntities/prodname_ies4ic_short"/>, the Bridge only requests QoS=0 or QoS=1 from the source,
        because the <ph conref="../TextEntities.dita#TextEntities/prodname_ies4ic_short"/> destination does not participate in the QoS=2 protocol.  If a destination
does not allow a publish at the QoS of the message received, the QoS of the message is decreased to
a level which is supported by the destination.</p>
</section>
<section>
<title>Instances</title>
<p>In some cases, the message rate is too high to process with a single forwarder. You can create
multiple forwarders with the same definition by defining a prototype forwarder and setting the
<parmname>Instances</parmname> count to greater than zero. Up to 100 instances can be created. When
the Bridge starts, it creates the number of forwarders that are requested and appends an instance
number starting with 00 and going up to 99 to the forwarder name. Each of the forwarder instances
will appear to be a separately defined forwarder.</p>
<p>Usually a multi-instance forwarder only works when using shared subscription. If you use a
non-shared subscription, each instance sends a copy of all messages to the destination. Shared
subscriptions are defined in MQTTv5.0 and start with the topic filter <codeph>$share/</codeph> . <ph conref="../TextEntities.dita#TextEntities/ISM"/> allows connections to use the MQTTv5.0 shared
subscriptions. In addition, it allows an older form of shared subscription with topic filters
starting with<codeph> $SharedSubscription/</codeph> to be use in all versions. <ph conref="../TextEntities.dita#TextEntities/prodname_iotp_long"/>
 allows shared subscriptions to be created using an ‘A’ client class.</p>
</section>
<section>
<title>Replacement variables and properties</title>
<p>TopicMap, Selector, KeyMap, and PartitionRule forwarder properties all allow replacement
variables. When a message has properties as defined in MQTTversion 5, these properties can be used
as replacement variables.</p>
<p>In a Selector, literal text is quoted and replacement variables are not quoted. In the other
forwarder properties, literal text is not quoted, and replacement variables are represented by
<codeph>${varname}</codeph> where <codeph>varname</codeph> is the name of the replacement
variable.</p>
<p>The following replacement variables are defined:</p>
<table id="table_pcz_tk3_mfb">
<title>Replacement variables and properties</title>
<?Pub Caret -1?>
<desc>List of the replacement variables and properties for <ph conref="../TextEntities.dita#TextEntities/ISM_bridge"/><p outputclass="summary">List of the
replacement variables and properties for <ph conref="../TextEntities.dita#TextEntities/ISM_bridge"/>
</p></desc>
<tgroup cols="3">
<colspec colname="col1" colwidth="11*"/>
<colspec colname="col2" colwidth="8*"/>
<colspec colname="col3" colwidth="42*"/>
<thead>
<row valign="bottom">
<entry colname="col1">Name of property</entry>
<entry colname="col2">Type </entry>
<entry colname="col3">Description </entry>
</row>
</thead>
<tbody>
<row>
<entry colname="col1">Topic</entry>
<entry colname="col2">String</entry>
<entry colname="col3">The complete name of the <ph conref="../TextEntities.dita#TextEntities/ISM"/>
Topic.</entry>
</row>
<row>
<entry colname="col1">Topic0 – Topic99</entry>
<entry colname="col2">String</entry>
<entry colname="col3">The part of the topic which follows n slashes until the next slash. In a
TopicMap, if this is followed by an asterisk (*) then use from this part to the end of the
topic.</entry>
</row>
<row>
<entry colname="col1">QoS</entry>
<entry colname="col2">Number</entry>
<entry colname="col3">The quality of service level of the message (0-2)</entry>
</row>
<row>
<entry colname="col1">_Format</entry>
<entry colname="col2">String</entry>
<entry colname="col3">The MQTTv5 <parmname>PayloadFormatIndicator</parmname> property with a value
of <userinput>text</userinput> or <userinput>binary</userinput>. This is null for other
versions.</entry>
</row>
<row>
<entry colname="col1">_ContentType</entry>
<entry colname="col2">String</entry>
<entry colname="col3">The MQTTv5 content type property</entry>
</row>
<row>
<entry colname="col1">_ReplyTo</entry>
<entry colname="col2">String</entry>
<entry colname="col3">The MQTTv5 response topic property</entry>
</row>
<row>
<entry colname="col1">_Correlation</entry>
<entry colname="col2">String</entry>
<entry colname="col3">The MQTTv5 correlation data property. This property must be a valid UTF-8
string.</entry>
</row>
<row>
<entry colname="col1">TimeISO</entry>
<entry colname="col2">String</entry>
<entry colname="col3">The current time as an ISO8601 timestamp to milliseconds with a time
zone.</entry>
</row>
<row>
<entry colname="col1">TimeMS</entry>
<entry colname="col2">String</entry>
<entry colname="col3">The current time as a number of milliseconds since 1970-01-0T00:00Z</entry>
</row>
<row>
<entry colname="col1">$</entry>
<entry colname="col2">String</entry>
<entry colname="col3">A replacement with the literal value $. This is only needed if the literal
string contains the characters ${</entry>
</row>
</tbody>
</tgroup>
</table>
<p>In addition, the name of any MQTTv5 user property is available as a replacement value.</p>
<p>Support for creating JSON strings is provided to allow JSON named items to be inserted into the
output, and for strings to be correctly JSON escaped. A JSON replacement variable must be in the
format <codeph>${JSON:name:repl}</codeph> , where <codeph>JSON</codeph> is a constant value,
<codeph>name</codeph> is the name of the item, and <codeph>repl</codeph> is a replacement variable.
The three parts are separated by colons. For instance, <codeph>${JSON:Event:Topic3}</codeph>
creates a JSON encoded value with a name of <varname>Event</varname> and the value for<varname>
${Topic3}</varname> correctly encoded as a JSON string. This support is primarily designed for
creating JSON encoded key maps.</p>
</section>
<section><title>Message Selection</title><p>A message selector allows a forwarder to select messages
by using parts of the topic and properties of the message. Only messages that match the selector are
forwarded. Message selectors cannot use the content in the message body to select messages.</p><p>A
selector is an expression which is evaluated. A message is forwarded if the selector returns
<codeph>true</codeph>, and is not forwarded if the selector returns <codeph>false</codeph> or
<codeph>unknown</codeph>. selector is a string, with a syntax which is a subset of the SQL92
conditional expression syntax. An empty selector, or having no selector is the same as returning
<codeph>true</codeph>.</p><p>The order of evaluation of a message selector is from left to right
within precedence level. Parentheses can be used to change this order. Predefined selector literals
and operator names are shown in uppercase in the following example, but are case insensitive. The
routing rules used with an <ph conref="../TextEntities.dita#TextEntities/prodname_ies4ic_short"/>
destination also use this message selection syntax.</p><p>A selector can contain the following
information:</p><p>Literals:</p><ul>
<li>A string literal is enclosed in single quotes, with a single quote represented by doubled single
quote, for example, <codeph>'literal'</codeph> and <codeph>'literal''s'</codeph>. </li>
<li>An exact numeric literal is a numeric value without a decimal point, for example,
<codeph>57</codeph>, <codeph>-957</codeph>, and <codeph>+62</codeph>; numbers in the range of
<codeph>long</codeph> are supported. </li>
<li>An approximate numeric literal is a numeric value in scientific notation, for example,
<codeph>7E3</codeph> and <codeph>-57.9E2</codeph>, or a numeric value with a decimal, for example,
<codeph>7.</codeph>,<codeph>-95.7</codeph>, and <codeph>+6.2</codeph>. Numbers in the range of
<codeph>double</codeph> are supported. </li>
<li>The boolean literals <codeph>TRUE</codeph> and <codeph>FALSE</codeph>.</li>
</ul><p>Identifiers:</p><ul>
<li>An identifier is a sequence of letters and digits, the first of which must be a letter. The
characters underscore (_) and dollar ($) count as letters for this purpose.</li>
<li>Identifiers cannot be the names <codeph>NULL</codeph>, <codeph>TRUE</codeph>, and
<codeph>FALSE</codeph> in any case.</li>
<li>Identifiers cannot be <codeph>NOT</codeph>, <codeph>AND</codeph>, <codeph>OR</codeph>,
<codeph>BETWEEN</codeph>, <codeph>LIKE</codeph>, <codeph>IN</codeph>, <codeph>IS</codeph>, or
<codeph>ESCAPE</codeph> in any case.</li>
<li>Identifiers are either replacement field references or property references. If an identifier
that does not exist is referenced, its value is <codeph>UNKNOWN</codeph>. </li>
<li>The type of the identifier is not modified by the evaluation. Strings can only take string
operations, boolean can only take boolean operators, and numbers can only take numeric
operator.</li>
</ul><p>Expressions:</p><ul>
<li>Arithmetic expressions are composed of themselves, arithmetic operations, identifiers where
their value is treated as a numeric literal, and numeric literals.</li>
<li>Conditional expressions are composed of themselves, comparison operations, and logical
operations.</li>
<li>Standard bracketing <codeph>()</codeph> for ordering expression evaluation is supported.</li>
<li>Expressions process logical operators in precedence order: <codeph>NOT</codeph>,
<codeph>AND</codeph>, <codeph>OR</codeph>.</li>
<li>Expressions can use comparison operators: <codeph>=</codeph>, <codeph>></codeph>,
<codeph>>=</codeph>, <codeph>&lt;</codeph>, <codeph>&lt;=</codeph>, <codeph>&lt;></codeph> (not
equal).</li>
<li>Only like type values can be compared. </li>
<li>String and boolean comparison is restricted to <codeph>=</codeph> and <codeph>&lt;></codeph>.
Two strings are equal only if they contain the same sequence of characters.</li>
<li>Arithmetic operators are processed in the following precedence order:<ol>
<li>+, - (unary)</li>
<li>*, / (multiplication and division)</li>
<li>+, - (addition and subtraction)</li>
</ol></li>
<li>arithmetic-expr1 [NOT] BETWEEN arithmetic-expr2 AND arithmetic-expr3 comparison operator</li>
<li>identifier [NOT] IN (string-literal1, string-literal2,...) comparison operator where identifier
has a String or NULL value. If identifier of an IN or NOT IN operation is NULL, the value of the
operation is UNKNOWN. </li>
<li>identifier [NOT] LIKE pattern-value [ESCAPE escape-character] comparison operator, where
identifier has a String value; pattern-value is a string literal where '_' stands for any single
character; '%' stands for any sequence of characters, including the empty sequence; and all other
characters stand for themselves. The optional escape-character is a single-character string literal
whose character is used to escape the special meaning of the '_' and '%' in pattern-value. </li>
<li>identifier IS NULL (comparison operator which changes UNKNOWN into TRUE)</li>
<li>identifier IS NOT NULL (comparison operator that changes FALSE into TRUE)</li>
<li>identifier IS NOT TRUE comparison operator that makes FALSE or UNKNOWN into TRUE, and TRUE into
FALSE) This can also be done with the unary operator ! identifier. </li>
<li>identifier IS NOT FALSE comparison operator that make UNKNOWN into TRUE. This can also be done
with the unary operator !! identifier. </li>
</ul><p>Unknown Values</p><ul>
<li>Comparison or arithmetic with an unknown value always yields an <codeph>UNKNOWN</codeph>
value.</li>
<li>The <codeph>IS NULL</codeph>, <codeph>IS NOT NULL</codeph>, <codeph>IS NOT TRUE</codeph>,
and<codeph> IS NOT FALSE</codeph> operators can convert an <codeph>UNKNOWN</codeph> value into the
respective <codeph>TRUE</codeph> and <codeph>FALSE</codeph> values. </li>
<li>The <codeph>IS NOT TRUE</codeph> and <codeph>IS NOT FALSE</codeph> operators can be used to
convert <codeph>UNKNOWN</codeph> into a known value. The unary form of these (<codeph>!</codeph> and
<codeph>!!</codeph>) can also be used.</li>
<li>The boolean operators use three-valued logic as defined by the following tables:</li>
</ul><p>
<table id="table_rcz_tk3_mfb">
<title>Tables defining boolean operators use three-valued logic</title>
<?Pub Caret -1?>
<desc>Tables defining boolean operators use three-valued logic<p outputclass="summary">Tables
defining boolean operators use three-valued logic for <ph
conref="../TextEntities.dita#TextEntities/ISM_bridge"/></p></desc>
<tgroup cols="4">
<colspec colname="col1" colwidth="1*"/>
<colspec colname="col2" colwidth="1*"/>
<colspec colname="col3" colwidth="1*"/>
<colspec colname="col4" colwidth="1*"/>
<thead>
<row valign="bottom">
<entry colname="col1">AND</entry>
<entry colname="col2">T </entry>
<entry colname="col3">F</entry>
<entry colname="col4">U</entry>
</row>
</thead>
<tbody>
<row>
<entry colname="col1">T</entry>
<entry colname="col2">T</entry>
<entry colname="col3">F</entry>
<entry>U</entry>
</row>
<row>
<entry colname="col1">F</entry>
<entry colname="col2">F</entry>
<entry colname="col3">F</entry>
<entry>U</entry>
</row>
<row>
<entry colname="col1">U</entry>
<entry colname="col2">U</entry>
<entry colname="col3">F</entry>
<entry>U</entry>
</row>
</tbody>
</tgroup>
</table>
</p><p>
<table id="table_scz_tk3_mfb">
<title>Tables defining boolean operators use three-valued logic</title>
<?Pub Caret -1?>
<desc>Tables defining boolean operators use three-valued logic<p outputclass="summary">Tables
defining boolean operators use three-valued logic for <ph
conref="../TextEntities.dita#TextEntities/ISM_bridge"/></p></desc>
<tgroup cols="4">
<colspec colname="col1" colwidth="1*"/>
<colspec colname="col2" colwidth="1*"/>
<colspec colname="col3" colwidth="1*"/>
<colspec colname="col4" colwidth="1*"/>
<thead>
<row valign="bottom">
<entry colname="col1">OR</entry>
<entry colname="col2">T </entry>
<entry colname="col3">F</entry>
<entry colname="col4">U</entry>
</row>
</thead>
<tbody>
<row>
<entry colname="col1">T</entry>
<entry colname="col2">T</entry>
<entry colname="col3">T</entry>
<entry>T</entry>
</row>
<row>
<entry colname="col1">F</entry>
<entry colname="col2">T</entry>
<entry colname="col3">F</entry>
<entry>U</entry>
</row>
<row>
<entry colname="col1">U</entry>
<entry colname="col2">T</entry>
<entry colname="col3">U</entry>
<entry>U</entry>
</row>
</tbody>
</tgroup>
</table>
</p><p>Examples:</p><codeph>Topic2 not like ‘%test%’</codeph><p>Do not select messages where the
path component after the second slash contains “test”.</p><codeph>QoS > 0 and Topic6 in (‘warning’,
‘error’, ‘alert’)</codeph><p>Select only messages at QoS=1 and QoS=2 where the sixth topic part is
“warning”, “error”, or “alert”.</p></section>
</conbody>
</concept>
