<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC  "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="br00023.dita" xml:lang="en-us">
<title>Administrative REST interfaces</title>
<shortdesc>The <ph conref ="../TextEntities.dita#TextEntities/ISM_bridge"></ph> provides the ability to create admin
endpoints.</shortdesc>
<conbody>
<section><title>Using the administrative REST interfaces</title><p> There is an admin endpoint
defined during the installation as a service or using Docker. This endpoint uses a self-signed
certificate that is provided with the installation. You can modify this configured admin interface,
and you can define additional admin interfaces with different security and interface bindings, but
each one must listen to a separate port. </p><p>For example, you can have one that listens on
localhost and another one on a private network. It is best practice to restrict the admin interface
so that it is not exposed to the public internet. Always use secure connections, which requires you
to provide a server certificate and key. It is best practice to restrict the interfaces that the
admin endpoint listens on. You must also provide your own certificate. </p><p>You must have at least
one defined user to use the REST APIs. All defined users are authorized to use all REST calls. You
must use basic authentication and specify a user and a password.</p><p>You do not need to specify
all fields when an object is modified, you only need to specify those that are changed. This means
that you must also explicitly delete any complex object you wish to delete from configuration.
Complex objects are those represented as JSON objects. You can delete complex objects using a
<codeph>DELETE REST</codeph> method or by changing the global configuration with the value of the
object set to <userinput>null</userinput>.</p><p>All paths that are shown in the following tables
come after the initial path <filepath>/admin/</filepath>.</p><p>For a description of the connection
object, forwarder object, and endpoint object properties, see <xref href="br00010.dita"
format="dita" scope="local">Configuring the Bridge</xref>.</p><p>The following table shows the paths
that can be used with the <codeph>GET</codeph> method:</p>
<table id="datasimpletable_xn1_bln_qfb">
<title>Paths that can be used with the GET method, and associated description</title>
<tgroup cols="2">
<thead>
<row>
<entry>Path</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry>config</entry>
<entry>Return the complete dynamic config for this bridge instance. </entry>
</row>
<row>
<entry>config/connection/[match]</entry>
<entry>Return matching connection config. If match is missing or contains an asterisk, return all
matching connections. Only the inner levels of the object are returned.</entry>
</row>
<row>
<entry>config/endpoint/{match}</entry>
<entry>Return matching endpoint config. If match is missing or contains an asterisk, return all
matching endpoints. Only the inner levels of the object are returned.</entry>
</row>
<row>
<entry>config/forwarder/{match}</entry>
<entry>Return matching forwarder config. If match is missing or contains an asterisk, return all
matching forwarders. Only the inner levels of the object are returned.</entry>
</row>
<row>
<entry>config/user/{match}</entry>
<entry>Return matching user config. If match is missing or contains an asterisk, return all
matching users. Only the inner levels of the object are returned.</entry>
</row>
<row>
<entry>connection/password/{password}</entry>
<entry>Return the obfuscated connection password as text. </entry>
</row>
<row>
<entry>endpoint/{match?</entry>
<entry>Return the matching endpoint statistics. The match can be missing or can contain *
wildcards</entry>
</row>
<row>
<entry>forwarder/{match}</entry>
<entry>Return the forwarder status and statistics. The {match} can be left out or can be a name
including * wildcards.</entry>
</row>
<row>
<entry>info/{kind}</entry>
<entry>Show bridge execution information. If the {kind} is missing or “all”, a JSON object showing
all info is returned. If kind is “version”, “container”, “hostname”, “servername”, “platform”,
“processor”, or “buildlabel” the specific info value is returned as text.</entry>
</row>
<row>
<entry>password/{user}/{password}</entry>
<entry>Return a user object with the obfuscated password matching the specified user and password.
This can be used to get an obfuscated password when manually modifying the config files.</entry>
</row>
<row>
<entry>set/{match}</entry>
<entry>Return a config object showing the value of selected properties. Both static and dynamic
properties are returned. If the item to match does not include a wildcard, then the value is
returned without any JSON wrappers. </entry>
</row>
<row>
<entry>time</entry>
<entry>Return the time as known to the server in ISO8601 format</entry>
</row>
</tbody>
</tgroup>
</table>
<p>The following table show the paths that can be used with the POST method, and
provide an associated description:</p>
<table id="datasimpletable_zfq_x4n_qfb">
<title>Paths that can be used with the POST method, and associated
description</title>
<tgroup cols="2">
<thead>
<row>
<entry>Path</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry>accept/license/{usage}</entry>
<entry>Accept the license and specify the license type as: “Developers”, "Non-Production”, or
“Production”. If you do not accept the license, use <codeph>accept/license/None</codeph>.</entry>
</row>
<row>
<entry>config</entry>
<entry>Post a config from the outermost level of config. At this level complex objects are
represented by a JSON object named by the object type which contains a set of named objects of that
type.  The objects are described in <xref href="br00010.dita" format="dita" scope="local"
>Configuring the Bridge</xref>.</entry>
</row>
<row>
<entry>keystore/{name}</entry>
<entry>Write a file into the key store. The contents must be a X.509 objects in PEM
format.</entry>
</row>
<row>
<entry>quit/{rc}</entry>
<entry>Terminate the bridge process cleanly. The {rc} is the return code send to the operating
system and is optional and default to 0. When running the installed bridge, using a value of 2 will
cause the bridge not to be restarted. Using other rc values will cause the bridge to be restarted.
This POST does not take any content.</entry>
</row>
<row>
<entry>set/{property}/{value}</entry>
<entry>Set the specified property to the value. The following properties may be set:
LicensedUsage, LogLevel, ShutdownWait, TraceConnection, TraceLevel, TraceMessageData, and
TraceSelected. The values of LicensedUsage, LogLevel, and TraceLevel are persisted, the others only
affect this process. This POST does not take any content.</entry>
</row>
<row>
<entry>start</entry>
<entry>Start the bridge processing. This only has an effect if the bridge was set to not
automatically start, or the delay has been set very large. This POST does not take any
content.</entry>
</row>
<row>
<entry>truststore/{name}</entry>
<entry>Write a file into the trust store. The contents must be a X.509 objects in PEM
format.</entry>
</row>
</tbody>
</tgroup>
</table>
<p>The following table show the paths that can be used with the DELETE method, and
provide an associated description:</p>
<table id="datasimpletable_en3_3pn_qfb">
<title>Paths that can be used with the DELETE method, and associated description</title>
<tgroup cols="2">
<thead>
<row>
<entry>Path</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry>config/connection/{name}</entry>
<entry>Delete a single named connection</entry>
</row>
<row>
<entry>config/endpoint/{name}</entry>
<entry>Delete a single named endpoint</entry>
</row>
<row>
<entry>config/forwarder/{name}</entry>
<entry>Delete a single named forwarder</entry>
</row>
<row>
<entry>config/user/{name}</entry>
<entry>Delete a single named user</entry>
</row>
<row>
<entry>config/routingrule/{forwarder}/{name}</entry>
<entry>Delete a single routing rule from a forwarder</entry>
</row>
<row>
<entry>keystore/{name}</entry>
<entry>Delete a file from the key store</entry>
</row>
<row>
<entry>truststore/{name}</entry>
<entry>Delete a file from the trust store</entry>
</row>
</tbody>
</tgroup>
</table><p>The installation comes with the default self-signed certificate. The
certificate must be replaced with an installation-specific certificate, which can come from a
Certificate Authority or it can be self-generated. To change the certificate, put the certificate
and key into the <filepath>/var/imabridge/keystore/</filepath> directory and update
<filepath>/var/imabridge/bridge.cfg</filepath> to specify the new files. Update the fields
<varname>Endpoint.admin.Certificate</varname>, and <varname>Endpoint.admin.Key</varname> with the
names of the files, and <varname>Endpoint.admin.KeyPassword</varname> with the key password. Also,
verify that <varname>Endpoint.admin.Secure</varname> is set to true. To increase security, you can
limit the admin endpoint to only a single network interface. For example, to limit the admin
interface to only localhost, set the field <varname>Endpoint.admin.interface</varname> to
“localhost”.</p><p>To generate a self-signed certificate with a private key, you can run the
following openssl commands:</p><codeph>openssl rand -base64 8 -out myserver.keypw openssl genrsa
-aes128 -passout file:myserver.keypw -out myserver_key.pem 2048 openssl req -new -x509 -days 3650
-key myserver_key.pem -passin file:myserver.keypw -subj "/CN=&lt;common_name>/" -out
myserver_crt.pem </codeph><p>The full set of subject name elements can be specified in the subj
argument:</p><codeph>"/C=&lt;country>/ST=&lt;state>/L=&lt;location>/O=&lt;organization>/OU=&lt;unit>/CN=&lt;common_name>/"
</codeph><p>The result is the file <filepath>myserver_crt.pem</filepath>, which contains the
certificate. The file <filepath>myserver_key.pem</filepath>, which contains the key. The file
<filepath>myserver.keypw</filepath>, which contains the key password. <note>When you configure the
admin endpoint, the key password must be entered as a string, not as the name of the
file.</note></p></section>
</conbody>
</concept>
