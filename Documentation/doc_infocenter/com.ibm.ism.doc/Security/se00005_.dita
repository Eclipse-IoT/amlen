<?xml version="1.0" encoding="UTF-8"?>
<!--Arbortext, Inc., 1988-2011, v.4002-->
<!DOCTYPE concept PUBLIC  "-//OASIS//DTD DITA Concept//EN"
 "concept.dtd">
<?Pub Sty _display FontColor="red"?>
<?Pub Inc?>
<concept id="se00005_" xml:lang="en-us">
<title>Transport Layer Security</title>
<shortdesc>As an administrator, you can use certificate profiles and
security profiles to configure Transport Layer Security (TLS) for <ph
conref="../TextEntities.dita#TextEntities/ISM"></ph> endpoints. </shortdesc>
<conbody>
<p>TLS is controlled by the security profile that is associated with
an endpoint. A security profile defines the security operations that
are applied to a message flow. If TLS is enabled, the security profile
must have an associated certificate profile that defines the server
certificate to use. Server certificates protect against impersonation,
certifying that a public key belongs to a specified entity. </p>
<p>You can also disable TLS in a security profile. You might consider
disabling TLS for communication that occurs behind a firewall. For
example, if TLS traffic is managed by load balancers, you might choose
to disable TLS for communication between the load balancers and <ph
conref="../TextEntities.dita#TextEntities/ISM"></ph>. Disabling TLS
can lead to improved performance in <ph
conref="../TextEntities.dita#TextEntities/ISM"></ph> when TLS is already
operating on communication outside the firewall. For more information
about enabling and disabling TLS in <ph
conref="../TextEntities.dita#TextEntities/ISM"></ph>, see <xref
format="dita" href="../Administering/ad00740_.dita"></xref>.</p>
<p>TLS can be configured within an endpoint if the endpoint specifies
a security profile. Endpoints are associated with message hubs and
control how clients can connect to <ph
conref="../TextEntities.dita#TextEntities/ISM"></ph>. Each endpoint
can specify a security profile. The security profile determines the
client authentication method and whether TLS is used. If TLS is enabled,
then the TLS configuration settings in the security profile are used.</p>
<section><title>Configuring certificates</title><p>What is a certificate?
Certificates can be called public key certificates, digital certificates
or identity certificates. Digital certificates are digitally signed
data structures that bind public keys to subjects by a trusted certificate
authority or certification authority.  </p><p>Complete the following
steps to configure TLS on <ph
conref="../TextEntities.dita#TextEntities/ISM"></ph>:<ol>
<li>Upload a certificate and create a certificate profile.<p>A certificate
profile defines the certificate, associated key, and any password
that is used by an endpoint to establish a secured connection from
a client. You need only one certificate profile for each certificate
and key pair. The certificate in the profile is used during the SSL
handshake between a client and an endpoint. The certificate verifies
to the client that it is communicating with <ph
conref="../TextEntities.dita#TextEntities/ISM"></ph>, and not with
an unknown server.</p><p>The certificate must be a PEM format certificate,
and the associated private key must be an RSA private key. If you
have root and intermediate CA certificates, you can combine these
certificates into a single file with the server certificate to create
a trust chain. Upload the single file as the certificate file.</p><p>For
information about certificates, and how to obtain certificates, see <xref
format="dita" href="../Reference/_Topics/sy10530_.dita" scope="local"
type="concept"></xref>.</p><p>For more information about creating
a certificate profile, see <xref format="dita"
href="../Administering/ad00700_.dita"></xref>.</p></li>
<li>Create a security profile with TLS enabled and specify the certificate
profile that you created. A certificate profile can be associated
with one or more security profiles. You can associate a security profile
with one or more endpoints. In addition to the certificate profile,
the security profile defines the TLS configuration properties to secure
communications with an endpoint:<dl><dlentry>
<dt>Minimum protocol method</dt>
<dd>TLS provides secure communication for messages that flow between the client and <ph
conref="../TextEntities.dita#TextEntities/ISM"/>. The <ph
conref="../TextEntities.dita#TextEntities/ISM"
/> supports multiple encryption versions: TLS v1, TLS v1.1, TLS v1.2. <p>The different version levels of TLS show the progression of standards. Each new version modifies the client and server interchanges, and adds or removes ciphers to the support list. To make a connection between the client and <ph
conref="../TextEntities.dita#TextEntities/ISM"
/>, the same version must be supported by both the client and <ph
conref="../TextEntities.dita#TextEntities/ISM"
/>. For best security, use as high a version as possible. For best compatibility, support as many versions as possible. By selecting a minimum version, clients can connect with that minimum version, and all of the newer versions.</p><p>If you use TLS v1.0, use <userinput>Medium</userinput> level ciphers with <parmname>UseClientCipher</parmname> set to <userinput>false</userinput>. This setting ensures that the cipher is chosen from a list of client-supported ciphers that are stored on the server. Alternatively, use <userinput>Medium</userinput> level ciphers with newer browsers. </p><p>TLS v1.1 can be used as the lowest version, if all of the clients are updated to support it. You might choose this version at edge of network, and for high value information provided it is acceptable to not allow older clients. </p><p>TLS v1.2 adds a set of improved and higher bit count ciphers. TLS v1.2 offers the best security from the versions listed. However, this version might have problems with compatibility as many clients do not support this version. TLS v1.2 is the best choice in a controlled client and server environment, where all of the clients are known to run on newer systems.</p></dd>
</dlentry><dlentry>
<dt>Ciphers </dt>
<dd>Ciphers specify the encryption algorithm used.<p>Organizations often have rules for the quality
          of ciphers used. Setting the cipher to <userinput>Best</userinput>, selects ciphers that
          are supported by both the client and server, in order of quality. As a result, the higher
          bit count ciphers that are slower to process are selected. Setting the cipher to
           <userinput>Fast</userinput> selects lower bit count ciphers ahead of the highest-quality
          ciphers. Setting the cipher to <userinput>Fast</userinput> improves performance with
          little loss of security. Setting the cipher to <userinput>Medium</userinput> selects lower
          bit count ciphers that can be used with TLS v1.0, even with older browsers.</p><p>The
          cipher can be selected by either the server or the client. If you set
           <parmname>UseClientCipher</parmname> to <userinput>true</userinput>, then the cipher is
          selected by the client. Using <userinput>Best</userinput> or <userinput>Fast</userinput>
          sets the supported cipher list to the list of high-quality ciphers. If client is selected,
           <userinput>Best</userinput> and <userinput>Fast</userinput> are the same because the
          first supported cipher in the client list of high-quality ciphers is selected. If you set
           <parmname>UseClientCipher</parmname> to <userinput>False</userinput>, then the cipher is
          selected by the server. The server chooses the cipher to use from the list of ciphers that
          the client supports. If you specify <userinput>Best</userinput>, then the cipher is
          selected in strength order from the high-quality cipher list. If you specify
           <userinput>Fast</userinput>, then the fastest supported cipher from the high-quality
          cipher list is selected. </p><p>For a complete list of ciphers that are used by <ph
           conref="../TextEntities.dita#TextEntities/ISM"/>, see <xref
           href="../Reference/_Topics/re00003_.dita"/>.</p></dd>
</dlentry><dlentry>
<dt>Use Client Ciphers</dt>
<dd>Specifies whether the client can determine the cipher use when
it connects to <ph conref="../TextEntities.dita#TextEntities/ISM"></ph>.
Only the ciphers that are supported by both client and server can
be chosen. If <codeph>Use Client Ciphers</codeph> is specified, then
the client selects the cipher that is used to connect to <ph
conref="../TextEntities.dita#TextEntities/ISM"></ph>. If <codeph>Use
Client Ciphers</codeph> is not specified, then the server selects
the cipher.</dd>
</dlentry><dlentry>
<dt>Client Certificate Authentication</dt>
<dd>Specifies whether to authenticate the certificate that is presented
by the client against the trusted certificates for this security profile. </dd>
<dd>For more information about client certificates and the truststore,
see <xref format="dita" href="../Security/se00007.dita" scope="local"
type="concept"></xref>.</dd>
</dlentry></dl><p>For more information about creating a security profile,
see <xref format="dita" href="../Administering/ad00700_.dita"></xref>.</p></li>
<li>Associate the security profile with an endpoint on a message hub.<p>For
more information about configuring message hubs, see <xref format="dita"
href="../Administering/ad00320_.dita" otherprops="betaonly" scope="peer"
type="concept">Configuring message hubs</xref><xref format="dita"
href="../Administering/ad00360_.dita" otherprops="NOTbeta" scope="peer"
type="concept">Configuring message hubs</xref>.</p></li>
</ol> </p></section>
<section><title>Replacing server certificates</title><p>If you need
to replace a certificate, for example if the certificate is due to
expire, you can upload a new certificate and associate it with the
certificate profile that references the certificate that you need
to replace.</p></section><?Pub Caret -1?>
<section><title>Related links</title></section>
</conbody>
</concept>
<?Pub *0000010185?>
