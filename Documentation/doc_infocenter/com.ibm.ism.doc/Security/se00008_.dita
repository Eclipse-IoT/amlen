<?xml version="1.0" encoding="UTF-8"?>
<!--Arbortext, Inc., 1988-2011, v.4002-->
<!DOCTYPE concept PUBLIC  "-//OASIS//DTD DITA Concept//EN"
 "concept.dtd">
<?Pub Sty _display FontColor="red"?>
<?Pub Inc?>
<concept id="se00008_" xml:lang="en-us">
<title>OAuth</title>
<shortdesc>OAuth is a protocol that enables a resource owner, such
as a user, to allow a third party     access to a protected resource
without sharing a user name or password. Instead, an access token
    is used to grant access to the protected resource. For <ph
conref="../TextEntities.dita#TextEntities/ISM"></ph>, it enables a
client application to connect     to the <ph
conref="../TextEntities.dita#TextEntities/ISM"></ph> server without
sharing the user name     or password with <ph
conref="../TextEntities.dita#TextEntities/ISM"></ph>. <ph
conref="../TextEntities.dita#TextEntities/ISM"></ph> supports OAuth
2.0.</shortdesc>
<conbody>
<p>With the OAuth protocol, a client application can be granted access
to a resource server       without entering a user name and password
to access that server. Instead, the client       application is authenticated
by a trusted server that is known as an authorization server. The
      authorization server returns an access token to the client application
so that the client       application can connect to the resource server
without entering a user name or password.</p>
<p>For example, a client application, such as a photo-printing service,
can be granted access to       photos that are stored on a protected
server, without the user name and password for that       server.
The photo-printing service requests that user authenticate with an
authorization       server. The authorization server issues an access
token, which is used by the photo-printing       service to request
access to the photos. When the access token is accepted by the protected
      server, the photo-printing service can access the photos to
print them.</p>
<p>The following diagram shows the flow to authenticate a client to connect to <ph
                conref="../TextEntities.dita#TextEntities/ISM"/> by using OAuth:<fig>
                <title>OAuth flow to authenticate a client to connect to <ph
                        conref="../TextEntities.dita#TextEntities/ISM"/></title>
                <image href="se00008a_v2.gif">
                    <alt>A diagram that shows the OAuth flow to authenticate a client to connect to
                            <ph conref="../TextEntities.dita#TextEntities/ISM"/></alt>
                </image>
            </fig><ol>
                <li>The <ph conref="../TextEntities.dita#TextEntities/ISM"/> client logs on to the
                    client application server to request authorization to connect to <ph
                        conref="../TextEntities.dita#TextEntities/ISM"/>.</li>
                <li>The client application server requests authorization from the authorization
                    server.</li>
                <li>The authorization server connects to the LDAP server to authenticate the
                    user.</li>
                <li> The authorization server creates an authorization token and returns it to the
                        <ph conref="../TextEntities.dita#TextEntities/ISM"/> client. The
                    authorization token is in JSON format and includes the following
                    data:<codeblock> {"expires_in":86400, "refresh_token":"18927670-R-2v8e8ycA419RaaVWY9Xz4APp", 
"access_token":"18926970-A-nMnSHDqg8Fsunm6Qx1cF1APp"}</codeblock></li>
                <li>The <ph conref="../TextEntities.dita#TextEntities/ISM"/> client connects to <ph
                        conref="../TextEntities.dita#TextEntities/ISM"/> with the user name
                        <codeph>IMA_OAUTH_ACCESS_TOKEN</codeph> and the authorization token as a
                    password. The <ph conref="../TextEntities.dita#TextEntities/ISM"/> client must
                    send the complete authorization token, in JSON format, including the
                        <codeph>"expires_in"</codeph>, <codeph>"refresh_token"</codeph>, and
                        <codeph>"access_token"</codeph> data fields, as a password.</li>
                <li><ph conref="../TextEntities.dita#TextEntities/ISM"/> connects to the
                    authorization server to validate the access token. The name of the access token
                    and the value specified by the <parmname>AuthKey</parmname> parameter in the
                    OAuth profile must match. If the token is validated, the client can connect to
                        <ph conref="../TextEntities.dita#TextEntities/ISM"/>. <p>The URL to use to
                        connect to the authorization server to validate the access token is
                        specified by the <parmname>ResourceURL</parmname> parameter in an OAuth
                        profile.</p></li>
                <li> If any connection or messaging policies on <ph
                        conref="../TextEntities.dita#TextEntities/ISM"/> require authorization that
                    is based on group ID, <ph conref="../TextEntities.dita#TextEntities/ISM"/> must
                    first retrieve the user name that is associated with the access token. The user
                    name must be retrieved from the authorization server. You can configure the
                    authorization server to return a comma-separated list of groups to which the
                    user belongs, as well as the user name. Alternatively, you can use the user name
                    that is returned from the authorization server to retrieve group ID information
                    from an LDAP server. <p>The URL to use to connect to the authorization server to
                        retrieve the user information is specified by the
                            <parmname>UserInfoURL</parmname> parameter in an OAuth profile. The user
                        ID is returned as a JSON object. The authorization server can also return
                        the group ID in the JSON object. The names of the user ID and group ID are
                        specified by the <parmname>UserInfoKey</parmname> and
                            <parmname>GroupInfoKey</parmname> parameters respectively in the OAuth
                        profile. </p><p>If the authorization server is configured to return the user
                        ID and group ID in the response to the authorization request, the values
                        specified in the <parmname>ResourceURL</parmname> and
                            <parmname>UserInfoURL</parmname> parameters in the OAuth profile must be
                        the same.</p><p>For more information about configuring OAuth, see <xref
                            href="../Administering/ad00760_.dita"/>.</p></li>
                <li>If <ph conref="../TextEntities.dita#TextEntities/ISM"/> is not configured to
                    retrieve the group name from the authorization server, then the user ID that is
                    returned from the authorization server can be used by <ph
                        conref="../TextEntities.dita#TextEntities/ISM"/> to connect to an external
                    LDAP server to retrieve the name of the group to which the user belongs.</li>
            </ol><?Pub Caret 91?></p>
<p>To configure <ph conref="../TextEntities.dita#TextEntities/ISM"></ph> to
use OAuth, you must    complete the following steps:<ol>
<li>Configure the client application to use user name and password
authentication where the user name is <codeph>IMA_OAUTH_ACCESS_TOKEN</codeph>,
and the password is the authorization token.</li>
<li>Register the client application with the authorization server.<p>The registered application is
assigned a client ID and a client secret. In <ph conref="../TextEntities.dita#TextEntities/was"/>,
this information is stored in
<codeph>&lt;AppServer_cell_directory>/oauth20/base_clients.xml</codeph>:
<codeblock>&lt;client id="MessageGatewayExampleClient" component="MessageGatewayProvider" secret="Secret" <?linebreak pdf?> displayname="Message Gateway Client" redirect="https://192.0.2.1:16102" enabled="true">
&lt;/client></codeblock></p></li>
<li>Configure <ph conref="../TextEntities.dita#TextEntities/ISM"></ph> for
OAuth:<ol>
<li>Create an OAuth profile that defines the access token name, and
the authorization server URL to validate the token. Optionally, the
OAuth profile can define the authorization server URL to retrieve
user information.</li>
<li>Associate the OAuth profile with a security profile.</li>
</ol>For more information about how to configure OAuth for <ph
conref="../TextEntities.dita#TextEntities/ISM"></ph>, see <xref
href="../Administering/ad00760_.dita"></xref>.</li>
</ol></p>
</conbody>
<related-links>
<link href="http://tools.ietf.org/html/rfc6749" scope="external">
<linktext>The OAuth 2.0 Authorization Framework</linktext></link>
</related-links>
<?tm 1413224011 0?>
</concept>
<?Pub *0000007305?>
