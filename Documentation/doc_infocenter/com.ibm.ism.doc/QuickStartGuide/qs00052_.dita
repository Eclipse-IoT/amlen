<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "task.dtd">
<task id="qs00052_" xml:lang="en-us">
<title>Building and running the <ph conref="../TextEntities.dita#TextEntities/ISMgui"
/>  Docker image</title>
<!--To optimize search results, add tags that clarify product name, target platform, or other contexts. To enable the tags, right-click, select Refactoring > Toggle Comment.-->
<!--<titlealts><navtitle></navtitle><searchtitle></searchtitle></titlealts>-->
<!--Put your short description next; used for first paragraph and abstract.-->
<shortdesc>Build and deploy the <ph conref="../TextEntities.dita#TextEntities/ISMgui"
        /> Docker image and then start the <ph conref="../TextEntities.dita#TextEntities/ISMgui"
        /> Docker container. You can then use the <ph
        conref="../TextEntities.dita#TextEntities/ISMgui"/> to administer one or more <ph
        conref="../TextEntities.dita#TextEntities/ISM"/> messaging servers. </shortdesc>
<!--To optimize PDF retrievability, add prolog and indexing tags that help crystalize why users should be looking up this topic (purpose, task, and what they will learn)-->
<!--<prolog><metadata><keywords><indexterm></indexterm></keywords></metadata></prolog>-->
<taskbody>
<prereq>Ensure that you have access to a yum repository so that you can use the Dockerfile in the .tz file to build a Docker image.</prereq>
<steps>
<step>
<cmd>Build the <ph conref="../TextEntities.dita#TextEntities/ISMgui"/> Docker image.</cmd>
<substeps>
<substep>
<cmd>In the imawebui subdirectory, rename the <filepath>EclipseAmlenWebUI-&lt;<varname>build_info</varname>>.rpm</filepath> file to <filepath>imawebui.rpm</filepath> by entering the following command:</cmd>
                        <info>
                            <codeblock>mv EclipseAmlenWebUI-&lt;<varname>build_info</varname>>.rpm imawebui.rpm</codeblock>
                        </info>
                    </substep>
<substep id="sudostep">
<cmd>If you are not logged in as the root user, enter the following command:</cmd>
<info><codeblock>sudo sh</codeblock>Issuing this command enables you to run subsequent commands without having to specify <codeph>sudo</codeph>.</info>
</substep>
                    <substep>
                        <cmd>If your host OS is Red Hat, you need to modify the Dockerfile.</cmd>
                        <info>Change "<filepath>FROM centos:latest</filepath>" to "<filepath>FROM rhel:latest</filepath>".</info>
                    </substep>
<substep>
<cmd>Build the <ph conref="../TextEntities.dita#TextEntities/ISMgui"
/> Docker image by entering the following command:</cmd>
<info><codeblock>docker build --force-rm=true -t imawebui:5.0 .</codeblock>Ensure that you include
the period at the end of the command.</info>
</substep>
<substep>
<cmd>Confirm that the <ph conref="../TextEntities.dita#TextEntities/ISMgui"
/> Docker image has been built successfully by entering the following command:</cmd>
<info><codeblock>docker images</codeblock>and look for output that is similar to the following
line:<codeblock>imawebui     5.0    83b255b5a4b8    3 seconds ago</codeblock></info>
</substep>
</substeps>
</step>
<step>
                <cmd>Create a .tar file of the image so that you can deploy the <ph
                        conref="../TextEntities.dita#TextEntities/ISMgui"/> on other hosts by
                    entering the following command:</cmd>
                <info>
                    <codeblock>docker save -o ./imawebui-5.0-dockerimage.tar imawebui:5.0</codeblock>
                </info>
            </step>
<step>
<cmd>Start the <ph conref="../TextEntities.dita#TextEntities/ISMgui"
/> by entering the following command:</cmd>
<info>
<codeblock>docker run --cap-add SYS_ADMIN --net=host -P -it --name imawebui --env-file=imawebui-docker.env -m 2g -d imawebui:5.0</codeblock>This
command creates and starts the <ph conref="../TextEntities.dita#TextEntities/ISMgui"/> Docker
container. <p>The following table shows the environment variables that are in the
<filepath>imawebui-docker.env</filepath> file. You can set the environment variables and include
them in the <filepath>imawebui-docker.env</filepath> file and include the file in the <codeph>docker
run</codeph> command or you can specify them separately in the command by using the
<codeph>-e</codeph> argument on the command.<table frame="all" id="table_acx_2s1_3s"><title><ph
conref="../TextEntities.dita#TextEntities/ISMgui"/> container environment variables</title><tgroup
cols="3">
<colspec colname="c1" colnum="1" colwidth="2.84*"/>
<colspec colname="c2" colnum="2" colwidth="1*"/>
<colspec colname="c3" colnum="3" colwidth="1.92*"/>
<thead>
<row>
<entry>Environment variable name</entry>
<entry>Required?</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry>WEBUI_CONTAINER_NAME</entry>
<entry>Required</entry>
<entry><ph conref="../TextEntities.dita#TextEntities/ISMgui"/> Docker container name. </entry>
</row>
<row>
<entry>WEBUI_MEMORY_SIZE </entry>
<entry>Required</entry>
<entry>Amount of memory, in GB, for use by the <ph conref="../TextEntities.dita#TextEntities/ISMgui"
/>. The minimum value is 1 GB.</entry>
</row>
<row>
<entry>WEBUI_PORT</entry>
<entry>Optional</entry>
<entry>Port number for the <ph conref="../TextEntities.dita#TextEntities/ISMgui"/> endpoint. The
default is 9087.</entry>
</row>
<row>
<entry>WEBUI_HOST</entry>
<entry>Optional</entry>
<entry>Host interface for the <ph conref="../TextEntities.dita#TextEntities/ISMgui"/> endpoint. The
default is *</entry>
</row>
</tbody>
</tgroup></table></p><note>
<p>The default value for WEBUI_HOST is <userinput>*</userinput>, which means that all interfaces can
access the Web UI. On systems with multiple interfaces, you might want to use a specific interface
rather than allowing all interfaces to access the Web UI. For example, if a host is configured with
the following interfaces:<ul>
<li>10.10.1.2</li>
<li>10.2.1.10</li>
<li>10.1.10.2</li>
</ul>you might want to specify WEBUI_HOST as 10.10.1.2 to limit Web UI access to that particular
interface. If you use the default WEBUI_HOST value of <userinput>*</userinput>, then all three
interfaces can access the Web UI.</p>
</note></info>
</step>
<step>
<cmd>Verify that the <ph conref="../TextEntities.dita#TextEntities/ISMgui"
/> container is running by entering the following command:</cmd>
<info>
<codeblock>docker ps</codeblock>
</info>
</step>
<step>
<cmd>If you are not logged in as the root user, enter the following command to exit from the sudo shell that you created at step <xref
format="dita" href="qs00052_.dita#qs00052_/sudostep" scope="local" type="substep"/>:</cmd>
<info>
<codeblock>exit</codeblock>
</info>
</step>
</steps>
<postreq>
<p>After you start the <ph conref="../TextEntities.dita#TextEntities/ISM"/> messaging server and <ph
                    conref="../TextEntities.dita#TextEntities/ISMgui"/> Docker containers, you can
                log in to the <ph conref="../TextEntities.dita#TextEntities/ISMgui"/> and verify the
                installation by using a demonstration application. For more information about
                logging in to the <ph conref="../TextEntities.dita#TextEntities/ISMgui"/>, see <xref
                    href="qs00053_.dita"/>. For more information about verifying the installation,
                see <xref href="qs00002_.dita"/>.<note>The <ph
                        conref="../TextEntities.dita#TextEntities/ISMgui"/> can administer the
                    messaging server only after the license has been accepted on the messaging
                    server. Use the <ph conref="../TextEntities.dita#TextEntities/ISM"/> REST API
                    POST method to accept the license on the messaging server. For more information
                    about accepting the license by using the <ph
                        conref="../TextEntities.dita#TextEntities/ISM"/> REST API POST method, see
                        <xref format="dita" href="../Administering/ad00793_.dita" scope="local"
                        type="task"/>.</note></p>
</postreq>
</taskbody>
</task>
