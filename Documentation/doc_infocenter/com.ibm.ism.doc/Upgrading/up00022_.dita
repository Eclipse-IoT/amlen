<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="up00022_" xml:lang="en-us">
    <title>TLS in <ph conref="../TextEntities.dita#TextEntities/ISM_prev"/> and <ph conref="../TextEntities.dita#TextEntities/ISM"/></title>
    <body>
    <section>
        <title>High Availability Pairing</title>
        <p><ph conref="../TextEntities.dita#TextEntities/ISM_prev"/> (formally known as <ph conref="../TextEntities.dita#TextEntities/ISM_prev_prev"/>) 
        allows two instances of the software to be put into an Active-Passive relationship to enable a fast failover mechanism to provide a Highly 
        Available system. The connection between the two instances can optionally have TLS enabled. This uses credentials in the binary to 
        secure the connection.</p>
        
        <p><ph conref="../TextEntities.dita#TextEntities/ISM_prev"/> inherits this ability but uses a different set of default credentials.
        This means that you cannot pair a Message Gateway instance and Eclipse Amlen together using their respective default credentials. Pairing 
        them together is desirable as a migration strategy. There are two methods for allowing a pair to be created.</p>
        
        <p>The first, and recommended way, is to provide matching credentials to both instances. This is also recommended for enhanced 
        security due to the default credentials being discoverable. A key and certificate can be placed in the keystore directory for 
        Message Gateway the default location is:/var/messagesight/data/certificates/keystoreFor Eclipse Amlen the default location 
        is:/var/lib/amlen-server/data/certificates/keystore</p>
        <p>The key must be called HA_key.pem and must be in pem format.The certificate must be called HA_cert.pem and must be in pem format.
        The keystore location can be changed in the server.cfg.  <ph conref="../TextEntities.dita#TextEntities/ISM"/> supports user provided 
        TLS credentials from the initial version. Message Gateway gained user provided SSL credentials in an ifix of 5.0.0.2. The 
        alternative method which can be used with previous versions of Message Gateway is to disable certificates for the connection. This 
        is done by setting RequireCertificates to false in the HighAvailability configuration of the <ph conref="../TextEntities.dita#TextEntities/ISM"/> 
        Instance. An example of this is:</p>
        <codeblock>
        curl -m 10 -u "${IMA_USER}" -k -X POST -d 
                '{ "HighAvailability": 
                        { "Group": "haPair1",
                          "EnableHA": true,
                          "StartupMode": "AutoDetect",
                          "RemoteDiscoveryNIC": "10.0.1.24",
                          "LocalReplicationNIC": "10.0.1.25",
                          "LocalDiscoveryNIC": "10.0.1.26",
                          "PreferredPrimary": true,
                          "UseSecuredConnections":true,
                          "RequireCertificates": false,
                        }
                 }' "${IMA_ADMIN}/configuration" 
        </codeblock>
        <p>This method is recommended as a temporary solution for the migration and once the migration to Eclipse Amlen is complete the 
        setting should be turned off. Changes to this setting require a restart of the instance to take effect. If user provided credentials 
        are supplied then certificates are always required so it is not possible to pair Amlen instances with user provided credentials 
        with <ph conref="../TextEntities.dita#TextEntities/ISM_prev"/> instances that do not support user provided credentials.</p>
    </section>
    <section>
        <title>Migrating HA Pairs to User Provided Credentials</title>
        <p>Migrating from a HA Pair using default credentials to user provided credentials requires the credentials to be uploaded 
        to the keystores on both instances, for <ph conref="../TextEntities.dita#TextEntities/ISM_prev"/> the default location is:
        <filepath>/var/messagesight/data/certificates/keystore</filepath>. For <ph conref="../TextEntities.dita#TextEntities/ISM_prev"/> the
        default location is: <filepath>/var/lib/amlen-server/data/certificates/keystore</filepath>. The key must be called 
        <filepath>HA_key.pem</filepath> and must be in pem format. The certificate must be called <filepath>HA_cert.pem</filepath> and 
        must be in pem format.The keystore location can be changed in the <filepath>server.cfg</filepath>.</p>
        <p>For details on how to create credentials see the Authentication Methods section.</p>
        <p>The procedure is:</p>
        <ol>
            <li>Place the key and certificate on the standby instance and define the truststore if using Certificate Authorities</li>
            <li>Restart the standby instance.The standby instance will not become active in the pair. Example results from HighAvailability will be:
            <codeblock>curl -m 10 -u "${IMA_USER}" -k -X GET "${IMA_ADMIN}/service/status/HighAvailability"
            Response from the Primary:
            {  "Version":"v1", 
               "HighAvailability": {
                   "Status": "Active",
                   "Enabled": true,
                   "Group": "haPair1",
                   "NewRole": "PRIMARY",
                   "OldRole": "PRIMARY",
                   "ActiveNodes": 1,
                   "SyncNodes": 1,
                   "PrimaryLastTime": "2021-05-05T16:48:22Z",
                   "PctSyncCompletion": -1, 
                   "ReasonCode": 0,
                   "RemoteServerName":"3ac46d703cde:9089"
               }
            }
            Running the command again against the rcently restarted secondary:
            curl  -u "${IMA_USER}" -k -X GET "${IMA_ADMIN}/service/status/HighAvailability"
            Response:
            {  "Version":"v1", 
               "HighAvailability": {
                   "Status": "Active",
                   "Enabled": true,
                   "Group": "haPair1",
                   "NewRole": "UNSYNC",
                   "OldRole": "UNSYNC",
                   "ActiveNodes": 0,
                   "SyncNodes": 0,
                   "PrimaryLastTime": "",
                   "PctSyncCompletion": -1,
                   "ReasonCode": 0,
                   "RemoteServerName":""
               }
            }
            </codeblock></li>
            <li>Place the key and certificate on the primary instance and define the
            truststore if using Certificate Authorities.</li>
            <li> <lines>Restart the primary instance
                The primary instance will restart and remain the primary instance
                The unsynchronized instance will start to synchronize and once completed will become a standby.</lines>
            The initial HighAvailability status will show:
            <codeblock>
            #Running the command against the primary
            curl -m 10 -u "${IMA_USER}" -k -X GET "${IMA_ADMIN}/service/status/HighAvailability
            #Response:
            "{  "Version":"v1",
                "HighAvailability": {
                    "Status": "Active",
                    "Enabled": true,
                    "Group": "haPair1",
                    "NewRole": "PRIMARY",
                    "OldRole": "UNSYNC",
                    "ActiveNodes": 2,
                    "SyncNodes": 1,
                    "PrimaryLastTime": "2021-05-05T16:48:39Z",
                    "PctSyncCompletion": 1,
                    "ReasonCode": 0,
                    "RemoteServerName":""
                }
            }
            #Running the command against the secondary
            curl -m 10 -u "${IMA_USER}" -k -X GET "${IMA_ADMIN}/service/status/HighAvailability"
            #Response:
            {  "Version":"v1",
               "HighAvailability": {
                   "Status": "Active",
                   "Enabled": true,
                   "Group": "haPair1",
                   "NewRole": "UNSYNC",
                   "OldRole": "UNSYNC",
                   "ActiveNodes": 2,
                   "SyncNodes": 0,
                   "PrimaryLastTime": "",
                   "PctSyncCompletion": -1,
                   "ReasonCode": 0,
                   "RemoteServerName":""
                }
            }
            </codeblock>
            Once the procedure has completed, they should return to:
            <codeblock>
            curl -m 10 -u "${IMA_USER}" -k -X GET "${IMA_ADMIN}/service/status/HighAvailability"
            {  "Version":"v1",
               "HighAvailability": {
                   "Status": "Active",
                   "Enabled": true,
                   "Group": "haPair1",
                   "NewRole": "PRIMARY",
                   "OldRole": "PRIMARY",
                   "ActiveNodes": 2,
                   "SyncNodes": 2,
                   "PrimaryLastTime": "2021-05-05T17:16:07Z",
                   "PctSyncCompletion": -1,
                   "ReasonCode": 0,
                   "RemoteServerName":"3ac46d703cde:9089"
                }
            }
            curl -m 10 -u "${IMA_USER}" -k -X GET "${IMA_ADMIN}/service/status/HighAvailability"
            {  "Version":"v1",
               "HighAvailability": {
                   "Status": "Active",
                   "Enabled": true,
                   "Group": "haPair1",
                   "NewRole": "STANDBY",
                   "OldRole": "UNSYNC",
                   "ActiveNodes": 2,
                   "SyncNodes": 2,
                   "PrimaryLastTime": "",
                   "PctSyncCompletion": -1,
                   "ReasonCode": 0,
                   "RemoteServerName":"3704cacfea12:9089"
                }
            }
            </codeblock>
            </li>
        </ol>
    </section>
    <section>
        <title>Clustering</title>
        <p><ph conref="../TextEntities.dita#TextEntities/ISM_prev"/> allows multiple instances of the software to be put into a cluster to provide scalability. 
        The connection between the instances can optionally have TLS enabled. This uses credentials in the binary to secure the connection.</p>

        <p><ph conref="../TextEntities.dita#TextEntities/ISM"/> inherits this ability but uses a different set of default credentials.</p>
        
        <p>This means that you cannot cluster <ph conref="../TextEntities.dita#TextEntities/ISM_prev"/> instances and 
        <ph conref="../TextEntities.dita#TextEntities/ISM"/> instances together using their respective default credentials. There are two methods for 
        allowing a cluster to be created.</p>
        
        <p>The first, and recommended way, is to provide matching credentials to all instances. This is also 
        recommended for enhanced security due to the default credentials being discoverable. 
        A key and certificate can be placed in the keystore directory for <ph conref="../TextEntities.dita#TextEntities/ISM_prev"/>the default location 
        is: <filepath>/var/messagesight/data/certificates/keystore</filepath>. 
        For <ph conref="../TextEntities.dita#TextEntities/ISM"/> the default location is: <filepath>/var/lib/amlen-server/data/certificates/keystore</filepath>
        The key must be called <filepath>Cluster_key.pem</filepath> and must be in pem format. The certificate must be called <filepath>Cluster_cert.pem</filepath> 
        and must be in pem format.The keystore location can be changed in the server.cfg.</p>
        
        <p><ph conref="../TextEntities.dita#TextEntities/ISM"/> supports user provided SSL credentials from the initial version. 
        <ph conref="../TextEntities.dita#TextEntities/ISM_prev"/> gained user provided SSL credentials in an ifix of v5.0.0.2. 
        For details on how to create credentials see the Authentication Methods section.</p>
        
        <p>The alternative method which can be used with previous versions of Message Gateway
        is to disable certificates for the connection. This is done by setting RequireCertificates to false in the ClusterMembership configuration on the 
        <ph conref="../TextEntities.dita#TextEntities/ISM"/> instances. An example of this is:</p>
        <codeblock>
        curl -X POST    -d  "{
              \"ClusterMembership\": {
                    \"EnableClusterMembership\": true,
                    \"ControlAddress\": \"10.0.1.5\",
                    \"MessagingAddress\": \"10.0.1.5\",
                    \"DiscoveryServerList\":\"10.0.1.5:9104,10.0.1.4:9104\",
                    \"UseMulticastDiscovery\": false,
                    \"ClusterName\": \"MyCluster\",
                    \"MessagingUseTLS\":true,
                    \"CertificatesRequired\":false}
              }"  http://127.0.0.1:9089/ima/v1/configuration
        </codeblock>
        <p>This method is recommended as a temporary solution once all instances support user provided credentials they should be provided.
         Changes to this setting require a restart of the instance to take effect. If user provided credentials are supplied, then certificates are always 
         required so it is not possible to cluster <ph conref="../TextEntities.dita#TextEntities/ISM"/> instances with user provided credentials with 
         <ph conref="../TextEntities.dita#TextEntities/ISM_prev"/> instances that do not support user provided credentials.</p>
    </section>
    <section>
        <title>Migrating A Cluster To User Provided Credentials</title>
        <p>Migrating from a Cluster using default credentials to user provided credential uploaded to the keystores on all instances.</p>
        <p>For details on how to create credentials see the Authentication Methods section.</p>
        <p>During this procedure, instance will in turn be removed form the cluster, they will not be able to re-join the cluster until 
        all instances have been restarted.</p>
        <p>The procedure is:</p>
        <ol>
            <li>Place the credentials (key, certificate and cafile if appropriate) on all instances.</li>
            <li>If using High Availability pairing restart all standby instances wait for them to resynchronize.</li>
            <li>Select one instance as the last instance to restart.</li>
            <li>Restart each instance in turn checking that the cluster status on the last instance has the disconnected server 
               count incremented:
               <codeblock>
               curl -m 10 -u "${IMA_USER}" -k -X GET "${IMA_ADMIN}/service/status/Cluster"
                    {  "Version":"v1",
                       "Cluster": {
                           "Status": "Active",
                           "Name": "MyCluster",
                           "Enabled": true,
                           "ConnectedServers": 2,
                           "DisconnectedServers": 1
                       }
                    }
                </codeblock></li>
            <li>Restart the last instance</li>
            <li>Wait for the cluster status to be available on the last instance and check that the connected server count
                is back to what it started as:
                <codeblock>
                curl -m 10 -u "${IMA_USER}" -k -X GET "${IMA_ADMIN}/service/status/Cluster"
                    {  "Version":"v1",
                       "Cluster": {
                           "Status": "Active",
                           "Name": "MyCluster",
                           "Enabled": true,
                           "ConnectedServers": 3,
                           "DisconnectedServers": 0 
                        }
                    }
                </codeblock></li>
        </ol>
    </section>
    <section>
        <title>Authentication Methods</title>
        <p>As well as simple key certificate pairs being used which requires the same key and certificate to be placed
        on all the instances in the HA pair or cluster. Certificate Authorities can also be used. When enabled the product
        uses peer-to-peer secure connections.</p>
        <p><b>Without Certificate Authorities</b></p>
        <p>When not using Certificate Authorities each instance in the system require the same key and certificate to be set.
        An example to create the key and self-signed certificate using openssl is:</p>
        <codeblock>
        openssl genrsa -out ha_keydata 3072
        openssl req -new -x509 -key HA_key.pem -out HA_cert.pem -days 360
        </codeblock>
        <p>This will produce the key and certificate in the correct pem format. In this specific example the key will be between the lines:</p>
        <codeblock>-----BEGIN RSA PRIVATE KEY-----</codeblock>
        <p>And:</p>
        <codeblock>-----END RSA PRIVATE KEY-----</codeblock>
        <p>The certificate will be between:</p>
        <codeblock>-----BEGIN CERTIFICATE-----</codeblock>
        And:
        <codeblock>-----END CERTIFICATE-----</codeblock>
        <p>If the key or certificate file does not contain a BEGIN and END, then it may have been created in the wrong format.</p>
        <p>Once the key and certificate have been created, they can be copied into the correct location of each instance.</p>
        <p><b>With Certificate Authorities</b></p>
        <p>When using Certificate Authorities each instance requires a key and certificate to be set in the same way as without 
        Certificate Authorities. However, as long as the credentials are created from an authorized system they do not have to
        be the same on each instance. To set the authorities the root and any intermediate certificates need to be provided.</p>
        <p>An example to create a root certificate, an intermediate certificate, and two leaf certificates is:</p>
        <codeblock>
        openssl genrsa -out root.key 2048
        openssl req -new -key root.key -out root.csr -config root_req.config
        openssl ca -in root.csr -out root.pem -config root.config -selfsign -extfile ca.ext -days 1095
        openssl genrsa -out intermediate.key 2048
        openssl req -new -key intermediate.key -out intermediate.csr -config intermediate_req.config
        openssl ca -in intermediate.csr -out intermediate.pem -config root.config -extfile ca.ext -days 730
        openssl genrsa -out leaf.key 2048
        openssl req -new -key leaf.key -out leaf.csr -config leaf_req.config
        openssl ca -in leaf.csr -out leaf.pem -config intermediate.config -days 365 -batch
        openssl genrsa -out leaf2.key 2048
        openssl req -new -key leaf2.key -out leaf2.csr -config leaf_req.config
        openssl ca -in leaf2.csr -out leaf2.pem -config intermediate.config -days 365 -batch
        </codeblock>
        <p>The files produced by this sequence that are required for authentication are:</p>
        <dl>
        <dlentry><dt>root.pem</dt><dd>the root certificate</dd></dlentry>
        <dlentry><dt>Intermediate.pem</dt><dd>the intermediate certificate</dd></dlentry>
        <dlentry><dt>leaf.key</dt><dd>the key that will be used on the first instance</dd></dlentry>
        <dlentry><dt>leaf.pem</dt><dd>the certificate that will be used on the first instance</dd></dlentry>
        <dlentry><dt>leaf2.key</dt><dd>the key that will be used on the second instance</dd></dlentry>
        <dlentry><dt>leaf2.pem</dt><dd>the certificate that will be used on the second instance</dd></dlentry>
        </dl>
        <p>(All files will be in pem format)</p>
        <p>For High Availability Pairing The leaf files need to be placed in the keystore of the
        corresponding instance and renamed to HA_key.pem and HA_cert.pem. For Clustering the leaf files need to be placed in the 
        keystore of the corresponding instance and renamed to Cluster_key.pem and Cluster_cert.pem. To provide the 
        Certificate Authorities a CAFile must be constructed from the root certificate and intermediate certificate and 
        placed in the truststore in a file called HA_cafile.pem or Cluster_cafile.pem this can be done via:</p>
        <codeblock>
        cat root.pem > HA_cafile.pem
        cat intermediate.pem >> HA_cafile.pem
        </codeblock>
        <p>When an instance’s certificate expires a new key and certificate can be created (using the intermediate credentials) 
        and uploaded to the instance and once that instance has been restarted the instance will be authenticated without 
        having to change the other instances.</p>
        
        <p>If using High Availability Pairing and Clustering then it is possible to use file links to have the same credentials
        used for both systems eg:</p>
        <codeblock>
        ln /var/messagesight/data/certificates/keystore/HA_cert.pem     /var/messagesight/data/certificates/keystore/Cluster_cert.pem
        ln /var/messagesight/data/certificates/keystore/HA_key.pem      /var/messagesight/data/certificates/keystore/Cluster_key.pem
        ln /var/messagesight/data/certificates/truststore/HA_cafile.pem /var/messagesight/data/certificates/truststore/Cluster_cert.pem
        </codeblock>
        <p><b>Certification Revocation List</b></p>
        <p>If a certificate has become compromised prior to its expiration date then it can be added to a Certification 
        Revocation List (CRL). The product supports a single consolidated CRL file in pem format for each connection.</p>
        
        <p>The CRL file for High Availability pairing must be:</p>
        <filepath>{truststore-directory}/HA_crl/crl.pem</filepath>
        <p>The CRL file for Clustering must be:</p>
        <filepath>{truststore-directory}/Cluster_crl/crl.pem</filepath>
    </section>
    </body>
</topic>
