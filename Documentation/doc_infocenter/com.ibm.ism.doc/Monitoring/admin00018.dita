<?xml version="1.0" encoding="UTF-8"?>
<!--Arbortext, Inc., 1988-2011, v.4002-->
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN"
 "task.dtd">
<?Pub Sty _display FontColor="red"?>
<?Pub Inc?>
<task id="admin00018" xml:lang="en-us">
<title>Viewing topic monitoring statistics by using <ph
   conref="../TextEntities.dita#TextEntities/RESTMonAPIs"/></title>
<shortdesc>System administrators can view topic-related statistics by using a <ph
         conref="../TextEntities.dita#TextEntities/RESTMonAPI"/>. </shortdesc>
<taskbody>
<prereq><p>The system administrator can reset the topic monitor data
to zero either by stopping and restarting the <ph
conref="../TextEntities.dita#TextEntities/ISMappliance"></ph> server,
or by deleting and re-creating a specific topic string. </p><p>If
the <ph conref="../TextEntities.dita#TextEntities/ISMappliance"></ph> server
is restarted, then all monitored topic data is set to zero. </p><p>For
more information about restarting the <ph
conref="../TextEntities.dita#TextEntities/ISMappliance"></ph> server,
see <xref format="dita" href="../Administering/ad00280_.dita"
scope="local" type="concept">Starting and stopping the server</xref>.</p><p>If
you want to set individual topic data to zero, then you must delete
and re-create individual topic strings. </p><p>For more information about deleting and re-creating a topic string by using a <ph
          conref="../TextEntities.dita#TextEntities/RESTMonAPI"/>, see step 1 in
        the following task information. </p></prereq>
<context><p>System administrators can view topic-related statistics by using a <ph
               conref="../TextEntities.dita#TextEntities/RESTMonAPI"/>, by using
            the <ph conref="../TextEntities.dita#TextEntities/ISMgui"/>, or by using an external
            monitoring application. For more information about using the <ph
               conref="../TextEntities.dita#TextEntities/ISMgui"/> to view topic-related statistics,
            see <xref format="dita" href="admin00017.dita" scope="local" type="task">Viewing
               topic-related statistics by using the GUI</xref>. For more information about using an
            external application to view topic-related statistics, see <xref format="dita"
               href="admin00041.dita" scope="local" type="task">Viewing topic-related statistics by
               using an external application</xref>.</p></context>
<steps>
<step><cmd>You must create a set of topics to monitor. </cmd>
<choices>
<choice>To view the topics that you are monitoring, use the <ph
              conref="../TextEntities.dita#TextEntities/ISMappliance"/> REST API GET method with the
            following <ph conref="../TextEntities.dita#TextEntities/ISMappliance"/> URI:
            <codeblock>http://&lt;admin-endpoint-IP:Port>/ima/v1/configuration/TopicMonitor</codeblock></choice>
<choice>To add a topic string to the list of topics that you want to monitor, use the <ph
              conref="../TextEntities.dita#TextEntities/ISMappliance"/> REST API POST method with
            the following <ph conref="../TextEntities.dita#TextEntities/ISMappliance"/> URI:
              <codeblock>http://&lt;admin-endpoint-IP:Port>/ima/v1/configuration/ </codeblock><p>and provide TopicMonitor object configuration data in the payload of the POST method by using the
              following schema. <parmname>Content-type</parmname> is set to application/json:
              <codeblock>{"TopicMonitor":["TopicString/#"]}       </codeblock></p><p>where:</p><ul>
              <li>
                <dl>
                  <dlentry>
                    <dt>TopicString</dt>
                    <dd>Specifies the name of the topic string that you want to add.</dd>
                    <dd>The string must end with a multi-level wildcard (#), must contain no other
                      wildcards, and must not start with $SYS. For example,
                        <userinput>EXAMPLE/L2/#</userinput>. You can specify only the multi-level
                      wildcard (#) to monitor all topics. To monitor a single topic, that topic must
                      have no child topics. For example,
                        <userinput>/animals/dogs/labradors/#</userinput> monitors only the topic
                        <userinput>/animals/dogs/labradors</userinput> if
                        <userinput>labradors</userinput> has no child topics.</dd>
                  </dlentry>
                </dl>
              </li>
            </ul></choice>
<choice>To remove a topic string from the list of topics that you are monitoring, use the <ph
              conref="../TextEntities.dita#TextEntities/ISMappliance"/> REST API DELETE method with
            the following <ph conref="../TextEntities.dita#TextEntities/ISMappliance"/> URI:
            <codeblock>http://&lt;admin-endpoint-IP:Port>/ima/v1/configuration/TopicMonitor/TopicString</codeblock></choice>
</choices>
        <info>
          <p>where</p>
          <ul>
            <li>
              <dl>
                <dlentry>
                  <dt>TopicString</dt>
                  <dd>Specifies the name of the topic string that you want to remove. </dd>
                </dlentry>
              </dl>
            </li>
          </ul>
        </info>
</step>
<step>
        <cmd>Use the <ph conref="../TextEntities.dita#TextEntities/ISM"/> REST
          API GET method with the following <ph
            conref="../TextEntities.dita#TextEntities/ISM"/> monitoring
          URI:</cmd>
        <info>
          <p><codeph>http://&lt;admin-endpoint-IP:Port>/ima/v1/monitor/Topic</codeph></p>
        </info>
      </step>
      <step>
        <cmd>Provide query parameters requesting the statistics that you want returned in the JSON
          payload. The following example uses cURL to create topic-related statistics:</cmd>
        <info>
          <p>
            <codeblock>curl -X GET http://127.0.0.1:9089/ima/v1/monitor/Topic?TopicString=<varname>TopicString</varname>%26ResultCount=<varname>ResultCount</varname>%26Monitoring-DataType=<varname>Monitoring-DataType</varname></codeblock>
          </p>
          <p>where:</p>
          <ul>
            <li>
              <dl>
                <dlentry>
                  <dt>TopicString</dt>
                  <dd>Optional.</dd>
                  <dd><parmname>TopicString</parmname> is a filter, which you can use to match
                    specific topic strings. <parmname>TopicString</parmname> can contain wildcards
                    (*) to match 0 or more characters. The default value is
                    <parmname>*</parmname>.</dd>
                </dlentry>
              </dl>
            </li>
            <li>
              <dl>
                <dlentry>
                  <dt>ResultCount</dt>
                  <dd>Optional.</dd>
                  <dd>Specifies the maximum number of results to return. Options available for
                    selection are 10, 25, 50, and 100. The default value is 25. If the number of
                    topics that are being monitored is less than the <parmname>Count</parmname>
                    specified, then only those topics that are being monitored are returned.</dd>
                  <dd>Specifies the number of results to display. </dd>
                </dlentry>
              </dl>
            </li>
            <li>
              <dl>
                <dlentry>
                  <dt>Monitoring-DataType</dt>
                  <dd>Optional.</dd>
                  <dd>Specifies the type of data to order the results by.</dd>
                  <dd>This value can be one of the following values:<ul>
                      <li>
                        <dl>
                          <dlentry>
                            <dt> PublishedMsgsHighest</dt>
                            <dd>Topics with the most publications. </dd>
                          </dlentry>
                        </dl>
                      </li>
                      <li>
                        <dl>
                          <dlentry>
                            <dt>PublishedMsgsLowest</dt>
                            <dd>Topics with the least publications. </dd>
                          </dlentry>
                        </dl>
                      </li>
                      <li>
                        <dl>
                          <dlentry>
                            <dt>SubscriptionsHighest</dt>
                            <dd>Topics with the most subscribers.</dd>
                          </dlentry>
                        </dl>
                      </li>
                      <li>
                        <dl>
                          <dlentry>
                            <dt>SubscriptionsLowest</dt>
                            <dd>Topics with the least subscribers.</dd>
                          </dlentry>
                        </dl>
                      </li>
                      <li>
                        <dl>
                          <dlentry>
                            <dt>RejectedMsgsHighest</dt>
                            <dd>Topics with the most rejected messages.</dd>
                          </dlentry>
                        </dl>
                      </li>
                      <li>
                        <dl>
                          <dlentry>
                            <dt>RejectedMsgsLowest</dt>
                            <dd>Topics with the least rejected messages.</dd>
                          </dlentry>
                        </dl>
                      </li>
                      <li>
                        <dl>
                          <dlentry>
                            <dt>FailedPublishesHighest</dt>
                            <dd>Topics with the most rejected publishes.</dd>
                          </dlentry>
                        </dl>
                      </li>
                      <li>
                        <dl>
                          <dlentry>
                            <dt>FailedPublishesLowest</dt>
                            <dd>Topics with the least rejected publishes.</dd>
                          </dlentry>
                        </dl>
                      </li>
<li>
<dl>
<dlentry>
<dt> AllUnsorted</dt>
<dd>Lists all topics. </dd>
<dd>Any value that is specified for <parmname>ResultCount</parmname> is ignored, so setting
<parmname>StatType</parmname>  to <userinput>AllUnsorted</userinput> can result in a large number of
responses being generated.</dd>
</dlentry>
</dl>
</li>
                    </ul></dd>
                  <dd>The default value is <varname>PublishedMsgsHighest</varname>.</dd>
                </dlentry>
              </dl>
            </li>
          </ul>
        </info>
      </step>
</steps>
    <result>
      <p>The following fields are returned:  <ul>
          <li>
            <dl id="TopicStringStringTheTopicThatIsBein">
              <dlentry>
                <dt>TopicString</dt>
                <dd>String</dd>
                <dd>The topic that is being monitored. The topic string always contains a
                  wildcard.</dd>
              </dlentry>
            </dl>
          </li>
          <li>
            <dl id="SubscriptionsNumericTheNumberOfActi">
              <dlentry>
                <dt>Subscriptions</dt>
                <dd>Numeric</dd>
                <dd>The number of active subscriptions on the topics that are monitored. The figure
                  shows all active subscriptions that match the wildcarded topic string.</dd>
              </dlentry>
            </dl>
          </li>
          <li>
            <dl id="ResetTimeDateTimeTheTimeAtWhichTheS">
              <dlentry>
                <dt>ResetTime</dt>
                <dd>String</dd>
                <dd>The time at which the statistics for the topic were reset. The
                    <parmname>ResetTime</parmname> is usually the time when the topic monitor is
                  created.</dd>
              </dlentry>
            </dl>
          </li>
          <li>
            <dl id="PublishedMsgsNumericTheNumberOfMess">
              <dlentry>
                <dt>PublishedMsgs</dt>
                <dd>Numeric</dd>
                <dd>The number of messages that are successfully published to a topic that matches
                  the wildcarded topic string.</dd>
              </dlentry>
            </dl>
          </li>
          <li>
            <dl id="RejectedMsgsNumericTheNumberOfMessa">
              <dlentry>
                <dt>RejectedMsgs</dt>
                <dd>Numeric</dd>
                <dd>The number of messages that are rejected by one or more subscriptions where the
                  quality of service level did not cause the publish request to fail.</dd>
              </dlentry>
            </dl>
          </li>
          <li>
            <dl id="FailedPublishesNumericTheNumberOfPu">
              <dlentry>
                <dt>FailedPublishes</dt>
                <dd>Numeric</dd>
                <dd>The number of publish requests that failed because the message is rejected by
                  one or more subscriptions.</dd>
              </dlentry>
            </dl>
          </li>
        </ul></p>
    </result>
<example>
      <p>The following example uses cURL to create a topic monitor. This example shows you how to
        create two topic monitors in a single request: </p>
      <codeblock>
curl -X POST \
   -H "Content-Type: application/json" \
   -d ' {
          "TopicMonitor": ["/p1/#","/p2/#"]
        }
      ' \
http://127.0.0.1:9089/ima/v1/configuration</codeblock>
      <p>The following example shows a successful example response to the GET method that was used
        to create two topic monitors in a single request: </p>
      <codeblock>{ "Version":"v1","Code":"CWLNA6011","Message":"The requested configuration change has completed successfully." }
</codeblock>
      <p>The following example uses cURL to show how a GET method is used to create statistics about
        topics with the highest number of published messages:</p>
      <codeblock> curl -X GET http://127.0.0.1:9089/ima/v1/monitor/Topic?TopicString=*%26Monitoring-DataType=PublishedMsgsHighest
  </codeblock>
      <p>The following example shows a successful example response to the GET method that was used
        to create statistics about topics with the highest number of published messages::</p>
      <codeblock>{ "Version":"v1", "Topic": [ { "TopicString":"ROOT/#","Subscriptions":5,"ResetTime":"0","PublishedMsgs":50,
"RejectedMsgs":4,"FailedPublishes":2,"ResultCount":10 } ] }
</codeblock>
      <?Pub Caret 295?>
    </example>
</taskbody>
</task>
<?Pub *0000010426?>
