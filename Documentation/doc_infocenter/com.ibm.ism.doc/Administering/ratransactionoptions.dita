<?xml version="1.0" encoding="UTF-8"?>
<!--Arbortext, Inc., 1988-2011, v.4002-->
<!DOCTYPE concept PUBLIC  "-//OASIS//DTD DITA Concept//EN"
 "concept.dtd">
<?Pub Sty _display FontColor="red"?>
<?Pub Inc?>
<concept id="RAtransactionoptions" xml:lang="en-us">
<title>Configuring transactions in the <ph
conref="../TextEntities.dita#TextEntities/ISM"></ph> resource adapter</title><?Pub
Caret -2?>
<shortdesc>You can use the following information to understand transaction
options for Enterprise <tm tmtype="tm" trademark="JavaBeans">JavaBeans</tm> (EJBs),
message handling options in <ph
conref="../TextEntities.dita#TextEntities/ISM"></ph> for message driven
beans (MDBs), and <ph conref="../TextEntities.dita#TextEntities/ISM"></ph> transaction
options for J2C connection factories.</shortdesc>
<conbody>
<section><title>Transaction options for EJBs</title><p>In an EJB application,
there are two basic options for transaction management.  <ul>
<li><dl><dlentry>
<dt>Bean managed transactions</dt>
<dd>In bean managed transactions, the bean method creates transactions
with the <codeph>UserTransaction</codeph> interface. The transactions
are created when they are needed.</dd>
</dlentry></dl></li>
<li><dl><dlentry>
<dt>Container managed transactions</dt>
<dd>In container managed transactions, the EJB container provides
the transaction context for the bean. This type of transaction is
the default option.</dd>
<dd>Container managed transactions can be configured with one of the
following transaction attributes: </dd>
<dd><dl><dlentry>
<dt>Required</dt>
<dd>Directs the container to start the bean method within a transaction
context. If a client calls a bean method from within a transaction
context, the container calls the bean method within the client transaction
context. If a client calls a bean method outside a transaction context,
the container creates a new transaction context and calls the bean
method from within that context. The transaction context is passed
to any enterprise bean objects or resources that are used by this
bean method.</dd>
</dlentry><dlentry>
<dt>RequiresNew</dt>
<dd>Directs the container to always start the bean method within a
new transaction context, regardless of whether the client calls the
method within or outside a transaction context. The transaction context
is passed to any enterprise bean objects or resources that are used
by this bean method.</dd>
</dlentry><dlentry>
<dt>Mandatory</dt>
<dd>Directs the container to always start the bean method within the
transaction context that is associated with the client. If the client
attempts to start the bean method without a transaction context, the
container generates an exception to the client. The transaction context
is passed to any EJB object or resource that is accessed by an enterprise
bean method. EJB clients that access these entity beans must do so
within an existing transaction. For other enterprise beans, the enterprise
bean or bean method must implement the bean managed value or use the <codeph>Required</codeph> or <codeph>RequiresNew</codeph> value.
For non-enterprise bean clients, the client must start a transaction
by using the <codeph>UserTransaction</codeph> interface.</dd>
</dlentry><dlentry>
<dt>Supports</dt>
<dd>Directs the container to start the bean method within a transaction
context if the client calls the bean method within a transaction.
If the client calls the bean method without a transaction context,
the container calls the bean method without a transaction context.
The transaction context is passed to any enterprise bean objects or
resources that are used by this bean method.</dd>
</dlentry><dlentry>
<dt>NotSupported</dt>
<dd>Directs the container to start bean methods without a transaction
context. If a client calls a bean method from within a transaction
context, the container suspends the association between the transaction
and the current thread before starting the method on the enterprise
bean instance. The container then resumes the suspended association
when the method invocation returns. The suspended transaction context
is not passed to any enterprise bean objects or resources that are
used by this bean method.</dd>
</dlentry><dlentry>
<dt>Never</dt>
<dd>Directs the container to start bean methods without a transaction
context. If the client calls a bean method from within a transaction
context, the container generates an exception. If the client calls
a bean method from outside a transaction context, the container behaves
in the same way as if the <codeph>NotSupported</codeph> transaction
attribute was set. The client must call the method without a transaction
context.</dd>
</dlentry></dl></dd>
</dlentry></dl></li>
</ul></p><p>For more information about EJB configuration and transaction
management, see the Oracle <tm tmtype="tm" trademark="Java">Java</tm> EE
tutorial sections for container or bean managed transactions in the
product documentation on the Oracle website. </p></section>
<section><title><ph conref="../TextEntities.dita#TextEntities/ISM"></ph> message
handling options for MDBs</title><p>You can configure an MDB to run
outside a container transaction scope by specifying either bean managed
transactions or container managed transactions with the transaction
attribute set to <parmname>NotSupported</parmname>. The EJB container
automatically acknowledges the messages that are processed by the <codeph>onMessage()</codeph> method,
even if the <codeph>onMessage()</codeph> method fails unexpectedly.
The mode for acknowledging received messages depends upon the configuration
setting for the <parmname>acknowledgeMode</parmname> property in the
J2C activation specification. </p><p>When unexpected failures are
due to transient system issues, messages can be lost. To prevent this
type of message loss, you can set the <parmname>enableRollback</parmname> property
to <codeph>true</codeph> for the J2C activation specifications in
the <ph conref="../TextEntities.dita#TextEntities/ISM"></ph> resource
adapter. By default, <parmname>enableRollback</parmname> is set to <codeph>false</codeph> so
all messages are automatically acknowledged.  When <parmname>enableRollback</parmname> is
set to <codeph>true</codeph>, a message is rolled back to the topic
or queue when the <codeph>onMessage()</codeph> method fails. This
rollback allows the message to be redelivered and reprocessed.</p><p>Setting <parmname>enableRollback</parmname> to <codeph>true</codeph> is
useful for redelivery of messages when transient issues cause the <codeph>onMessage()</codeph> method
to fail. However, setting <parmname>enableRollback</parmname> to <codeph>true</codeph> can
trigger the redelivery of poison messages. A poison message is a message
that a receiving application cannot process. To avoid redelivery of
poison messages when you set <parmname>enableRollback</parmname> to <codeph>true</codeph>,
you must ensure that you can handle poison messages in your JMS application.
 For more information about handling poison messages, see <xref
format="dita" href="../Developing/devjms_poisonmessages.dita"
scope="peer" type="concept">Poison messages</xref>.</p></section>
<section><title><ph conref="../TextEntities.dita#TextEntities/ISM"></ph> transaction
options for J2C connection factories</title><p>J2C connection factories
can be used in various types of <tm tmtype="tm" trademark="Java">Java</tm> Platform,
Enterprise Edition (<tm tmtype="tm" trademark="Java">Java</tm> EE)
applications.  </p><p>The transaction scope of a <tm tmtype="tm"
trademark="Java">Java</tm> EE application depends on the containers
that it uses as well as the configuration of the components that it
uses.  An application server typically coordinates these activities
by using global transactions. However, if you want to force the transaction
scope, you can do so by setting the <parmname>transactionSupportLevel</parmname> property
in the <ph conref="../TextEntities.dita#TextEntities/ISM"></ph> resource
adapter for connection objects that use <ph
conref="../TextEntities.dita#TextEntities/ISM"></ph> J2C connection
factories. Changing the default setting for <parmname>transactionSupportLevel</parmname> must
be done only by someone with expert knowledge about the application.
You can set the <parmname>transactionSupportLevel</parmname> to one
of the following values:</p><ul>
<li><dl><dlentry>
<dt>XATransaction</dt>
<dd>This setting enables the connection factory object to support
global or local transactions. The application server sets the appropriate
scope. <codeph>XATransaction</codeph> is the default setting.</dd>
</dlentry></dl></li>
<li><dl><dlentry>
<dt>LocalTransaction</dt>
<dd>If only one resource manager is required for the application, <parmname>transactionSupportLevel</parmname> can
be set to <codeph>LocalTransaction</codeph>. This setting ensures
that only local transaction context is used by connections that are
configured by this connection factory. </dd>
</dlentry></dl></li>
<li><dl><dlentry>
<dt>NoTransaction</dt>
<dd>If no transactions are required for the application, <parmname>transactionSupportLevel</parmname> can
be set to <codeph>NoTransaction</codeph>.  This setting turns off
transaction processing for connections that are using the connection
factory. </dd>
</dlentry></dl></li>
</ul><p> </p><p>These options can be useful in optimizing connection
throughput but must be used with caution.  For example, serious application
failures can occur if the <parmname>transactionSupportLevel</parmname> setting
for a J2C connection factory conflicts with the transaction configuration
of an EJB that uses the connection factory to create a connection.</p></section>
</conbody>
<?tm 1413224007 5?>
</concept>
<?Pub *0000009739?>
