<?xml version="1.0" encoding="UTF-8"?>
<!--Arbortext, Inc., 1988-2011, v.4002-->
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN"
 "task.dtd">
<?Pub Sty _display FontColor="red"?>
<?Pub Inc?>
<task id="ad00451_" xml:lang="en-us">
  <title>Creating and updating a topic policy by using <ph
    conref="../TextEntities.dita#TextEntities/RESTAPIs"/></title>
  <shortdesc>System administrators can create and update topic policies by using <ph
    conref="../TextEntities.dita#TextEntities/RESTAPIs"/>.</shortdesc>
  <taskbody>
    <prereq>Ensure that the following message hub creation tasks are complete:<ol>
        <li><xref href="ad00323_.dita">Create a message hub</xref>.</li>
        <li><xref href="ad00327_.dita">Create a connection policy</xref>.</li>
      </ol></prereq>
    <context><p>You can create a topic policy or update an existing topic policy by using a <ph
      conref="../TextEntities.dita#TextEntities/RESTAPI"/>, or by using the <ph
      conref="../TextEntities.dita#TextEntities/ISMgui"/>. For more information about using the <ph
      conref="../TextEntities.dita#TextEntities/ISMgui"/> to create a topic policy, see <xref
      href="ad00361_.dita"
      />. Use a topic policy to control which clients can publish or subscribe to a specified topic.</p><p>You can use the <ph
      conref="../TextEntities.dita#TextEntities/ISMappliance"
      /> REST API POST method to create or update one or more topic policy objects. If the topic policy that is specified in the request does not exist in the <ph
      conref="../TextEntities.dita#TextEntities/ISMappliance"
      /> configuration, then the topic policy is created. Otherwise the topic policy configuration is updated.</p>For more information about the components you must specify to create a topic policy, including naming restrictions, see <xref
      href="ad00360_.dita"/>.</context>
    <steps>
      <step>
        <cmd>To create or update a topic policy, use the <ph
          conref="../TextEntities.dita#TextEntities/ISM"
          /> REST API POST method with the following <ph
          conref="../TextEntities.dita#TextEntities/ISM"/> configuration URI:</cmd>
        <info>
          <p><codeph>http://&lt;admin-endpoint-IP:Port>/ima/v1/configuration/</codeph></p>
        </info>
      </step>
      <step>
        <cmd>Provide TopicPolicy object configuration data in the payload of the POST method by using the following schema. <parmname>Content-type</parmname> is set to <userinput>application/json</userinput>.  Ensure that capitalization and double quotation marks are used as shown. </cmd>
        <info><codeblock>
{    
   "TopicPolicy": {
     "&lt;NameOfTopicPolicy>": {
       "Description": "string",
       "Topic": "string",
       "ActionList": "string",
       "MaxMessages": integer,
       "MaxMessagesBehavior": "RejectNewMessages"|"DiscardOldMessages",
       "MaxMessageTimeToLive": "string",
       "DisconnectedClientNotification": true|false,
       "ClientID": "string",
       "UserID": "string",
       "GroupID": "string",
       "CommonNames": "string",
       "ClientAddress": "string",
       "Protocol": "string"             
    }
  }
}</codeblock>Where:<dl>
          <dlentry>
            <dt><varname>NameOfTopicPolicy</varname></dt>
            <dd>Required.</dd>
            <dd>Specifies the name of the topic policy.</dd>
            <dd>The name must not have leading or trailing spaces and cannot contain control characters, commas, double quotation marks, backslashes, or equal signs. The first character must not be a number or any of the following special characters: <p><codeph>! # $ % &amp; ' ( ) * + - . / : ; &lt; > ? @</codeph></p> </dd>
            <dd>After the topic policy is created, you cannot change this name.</dd>
          </dlentry>
          <dlentry>
            <dt>Description</dt>
            <dd>Optional.</dd>
            <dd>Specifies a description for the topic policy.</dd>
            <dd>If you do not want a description, omit <codeph>"Description":"<i>description</i>"</codeph>.</dd>
          </dlentry>
          <dlentry>
            <dt>Topic</dt>
            <dd>Required.</dd>
            <dd>Specifies the topic string or strings that the topic policy applies to.</dd>
            <dd>You can use an asterisk (*) as a wildcard. For example, to apply the topic policy to topic strings <codeph>TOPICA/#</codeph>, enter a topic of <codeph>TOPICA/*</codeph>. You must take care when you use a wildcard to ensure that you do not grant greater authority to topics than intended. For more information about how wildcard characters can be used, see <xref
              format="dita" href="../Overview/ov00032.dita" scope="peer" type="section"
              >Wildcards</xref>.</dd>
            <dd>The dollar sign ($) and asterisk (*) have special meanings in the Topic field. To use these characters as literals, use <codeph>${$}</codeph> for a dollar sign, and use <codeph>${*}</codeph> for an asterisk.</dd>
            <dd>
              <p>You can use variable substitution in the topic string to ensure that only clients with specific user IDs, group IDs, client IDs, or client certificate common names can access a topic. The variables are:<ul>
                <li><codeph>${UserID}</codeph> for the user ID. </li>
                <li><codeph>${GroupID}</codeph> for the group ID.</li>
                <li><codeph>${ClientID}</codeph> for the client ID. </li>
                <li><codeph>${CommonName}</codeph> for the client certificate common name. </li>
                </ul></p>
            </dd>
            <dd>For example, if a topic string in a topic policy is <codeph>ExampleTopic/TopicA/${ClientID}</codeph>, a client with an ID of <codeph>client_a</codeph> can access topic <codeph>ExampleTopic/TopicA/client_a</codeph>. A client with an ID of <codeph>client_b</codeph> cannot access topic <codeph>ExampleTopic/TopicA/client_a</codeph>, but can access <codeph>ExampleTopic/TopicA/client_b</codeph>.</dd>
          </dlentry>
          <dlentry>
            <dt>ActionList</dt>
            <dd>Required.</dd>
            <dd>Specifies which messaging actions can be used by clients that connect to endpoints associated with this topic policy.</dd>
            <dd>You can specify the following values for a topic policy. To specify more than one, separate each value with a comma:<ul>
              <li><b><codeph>Publish</codeph></b><p>Allows clients to publish to the topic that is specified in the topic policy.</p></li>
              <li><b><codeph>Subscribe</codeph></b><p>Allows clients to subscribe to the topic that is specified in the topic policy.</p></li>
              </ul></dd>
          </dlentry>
          <dlentry>
            <dt>MaxMessages</dt>
            <dd>Optional.</dd>
            <dd>Specifies the maximum number of messages that are kept for a subscription. This value is a guideline, rather than an absolute limit. If the system is running under stress, then the number of buffered messages on a subscription might be slightly higher than the MaxMessages value.</dd>
            <dd>The default value is 5000.</dd>
          </dlentry>
          <dlentry>
            <dt>MaxMessagesBehavior</dt>
            <dd>Optional.</dd>
            <dd>Specifies the behavior that is applied when the number of messages in the buffer for a subscription reaches the max messages value. That is, when the buffer for a subscription is full. The behavior is applied to both durable and non-durable subscriptions.</dd>
            <dd>The behavior can be one of the following options:<ul>
              <li><b>RejectNewMessages</b><p>New messages are not accepted on the buffer for the subscription.</p></li>
              <li><b>DiscardOldMessages</b><p>A percentage of the old messages on the buffer for the subscription are discarded. If a retained message is one of the old messages, it is discarded. The quality of service, persistence, and priority of the message does not prevent a message from being discarded. Therefore, if all messages must be received in order for your applications to function correctly, you cannot set MaxMessagesBehavior to <codeph>DiscardOldMessages</codeph>.</p></li>
              </ul></dd>
            <dd>The default behavior is <codeph>RejectNewMessages</codeph>.</dd>
          </dlentry>
          <dlentry>
            <dt>MaxMessageTimeToLive</dt>
            <dd>Optional.</dd>
            <dd>Specifies the maximum time, in seconds, that a published message that is associated with the topic policy can exist for in <ph
              conref="../TextEntities.dita#TextEntities/ISM"/>.</dd>
            <dd>The value must be either <codeph>unlimited</codeph> or in the range 1-2147483647.</dd>
            <dd>The default value is <codeph>unlimited</codeph> and means that messages will not expire unless the publishing application specifies a time for messages to exist for.</dd>
            <dd>This value is applied only when the topic policy includes an action of publish.</dd>
            <dd>Ensure that client and server times are synchronized in order to minimize the possibility of expired messages being received. </dd>
          </dlentry>
          <dlentry>
            <dt>DisconnectedClientNotification: true|false</dt>
            <dd>Optional.</dd>
            <dd>Specifies whether notification messages are published for disconnected MQTT clients on arrival of a message.</dd>
            <dd>The default value is <codeph>false</codeph>.</dd>
            <dd>This value is applied only when the MQTT protocol is used.</dd>
            <dd>The notification messages are published to the reserved system topic <codeph>$SYS/DisconnectedClientNotification</codeph></dd>
          </dlentry>
          </dl><p>You must specify at least one of the following filters:<dl>
          <dlentry>
            <dt>ClientID</dt>
            <dd>Specifies the client ID that is allowed to use the messaging actions that are specified in the topic policy. The client ID is allowed to use the messaging actions only on the topics that are specified in the policy.</dd>
            <dd>You can use an asterisk (*) at the end of the value to match 0 or more characters.</dd>
            <dd>To use the default value, where all client ID values are allowed to use the actions, omit <codeph>"ClientID":"<varname>ClientID</varname>"</codeph>.</dd>
          </dlentry>
          <dlentry>
            <dt>UserID</dt>
            <dd>Specifies the messaging user ID that is allowed to use the messaging actions that are specified in the topic policy. The messaging user ID is allowed to use the messaging actions only on the topics that are specified in the policy.</dd>
            <dd>You can use an asterisk (*) at the end of the value to match 0 or more characters.</dd>
            <dd>To use the default value, where all user ID values are allowed to use the actions, omit <codeph>"UserID": "<varname>UserID</varname>"</codeph>.</dd>
          </dlentry>
          <dlentry>
            <dt>GroupID</dt>
            <dd>Specifies the messaging group that is allowed to use the messaging actions that are specified in the topic policy. The messaging group is allowed to use the messaging actions only on the topics that are specified in the policy.</dd>
            <dd>You can use an asterisk (*) at the end of the value to match 0 or more characters.</dd>
            <dd>To use the default value, where all groups are allowed to use the actions, omit <codeph>"GroupID": "<varname>GroupID</varname>"</codeph>.</dd>
          </dlentry>
          <dlentry>
            <dt>CommonNames</dt>
            <dd>Specifies the client certificate common name that must be used for a client to be allowed to use the actions that are specified in the topic policy. The client certificate common name allows clients to use the messaging actions only on the topics that are specified in the policy.</dd>
            <dd>You can use an asterisk (*) at the end of the value to match 0 or more characters.</dd>
            <dd>To use the default value, where all client certificates are allowed to use the actions, omit <codeph>"CommonNames": "<varname>CommonNames</varname>"</codeph>.</dd>
          </dlentry>
          <dlentry>
            <dt>ClientAddress</dt>
            <dd>Specifies the client IP addresses that are allowed to use the messaging actions that are specified in the topic policy. The client IP addresses are allowed to use the messaging actions only on the topics that are specified in the policy.</dd>
            <dd>The IP address can contain an asterisk (*), or a comma-separated list of IPv4 or IPv6 addresses or ranges. For example, 192.0.2.32, 192.0.0.0, 192.0.2.0-192.0.2.100. The range must be specified from low to high.</dd>
            <dd>However, each IPv6 address must be enclosed in brackets <codeph>[ ]</codeph> either when expressed singly or in a range of addresses. IPv6 addresses cannot contain asterisks.</dd>
            <dd>The maximum number of client addresses that you can specify is 20.</dd>
            <dd>To use the default value, where all client IP addresses are allowed to connect, omit <codeph>"ClientAddress":"<i>IP_Address</i>"</codeph> or specify <codeph>"ClientAddress":"<i>*</i>"</codeph>.</dd>
          </dlentry>
          <dlentry>
            <dt>Protocol</dt>
            <dd>Specifies which protocols are allowed to use the actions that are specified in the topic policy on the topics that are specified in the policy.</dd>
            <dd>You can choose from JMS and MQTT protocols. If there are any protocol plug-ins installed on the <ph
              conref="../TextEntities.dita#TextEntities/ISM"
              /> server, you can specify these as well. To specify more than one value, separate each value with a comma. To specify all protocols, either specify a null value or omit <codeph>"Protocol": "string".</codeph></dd>
          </dlentry>
          </dl></p><p>You can check that the configuration of your policy is as expected by using the <ph
          conref="../TextEntities.dita#TextEntities/ISM"
          /> REST Administration API GET method. For more information about the GET method, see <xref
          href="ad00366_.dita"/>.</p></info>
      </step>
    </steps>
    <example>
      <p>The following example shows a POST method to create a topic policy called "MyTopicPolicy"
        by using cURL:</p>
      <codeblock>
curl -X POST  \
   -H 'Content-Type: application/json'  \
   -d  '{                          
           "TopicPolicy": {   
               "MyTopicPolicy": {
                "Description": "Topic policy to authorize a client to publish to a topic.",
                "Topic": "*",
                "ClientID": "*",
                "ActionList": "Publish,Subscribe"
              }
          }
      }
 '   \
http://127.0.0.1:9089/ima/v1/configuration/</codeblock>
      <p>The following example shows an example response to the POST method:</p>
      <codeblock>
{        
  "Version": "v1",
  "Code": "CWLNA6011",
  "Message": "The requested configuration change has completed successfully."
}
</codeblock>
    </example>
    <postreq>You must complete the following tasks to finish the message hub configuration:<ol>
        <li><xref href="ad00369_.dita">Create endpoints</xref>.</li>
      </ol></postreq>
  </taskbody>
</task>
<?Pub *0000017481?>
