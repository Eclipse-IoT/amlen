<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "task.dtd">
<task id="ad01291" xml:lang="en-us">
    <title>Changing and viewing log location information by using REST Administration APIs</title>
    <!--To optimize search results, add tags that clarify product name, target platform, or other contexts. To enable the tags, right-click, select Refactoring > Toggle Comment.-->
    <!--<titlealts><navtitle></navtitle><searchtitle></searchtitle></titlealts>-->
    <!--Put your short description next; used for first paragraph and abstract.-->
    <shortdesc>You can send log messages to a file or to a syslog server, and you can view current
        log location information by using <ph conref="../TextEntities.dita#TextEntities/ISM"/>
        <ph conref="../TextEntities.dita#TextEntities/RESTAPIs"/>. </shortdesc>
    <!--To optimize PDF retrievability, add prolog and indexing tags that help crystalize why users should be looking up this topic (purpose, task, and what they will learn)-->
    <!--<prolog><metadata><keywords><indexterm></indexterm></keywords></metadata></prolog>-->
    <taskbody>
        <context>
            <p>If you are sending log messages to a syslog server, then all  logs will share the
                same syslog server IP, port and protocol. The protocol can be tcp or udp. Use a
                different syslog facility to separate messages by component. The LogLocation object
                cannot be deleted by using the REST API DELETE method. To change the log location,
                complete the following steps: </p>
        </context>
        <steps>
            <step>
<cmd>Use the <ph conref="../TextEntities.dita#TextEntities/ISM"/> REST API POST method. </cmd>
<substeps>
<substep>
<cmd>Use the following <ph conref="../TextEntities.dita#TextEntities/ISM"
/> configuration URI: </cmd>
<info>
<p><codeph>http://&lt;admin-endpoint-IP:Port>/ima/v1/configuration/</codeph></p>
</info>
</substep>
<substep>
<cmd>Provide log location configuration data in the payload of the POST method by using the following schema:</cmd>
<info><codeblock> 
"LogLocation" : {     
    "&lt;Log name>" : {      
        "LocationType" : "&lt;type of log location>",      
        "Destination" : "&lt;file name or syslog facility>"    
    }
} 
</codeblock>where <dl>
<dlentry>
<dt>Log name</dt>
<dd>Specifies the type of log that you want to configure. This value can one of the following values:<dl>
<dlentry>
<dt>DefaultLog</dt>
<dd>Specifies server operation log information.</dd>
</dlentry>
</dl><dl>
<dlentry>
<dt>ConnectionLog</dt>
<dd>Specifies connection-related log information.</dd>
</dlentry>
</dl><dl>
<dlentry>
<dt>AdminLog</dt>
<dd>Specifies administration configuration-related log information.</dd>
</dlentry>
</dl><dl>
<dlentry>
<dt>MQConnectivityLog</dt>
<dd>Specifies MQ connectivity-related log information.</dd>
</dlentry>
</dl><dl>
<dlentry>
<dt>SecurityLog</dt>
<dd>Specifies authentication and authorization related log information.</dd>
</dlentry>
</dl> </dd>
</dlentry>
</dl><dl>
<dlentry>
<dt>LocationType</dt>
<dd>Specifies the location that you want to send the log messages to. This value can one of the following values:<dl>
<dlentry>
<dt>file</dt>
<dd>If <parmname>LocationType</parmname> is set to <userinput>file</userinput>, the destination must either specify a valid writeable file name, or specify a reserved name. </dd>
<dd>You can specify reserved names of either <userinput>stdout</userinput> for standard output, or <userinput>stderr</userinput> for standard error.</dd>
</dlentry>
</dl><dl>
<dlentry>
<dt>syslog</dt>
<dd>If <parmname>LocationType</parmname> is set to <userinput>syslog</userinput>, the destination must specify a syslog facility. The syslog facility can be in the range of <userinput>0</userinput> through <userinput>23</userinput>. If a facility is not specified, the destination is assumed to be a file name.</dd>
</dlentry>
</dl></dd>
</dlentry>
</dl><note>
<p>To use Docker logging drivers, including json-file, syslog, and gelf, the log location must be set to <userinput>stdout</userinput>. This setting enables the use of all Docker logging functionality, including log file rotation for a json-file logging driver. For more information about Docker see <xref
href="../Overview/ov60000_.dita"/>.</p>
</note></info>
</substep>
</substeps>
</step>
        </steps>
        <postreq><p>You can view log location information by using the <ph
                    conref="../TextEntities.dita#TextEntities/ISM"/> REST API GET method with the
                following <ph conref="../TextEntities.dita#TextEntities/ISM"/> configuration URI:
                    </p><p><codeph>http://&lt;admin-endpoint-IP:Port>/ima/v1/configuration/LogLocation</codeph></p><p>The
                following example displays log location information by using cURL: </p><codeph>curl
                -X GET http://127.0.0.1:9089/ima/v1/configuration/LogLocation</codeph><p>An example
                response to the GET
            method:</p><codeblock>
{
  "Version": "v1",
  "LogLocation": {
    "DefaultLog": {
      "LocationType": "file",
      "Destination": "/var/messagesight/diag/logs/imaserver-default.log"
    },
    "ConnectionLog": {
      "LocationType": "file",
      "Destination": "/var/messagesight/diag/logs/imaserver-connection.log"
    },
    "AdminLog": {
      "LocationType": "file",
      "Destination": "/var/messagesight/diag/logs/imaserver-admin.log"
    },
    "SecurityLog": {
      "LocationType": "file",
      "Destination": "/var/messagesight/diag/logs/imaserver-security.log"
    },
    "MQConnectivityLog": {
      "LocationType": "file",
      "Destination": "/var/messagesight/diag/logs/imaserver-mqconnectivity.log"
    }
  }
}

</codeblock></postreq>
    </taskbody>
</task>
