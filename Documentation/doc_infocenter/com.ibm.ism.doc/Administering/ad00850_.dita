<?xml version="1.0" encoding="UTF-8"?>
<!--Arbortext, Inc., 1988-2011, v.4002-->
<!DOCTYPE concept PUBLIC  "-//OASIS//DTD DITA Concept//EN"
 "concept.dtd">
<?Pub Sty _display FontColor="red"?>
<?Pub Inc?>
<concept id="ad00850_" xml:lang="en-us">
<title>Configuring disconnected client notifications</title>
<shortdesc>To configure disconnected client notifications, you must
configure <ph conref="../TextEntities.dita#TextEntities/ISM"></ph> and
a notification provider. You can use notification providers such as <ph
conref="../TextEntities.dita#TextEntities/wl"></ph>, or you can create
your own MQTT application to handle the notifications.</shortdesc>
<conbody>
<section><title>Configuring <ph
conref="../TextEntities.dita#TextEntities/ISM"></ph> for disconnected
client notifications</title><p>To configure <ph conref="../TextEntities.dita#TextEntities/ISM"/> for disconnected client
        notifications, you must create a topic policy that sets the
          <codeph>DisconnectedClientNotification</codeph> option to true. Any MQTT application that
        uses <codeph>cleansession=0</codeph>, and subscribes to a topic that is controlled by a
        messaging policy with <codeph>DisconnectedClientNotification=True</codeph>, is then
        monitored for disconnected client notifications.</p><p>For
more information about configuring messaging policies, see <xref
href="../Administering/ad00360_.dita"></xref>.</p></section>
<section><title>Creating an MQTT application to receive disconnected
client notifications</title><p>You can create an MQTT application
to receive disconnected client notifications. The MQTT application
must be configured to do the following things:<ul>
<li>Connect to <ph conref="../TextEntities.dita#TextEntities/ISM"></ph> using <codeph>cleanSession=1</codeph></li><?Pub
Caret 27?>
<li>Subscribe to the reserved system topic: <codeph>$SYS/DisconnectedClientNotification</codeph><note>Applications
are not permitted to create a shared subscription to the disconnected
notification topic.</note></li>
<li>Process the published notifications. The notifications are published
in JSON format, and include the user ID, client ID, and an array of
topic strings and number of waiting messages. The following example
shows a notification message for a client:<codeblock>{ "ClientId":"MyPhone", "UserID":"Tom",
  "MessagesArrived": [
     { "TopicString":"/News/City/Austin", "MessageCount":"3" },
     { "TopicString":"/News/Breaking", "MessageCount":"1" }
  ]
}</codeblock></li>
</ul></p></section>
</conbody>
</concept>
<?Pub *0000002700?>
