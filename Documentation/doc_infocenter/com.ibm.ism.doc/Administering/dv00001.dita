<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "task.dtd">
<task id="dv00001" xml:lang="en-us">
  <title>Creating and updating a protocol plug-in </title>
  <!--To optimize search results, add tags that clarify product name, target platform, or other contexts. To enable the tags, right-click, select Refactoring > Toggle Comment.-->
  <!--<titlealts><navtitle></navtitle><searchtitle></searchtitle></titlealts>-->
  <!--Put your short description next; used for first paragraph and abstract.-->
  <shortdesc>System administrators can import a new or updated protocol plug-in by using the <ph
    conref="../TextEntities.dita#TextEntities/ISM"
    /> REST API PUT method. System administrators can then create the protocol plug-in by using the <ph
    conref="../TextEntities.dita#TextEntities/ISM"/> REST API POST method.</shortdesc>
  <!--To optimize PDF retrievability, add prolog and indexing tags that help crystalize why users should be looking up this topic (purpose, task, and what they will learn)-->
  <!--<prolog><metadata><keywords><indexterm></indexterm></keywords></metadata></prolog>-->
  <taskbody>
    <prereq>To run a protocol plug-in, you must deploy the plug-in in <ph
      conref="../TextEntities.dita#TextEntities/ISM"
      />. The plug-in must be archived in a .zip file. This .zip file must contain the JAR file (or files) that implement the plug-in for the target protocol. The .zip file must also contain a JSON descriptor file that describes the plug-in content. This descriptor file is required in the .zip archive that is used to deploy a protocol plug-in. For more information about developing a protocol plug-in, see <xref
      format="dita" href="../Developing/devplug-in.dita" scope="local"/>.</prereq>
    <steps>
      <step>
        <cmd>Import the plug-in .zip file to <ph conref="../TextEntities.dita#TextEntities/ISM"
          /> by using the <ph conref="../TextEntities.dita#TextEntities/ISM"
          /> REST API PUT method with the following <ph
          conref="../TextEntities.dita#TextEntities/ISM"/> file URI: </cmd>
        <info>
          <p><codeph>http://&lt;admin-endpoint-IP:Port>/ima/v1/file/&lt;filename></codeph></p>
        </info>
      </step>
      <step>
<cmd>To create or update an imported protocol plug-in, use the <ph
conref="../TextEntities.dita#TextEntities/ISM"/> REST API POST method. </cmd>
<substeps>
<substep>
<cmd>Use the following <ph conref="../TextEntities.dita#TextEntities/ISM"/> configuration URI:</cmd>
<info>
<p><codeph>http://&lt;admin-endpoint-IP:Port>/ima/v1/configuration/</codeph></p>
</info>
</substep>
<substep>
<cmd>Provide ProtocolPlugin object configuration data in the payload of the POST method by using the following schema. <parmname>Content-type</parmname> is set to <userinput>application/json</userinput>. Ensure that capitalization and double quotation marks are used as shown. </cmd>
<info><codeblock>
{    
  "Plugin": {
    "&lt;NameOfPlugin>": {
      "File": "string",
      "PropertiesFile": "string",
      "Overwrite": true|false
      }
   }
}</codeblock>Where:<dl>
<dlentry>
<dt><varname>NameOfPlugin</varname></dt>
<dd>Required.</dd>
<dd>Specifies a name for the plug-in.</dd>
<dd>The name must match the value of the <parmname>Name</parmname> parameter in the plug-in configuration file. For information about the plug-in configuration file, see <xref
href="../Developing/devplug-in.dita"/>.</dd>
<dd>The maximum length of the name is 256 characters. </dd>
</dlentry>
<dlentry>
<dt>File</dt>
<dd>Specifies the name of the plug-in .zip file that you uploaded by using the <ph
conref="../TextEntities.dita#TextEntities/ISM"/> REST API PUT method.</dd>
<dd>The maximum length of the plug-in .zip file name is 255 characters. </dd>
</dlentry>
<dlentry>
<dt>PropertiesFile</dt>
<dd>Optional.</dd>
<dd>Specifies the protocol plug-in properties file name that you want to associate with the plug-in. You can develop a properties file in JSON format and the properties that it contains override any properties in the plug-in configuration file.</dd>
<dd>The maximum length of the protocol plug-in properties file name is 255 characters. </dd>
</dlentry>
<dlentry>
<dt>Overwrite: true|false</dt>
<dd>Specifies whether an existing plug-in is overwritten if it has the same name.</dd>
<dd>The default value is false which means that an existing plug-in is not overwritten if it has the same name.</dd>
</dlentry>
</dl></info>
</substep>
</substeps>
</step>
      <step>
        <cmd>Stop and restart the <ph conref="../TextEntities.dita#TextEntities/ISM"
          /> protocol plug-in server process. Use the <ph
          conref="../TextEntities.dita#TextEntities/ISM"
          /> REST API POST method with the following URI: </cmd>
        <info>
          <codeblock>http://&lt;admin-endpoint-IP:Port>/ima/v1/service/restart</codeblock>
          <p>Provide object configuration data in the payload of the POST method by using the following schema. <parmname>Content-type</parmname> is set to <userinput>application/json</userinput>: </p>
          <codeblock>
{    
  "Service": "Plugin"
}</codeblock>
          <p>The installation of the plug-in takes effect only when the <ph
            conref="../TextEntities.dita#TextEntities/ISM"
            /> plug-in server process is restarted. The plug-in can be updated at any time. You must specify <codeph>"Overwrite":true</codeph> to update an existing plug-in. The update is not effective until the plug-in server is restarted. </p>
          <p>The <codeph>Enabled</codeph> status of the protocol plug-in server process is set to <codeph>true</codeph> when you restart the plug-in server process after you install a protocol plug-in.</p>
          <p>You can check that the configuration of your protocol plug-in is as expected by using the <ph
            conref="../TextEntities.dita#TextEntities/ISM"
            /> REST Administration API GET method. For more information about the GET method, see <xref
            href="ad00366_.dita"/>.</p>
        </info>
      </step>
    </steps>
    <example>
      <p>The following example shows the PUT method to import a plug-in zip file <codeph>jsonmsg.zip</codeph> by using cURL:<codeblock>curl -X PUT -T jsonmsg.zip http://10.10.2.149:9089/ima/v1/file/json_msg.zip
</codeblock><?Pub Caret 104?></p>
      <p>The following example shows a POST method to create a protocol plug-in called <codeph>json_msg</codeph> by using cURL:<codeblock>  
curl -X POST \
   -H 'Content-Type: application/json'  \
   -d  '{ 
           "Plugin": {
            "json_msg": {
             "File": "jsonmsg.zip"
            }
         }
       }
 '  \
http://127.0.0.1:9089/ima/v1/configuration/</codeblock> The following shows an example response to the POST method.<codeblock>
{        
  "Version": "v1",
  "Code": "CWLNA6011",
  "Message": "The requested configuration change has completed successfully."
}
</codeblock></p>
    </example>
  </taskbody>
</task>
