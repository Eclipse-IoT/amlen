<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "task.dtd">
<task xml:lang="en-us" id="adwa">
  <title>Creating and updating a queue by using <ph
      conref="../TextEntities.dita#TextEntities/RESTAPIs"/></title>
  <shortdesc>System administrators can create and update queues by using <ph
      conref="../TextEntities.dita#TextEntities/RESTAPIs"/>.</shortdesc>
  <taskbody>
    <context>
      <p>You can create and update a queue by using <ph
          conref="../TextEntities.dita#TextEntities/RESTAPIs"/>, or by using the <ph
          conref="../TextEntities.dita#TextEntities/ISMgui"/>. For more information about using the
          <ph conref="../TextEntities.dita#TextEntities/ISMgui"/> to create or update a queue, see
          <xref href="ad00351_.dita"/>.</p>
      <p>For more information about the components of a queue, see <xref href="ad00350_.dita"/>.</p>
    </context>
    <steps>
      <step>
        <cmd>To create or update a message queue, use the <ph
          conref="../TextEntities.dita#TextEntities/ISM"
          /> REST API POST method with the following <ph
          conref="../TextEntities.dita#TextEntities/ISM"
          /> configuration URI:</cmd>
        <info>
          <p><codeph>http://&lt;admin-endpoint-IP:Port>/ima/v1/configuration/</codeph></p>
        </info>
      </step>
      <step>
        <cmd>Provide Queue object configuration data in the payload of the POST method by using the following schema. <parmname>Content-type</parmname> is set to <userinput>application/json</userinput>. Ensure that capitalization and double quotation marks are used as shown. </cmd>
        <info><codeblock>
{    
  "Queue": {
    "&lt;NameOfQueue>": {
      "Description": "string",
      "AllowSend": true|false,
      "ConcurrentConsumers": true|false,
      "MaxMessages": integer
     } 
   }
}</codeblock> Where: <dl>
          <dlentry>
            <dt><varname>NameOfQueue</varname></dt>
            <dd>Required.</dd>
            <dd>Specifies a name for the queue.</dd>
            <dd>The name must not have leading or trailing spaces and cannot contain control characters, commas, double quotation marks, backslashes, or equal signs. The first character must not be a number or any of the following special characters:</dd>
            <dd><codeph>! # $ % &amp; ' ( ) * + - . / : ; &lt; > ? @</codeph></dd>
            <dd>The name cannot be the same as another queue.</dd>
          </dlentry>
          <dlentry>
            <dt>Description</dt>
            <dd>Specifies a description of the queue.</dd>
            <dd>If you do not want a description, omit <codeph>"Description":"<i>description</i>"</codeph>.</dd>
          </dlentry>
          <dlentry>
            <dt>AllowSend=true|false</dt>
            <dd>Specifies whether JMS applications can send messages to the queue. It does not stop applications from receiving messages from the queue.</dd>
            <dd>The default value is true.</dd>
          </dlentry>
          <dlentry>
            <dt>ConcurrentConsumers=true|false</dt>
            <dd>Specifies whether multiple consumers are allowed to use the queue at the same time.</dd>
            <dd>The default value is true.</dd>
          </dlentry>
          <dlentry>
            <dt>MaxMessages</dt>
            <dd>Specifies the maximum number of messages that can be put on the queue. This value is a guideline, rather than an absolute limit. If the system is running under stress, then the number of buffered messages on a queue might be slightly higher than the <codeph>MaxMessages</codeph> value.</dd>
            <dd>This value can be any number in the range 1-20000000.</dd>
            <dd>The default value is 5000.</dd>
          </dlentry>
          </dl></info>
      </step>
    </steps>
    <example>The following example demonstrates creating a queue named <codeph>testQ</codeph> by using cURL. The queue uses the default values for <codeph>AllowSend</codeph> and <codeph>ConcurrentConsumers</codeph>, and sets <codeph>MaxMessages</codeph> to 1000:<codeblock>
curl -X POST\
   -H 'Content-Type: application/json' \
   -d '{
     "Queue": {
	"testQ": {
	"MaxMessages": 1000
      }
     }
    }
  ' \
http://127.0.0.1:9089/ima/v1/configuration/</codeblock> The following shows an example response to the POST method. <codeblock>
{        
  "Version": "v1",
  "Code": "CWLNA6011",
  "Message": "The requested configuration change has completed successfully."
}
</codeblock></example>
  </taskbody>
</task>