<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="cmd_create_update_clientcert" xml:lang="en-us">
<title>Create or update a client certificate</title>
<titlealts>
<searchtitle>create or update client certificate</searchtitle>
</titlealts>
<!--To optimize search results, add tags that clarify product name, target platform, or other contexts. To enable the tags, right-click, select Refactoring > Toggle Comment.-->
<!--<titlealts><navtitle></navtitle><searchtitle></searchtitle></titlealts>-->
<!--Put your short description next; used for first paragraph and abstract.-->
<shortdesc/>
<!--To optimize PDF retrievability, add prolog and indexing tags that help crystalize why users should be looking up this topic (purpose, task, and what they will learn)-->
<!--<prolog><metadata><keywords><indexterm></indexterm></keywords></metadata></prolog>-->
<refbody>
<section>
<title>Purpose</title>
<p>Creates a trusted client certificate in <ph conref="../../TextEntities.dita#TextEntities/ISM"
        />.</p>
</section>
<section>
<title>URI</title>
<p>Use the <ph conref="../../TextEntities.dita#TextEntities/ISM"
/> REST API POST method with the following <ph conref="../../TextEntities.dita#TextEntities/ISM"
/> configuration URI:</p>
<p><codeph>http://&lt;admin-endpoint-IP:Port>/ima/v1/configuration/</codeph></p>
</section>
<section><title>Object configuration data</title><p>Provide ClientCertificate object configuration
        data in the payload of the POST method by using the following schema.
          <parmname>Content-type</parmname> is set to <userinput>application/json</userinput>: </p><codeblock>
{
"ClientCertificate":[{"SecurityProfileName":"string", "CertificateName": "string", "Overwrite": true|false }]
}
</codeblock>Where:<dl>
        <dlentry>
          <dt><varname>CertificateName</varname></dt>
          <dd>Required.</dd>
          <dd>Specifies a value for the client certificate.</dd>
          <dd>The name can be a maximum of 255 alphanumeric characters. </dd>
          <dd>The name must not have leading or trailing spaces and cannot contain control
            characters, commas, double quotation marks, backslashes, or equal signs. The first
            character must not be a number. </dd>
          <dd>After the profile is created, this name cannot be changed.</dd>
        </dlentry>
        <dlentry>
          <dt>SecurityProfileName</dt>
          <dd>Required if you are creating a client certificate.</dd>
          <dd>Specifies the name of the security profile that the client certificate is associated
            with.</dd>
        </dlentry>
        <dlentry>
          <dt>Overwrite: true|false</dt>
          <dd>Specifies whether an existing certificate is overwritten if it has the same name.</dd>
          <dd>The default value is false which means that an existing certificate is not overwritten
            if it has the same name.</dd>
        </dlentry>
      </dl></section>
<section>
<title>Usage <tm tmclass="IGNORE" tmtype="reg" trademark="Notes">Notes</tm></title>
<ul>
<li>You must copy the certificate to the server before you can apply it. <xref format="dita"
          href="../cmd_REST_file_put.dita" scope="local" type="reference"
          /> to copy the certificate.</li>
<li>The certificate must be a pem format certificate.</li>
<li>You can upload a maximum of 100 trusted client certificates for every security profile.</li>
        <li>Capitalization and double quotation marks must be used as shown.</li>
</ul>
</section>
<section>
<title>Related <ph conref="../../TextEntities.dita#TextEntities/RESTAPIs"/></title>
<ul>
        <li><xref href="../../Administering/ad00722_.dita"/></li>
<li><xref format="dita" href="../cmd_REST_file_put.dita" scope="local" type="reference"/></li>
<li><xref format="dita" href="cmd_create_update_cprofile.dita" scope="local" type="reference"/></li>
<li><xref format="dita" href="cmd_create_update_sprofile.dita" scope="local" type="reference"/></li>
<li><xref format="dita" href="../cmd_show_config.dita" scope="local" type="reference"/></li>
<li><xref format="dita" href="../cmd_delete_config.dita" scope="local" type="reference"/></li>
</ul>
</section>
<section><title>Example</title>The following example shows the steps required to create a client
      certificate by using cURL:<ol>
        <li>Copy the client certificate by using the REST API PUT method:<codeblock>
curl -X PUT -T imaCA-crt.pem  http://127.0.0.1:9089/ima/v1/file/TestCACertKey.pem</codeblock></li>
        <li>Copy the certificate and key to create a CertificateProfile by using the REST API PUT method:<codeblock>
curl -X PUT -T certFree.pem  http://127.0.0.1:9089/ima/v1/file/TestCert.pem
curl -X PUT -T keyFree.pem http://127.0.0.1:9089/ima/v1/file/TestKey.pem</codeblock></li>
        <li>Create the CertificateProfile by using the REST API POST method:
          <codeblock>
curl -X POST \
  -H 'Content-Type: application/json'  \
  -d '{
       "CertificateProfile":{
        "TestCertProf":{
         "Certificate": "TestCert.pem",
         "Key": "TestKey.pem"
       }
      }
     }
  ' \
http://127.0.0.1:9089/ima/v1/configuration</codeblock></li>
        <li>Create the SecurityProfile by using the REST API POST method:
          <codeblock>
curl -X POST 
  -H 'Content-Type: application/json'  \
  -d '{
       "SecurityProfile":{
        "TestSecProf":{
         "CertificateProfile": "TestCertProf",
         "UsePasswordAuthentication": false
       }
      }
     }
  ' \
http://127.0.0.1:9089/ima/v1/configuration</codeblock></li>
        <li>Create the ClientCertificate by using the REST API POST method:
          <codeblock>
curl -X POST 
  -H 'Content-Type: application/json'  \
  -d '{"ClientCertificate":[{
        "SecurityProfileName":"TestSecProf",
        "CertificateName": "TestCACertKey"
       }]
      }
  ' \
http://127.0.0.1:9089/ima/v1/configuration</codeblock></li>
      </ol><?Pub Caret 340?></section>
</refbody>
</reference>
