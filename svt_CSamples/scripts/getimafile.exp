#!/usr/bin/expect -- 
#
# This Expect script was generated by autoexpect on Thu Mar 14 15:35:32 2013
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}


# Debug Print

proc DebugPrint { i_msg } {
        global Debug
        if { $Debug > 0 } {
          puts  -nonewline stderr "\nDebug:  $i_msg\n"
        }
}

set Debug 1

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


proc getfile { server client user pass myfile client_dir transfer_type } {
    set timeout 3600
    spawn /bin/bash
    match_max 100000
    send -- "ssh admin@$server\r"
    expect "Console> "
    send -- "$transfer_type $myfile scp://root@$client:$client_dir\r"
    while (1) {
        expect  {
            timeout    {send_user "ERROR: $procname :Time out: $target"}
            "$user@$client's password: "  {  send -- "$pass\r";  }
            "Console> " { break; }
            "Are you sure you want to continue connecting" {  send -- "yes\r"; }
        }
    }
    send -- "exit\r"
}

set user ""
set pass ""
set myfile ""
set server ""
set client ""
set client_dir ""
set transfer_type ""
set Debug 0

for {set i 0} {$i<$argc} {incr i} {

        set arg [lindex $argv $i]

        set type2commandline 0

        case $arg in \
        "-u" {
            incr i
            set user [lindex $argv $i]
        } "-p" {
            incr i
            set pass [lindex $argv $i]
        } "-d" {
            incr i
            set client_dir [lindex $argv $i]
        } "-f" {
            incr i
            set myfile [lindex $argv $i]
        } "-s" {
            incr i
            set server [lindex $argv $i]
        } "-t" {
            incr i
            set transfer_type [lindex $argv $i]
        } "-debug" {

            incr i

            set Debug [lindex $argv $i]

            if { $Debug > 1 } {

                exp_internal -f "./.tmp.exp.debug" 1

            }

        } "-c" {
            incr i
            set client [lindex $argv $i]
        } default {

            set Command_Line [lrange $argv $i end]

            DebugPrint "1Command_Line = $Command_Line"

            if { $type2commandline != 1 } {

                set Command_Line [lindex $Command_Line 0]

                DebugPrint "2Command_Line = $Command_Line"

            }

            break;

        }

    DebugPrint "Argument=$arg"

}


#log_file -noappend ./.tmp.log.exp
#exp_internal -f "./.tmp.exp.debug" 1

getfile $server $client $user $pass $myfile $client_dir "$transfer_type"
    


exit 0
