#!/usr/bin/expect -- 
#
# This Expect script was generated by autoexpect on Thu Mar 14 15:35:32 2013
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}


# Debug Print

proc DebugPrint { i_msg } {
        global Debug
        if { $Debug > 0 } {
          puts  -nonewline stderr "\nDebug:  $i_msg\n"
        }
}

set Debug 1

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


proc do_standard_expect_console { action server client user pass server_io client_io transfer_type } {
    set timeout 3600
    while (1) {
        expect  {
            timeout    {send_user "ERROR: $procname :Time out: $target"}
            "Console> " { break; }
            -re "(.*)> \$" { break; }
        }
    }
}
proc do_standard_expect_file_transfer { action server client user pass server_io client_io transfer_type } {
    set timeout 3600
    while (1) {
        expect  {
            timeout    {send_user "ERROR: $procname :Time out: $target"}
            "$user@$client's password: "  {  send -- "$pass\r";  }
            "Console> " { break; }
            -re "(.*)> \$" { break; }
            "Are you sure you want to continue connecting" {  send -- "yes\r"; }
        }
    }
}


proc appliance_cmd_full { action server client user pass server_io client_io transfer_type } {
    set timeout 3600
    spawn /bin/bash
    match_max 100000
    send -- "ssh admin@$server\r"
    while (1) {
        expect  {
            timeout       {send_user "ERROR: $procname :Time out: $target"}
            "Console> "   { break; }
            -re "(.*)> \$" { break; }
            "password: "  {  send -- "admin\r";   }
            "Password: "  {  send -- "admin\r";   }
        }
    }

    if { $action == "getfile" } {
        send -- "$transfer_type $server_io scp://$user@$client:$client_io\r"
        while (1) {
            expect  {
                timeout    {send_user "ERROR: $procname :Time out: $target"}
                "$user@$client's password: "  {  send -- "$pass\r";  }
                "Console> " { break; }
                -re "(.*)> \$" { break; }
                "Are you sure you want to continue connecting" {  send -- "yes\r"; }
            }
        }
    } elseif { $action == "runcmd" } {
        send -- "$transfer_type \r"
        while (1) {
            expect  {
                timeout    {send_user "ERROR: $procname :Time out: $target"}
                "Console> " { break; }
                -re "(.*)> \$" { break; }
            }
        }
    } elseif { $action == "putfile" } {
        send -- "$transfer_type scp://$user@$client:$client_io $server_io \r"
        while (1) {
            expect  {
                timeout    {send_user "ERROR: $procname :Time out: $target"}
                "$user@$client's password: "  {  send -- "$pass\r";  }
                "Console> " { break; }
                -re "(.*)> \$" { break; }
                "Are you sure you want to continue connecting" {  send -- "yes\r"; }
            }
        }
    } elseif { $action == "passwordless" } {
        send -- "user sshkey add scp://$user@$client:~/.ssh/authorized_keys\r"
        while (1) {
            expect  {
                timeout    {send_user "ERROR: $procname :Time out: $target"}
                "$user@$client's password: "  {  send -- "$pass\r";  }
                "Console> " { break; }
                -re "(.*)> \$" { break; }
                "Are you sure you want to continue connecting" {  send -- "yes\r"; }
            }
        }
        send -- "file get scp://$user@$client:~/.ssh/id_sample_harness_sshkey identity\r"
        while (1) {
            expect  {
                timeout    {send_user "ERROR: $procname :Time out: $target"}
                "$user@$client's password: "  {  send -- "$pass\r";  }
                "Console> " { break; }
                -re "(.*)> \$" { break; }
                "Are you sure you want to continue connecting" {  send -- "yes\r"; }
            }
        }
        send -- "imaserver apply identity identity\r"
        while (1) {
            expect  {
                timeout    {send_user "ERROR: $procname :Time out: $target"}
                "Console> " { break; }
                -re "(.*)> \$" { break; }
            }
        }
    } 
    ####################### next command hangs if imaserver is not running ########################
    #send_user "Sending imaserver set AcceptLicense for good measure \n" ;
    #send -- "imaserver set AcceptLicense\r"
    #
        #while (1) {
            #expect  {
                #timeout    {send_user "ERROR: $procname :Time out: $target"}
                #"Console> " { break; }
                #-re "(.*)> \$" { break; } 
            #}
        #}
    send_user "Sending exit" ;

    send -- "exit\r"
}
proc appliance_cmd { action server } {
    return [ appliance_cmd_full $action $server ]
}

set user ""
set action ""
set pass ""
set server_io ""
set server ""
set client ""
set mycommand ""
set client_io ""
set transfer_type ""
set Debug 0

if { $argc == 0 } {

     puts stdout ""
     puts stdout "--------------------------------------------------------------------------------"
     puts stdout "Help Menu for $argv0"
     puts stdout "--------------------------------------------------------------------------------"
     puts stdout ""
     puts stdout "-a    : Action (required):    <passwordless|getfile|putfile|export>"
     puts stdout "-s    : Server (required):    <Ip or hostname of target appliance>"
     puts stdout "                         :    Note: admin/admin login password information hard coded currently"
     puts stdout "-f    : Server io  (opti):    optional server io dir/file"
     puts stdout "-d    : Client io  (opti):    optional client io dir/file "
     puts stdout "-u    : User   (required):    <User on the client system> Todo: this could just use current user."
     puts stdout "-p    : Pass   (required):    <Password on the client system> Todo: this could just use current user/pass."
     puts stdout "-c    : Client (required):    <Client system ip address> Todo: this could just default to current client"
     puts stdout ""
     puts stdout ""
     puts stdout "Example 1:Setup passwordless on appliance 10.10.10.10 from client system "
     puts stdout "          10.10.10.10 (client user root/tun4r0ll)"
     puts stdout ""
     puts stdout "  $argv0 -a passwordless -u root -p tun4r0ll -s 10.10.10.10  -c 10.10.10.10"
     puts stdout ""
     puts stdout "Example 2:Put a file on appliance 10.10.10.10 named myfirmware from client system 10.10.10.10 .scrypt2 file"
     puts stdout "          10.10.10.10 (client user root/tun4r0ll)"
     puts stdout ""
     puts stdout "  $argv0 -a putfile -u root -p tun4r0ll -s 10.10.10.10 -c 10.10.10.10 -f myfirmware -d /mnt/mar145/release/IMA13b/development/20130926-1733/appliance/dev_bedrock.scrypt2 -f myfirmware"
     puts stdout ""
     puts stdout "--------------------------------------------------------------------------------"

    exit 0;

}


for {set i 0} {$i<$argc} {incr i} {

        set arg [lindex $argv $i]

        set type2commandline 0

        case $arg in \
        "-u" {
            incr i
            set user [lindex $argv $i]
        } "-p" {
            incr i
            set pass [lindex $argv $i]
        } "-d" {
            incr i
            set client_io [lindex $argv $i]
        } "-f" {
            incr i
            set server_io [lindex $argv $i]
        } "-s" {
            incr i
            set server [lindex $argv $i]
        } "-t" {
            incr i
            set transfer_type [lindex $argv $i]
        } "-debug" {

            incr i

            set Debug [lindex $argv $i]

            if { $Debug > 1 } {

                exp_internal -f "./.tmp.exp.debug" 1

            }

        } "-c" {
            incr i
            set client [lindex $argv $i]
        } "-x" {
            incr i
            set mycommand [lindex $argv $i]
        } "-a" {
            incr i
            set action [lindex $argv $i]
        } default {

            set Command_Line [lrange $argv $i end]

            DebugPrint "1Command_Line = $Command_Line"

            if { $type2commandline != 1 } {

                set Command_Line [lindex $Command_Line 0]

                DebugPrint "2Command_Line = $Command_Line"

            }

            break;

        }

    DebugPrint "Argument=$arg"

}

#----------------------------------
# Check Args
#----------------------------------
if { $action == "" } {
    puts -nonewline stderr "\nERROR: No action supplied\n"
    exit 0;
} elseif { $server == "" } {
    puts -nonewline stderr "\nERROR: No server supplied\n"
    exit 0;
}

#----------------------------------
# Run Requested Action
#----------------------------------
if { $action == "passwordless" } {
    appliance_cmd_full $action $server $client $user $pass $server_io $client_io "$transfer_type"
} elseif { $action == "getfile" } {
    appliance_cmd_full $action $server $client $user $pass $server_io $client_io "file put"
} elseif { $action == "export" } {
    set action "getfile" ; # transfer_type will make the transfer use advanced-pd-options export
    appliance_cmd_full $action $server $client $user $pass $server_io $client_io "advanced-pd-options export"
} elseif { $action == "putfile" } {
    appliance_cmd_full $action $server $client $user $pass $server_io $client_io "file get"
} elseif { $action == "runcmd" } {
    appliance_cmd_full $action "$server" "x" "x" "x" "x" "x" "$mycommand"
} else {
    puts -nonewline stderr "\nERROR: Invalid action : $action supplied\n"
}


#log_file -noappend ./.tmp.log.exp
#exp_internal -f "./.tmp.exp.debug" 1

puts stdout "\nAll actions complete. Exitting now\n"

exit 0
