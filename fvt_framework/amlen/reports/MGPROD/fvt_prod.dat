ismClient           A1TF7cciRHD01g A2TF7cciCOD03g M1TF7fvt13g M2TF7fvt14g                           Passed: 48    Failed: 0
CLUSTER:  PCOUNT: 48   FCOUNT: 0
CCI_CentOS7_Docker:  PCOUNT: 48   FCOUNT: 0
ismClient           A1TF7cciRHD06g A2TF7cciCOD02g M1TF7fvt11g M2TF7fvt12g                           Passed: 167   Failed: 22
"HA_jms_td_tests" FAILED:
FAILED: Scenario 14 - jms_HA_oauth_001 - HA OAuth 001
FAILED: Scenario 16 - jms_HA_oauth_002 - HA OAuth 002
"HA_mqtt_td_tests" FAILED:
FAILED: Scenario 1 - testmqtt_HA05 - Test admin objects are properly rolled over [ testmqtt_HA05.xml ]
FAILED: runScenarios - mqtt HAScenarios03: Server stopped running during execution.
"HA_jca_tests" FAILED:
FAILED: Scenario 0 - jca_retained_001 - JCA retained 001
FAILED: Scenario 2 - jca_topic_001 - JCA topic 001
FAILED: Scenario 3 - jca_topic_002 - JCA topic 002
FAILED: Scenario 5 - jca_queue_001 - JCA queue 001
FAILED: Scenario 6 - jca_shared_001 - JCA shared 001 - nondurable shared subscription without a clientid
FAILED: Scenario 7 - jca_shared_002 - JCA shared 002 - nondurable shared subscription with a clientid
FAILED: Scenario 8 - jca_shared_003 - JCA shared 003 - durable shared subscription without a clientid
FAILED: Scenario 9 - jca_shared_004 - JCA shared 004 - durable shared subscription with a clientid
FAILED: Scenario 10 - jca_jndi_topic - JCA JNDI Topic
FAILED: Scenario 11 - jca_jndi_queue - JCA JNDI Queue
FAILED: Scenario 13 - jca_api_001 - JCA api 001 - Test various JMS API*s in the RA environment
FAILED: Scenario 1 - jca_ha_001 - JCA HA 001
FAILED: Scenario 2 - jca_ha_002 - JCA HA 002
FAILED: Scenario 3 - jca_ha_003 - JCA HA 003
FAILED: Scenario 4 - jca_ha_005 - JCA HA 005
FAILED: Scenario 5 - mqtt_AdminDynamic_M1_LDAP_cleanup - disable and clean LDAP on M1
FAILED: Scenario 0 - HA_teardown - Configure HA
FAILED: runScenarios - JCA HA Tests - 00: Server stopped running during execution.

HA:  PCOUNT: 52   FCOUNT: 2
HA:  PCOUNT: 68   FCOUNT: 2
HA:  PCOUNT: 18   FCOUNT: 0
HA:  PCOUNT: 23   FCOUNT: 18
HA:  PCOUNT: 6   FCOUNT: 0
CCI_CentOS7_Docker:  PCOUNT: 167   FCOUNT: 22
ismClient           A1TF7cciCOD04g A2TF7cciCOD07g A3TF7cciRHD07g A4TF7cciRHD02g A5TF7cciRHD03g M1TF7fvt15g M2TF7fvt16g Passed: 170   Failed: 1
"CLSTLG_cluster_tests" FAILED:
FAILED: Scenario 33 - testmqtt_clusterCLI_009a - Normal cluster. pub to 2 rcv on 1

CLUSTER:  PCOUNT: 170   FCOUNT: 1
CCI_CentOS7_Docker:  PCOUNT: 170   FCOUNT: 1
ismClient           A1TF7cciCOR06g A2TF7cciCOR07g A3TF7cciCOR14g A4TF7cciCOR15g M1TF7fvt25g M2TF7fvt26g B1TF7bridge05g B2TF7bridge06g P1TF7proxy07g P2TF7proxy06g Passed: 147   Failed: 219
"BRIDGE_bridge_tests" FAILED:
FAILED: Scenario 1 - bridgePx.SimpleA1A2 - Test Simple Pub-Fwd-Recv through Bridge   bridge_tests/proxy/ism-Bridge-Proxy01.sh
FAILED: Scenario 3 - bridgePx.MultiFWD_V3Source - Test Multile Forwarders with V3 Source Bridge   bridge_tests/proxy/ism-Bridge-Proxy01.sh
FAILED: Scenario 5 - bridgePx.MaxFWDTopics - Test Max Forwarder Topics Bridge   bridge_tests/proxy/ism-Bridge-Proxy01.sh
"BRIDGE_bridge_tests" FAILED:
FAILED: Scenario 1 - bridgePx.SimpleA1A2 - Test Simple Pub-Fwd-Recv through Bridge   bridge_tests/proxy/ism-Bridge-Proxy01.sh
FAILED: Scenario 3 - bridgePx.MultiFWD_V3Source - Test Multile Forwarders with V3 Source Bridge   bridge_tests/proxy/ism-Bridge-Proxy01.sh
FAILED: Scenario 5 - bridgePx.MaxFWDTopics - Test Max Forwarder Topics Bridge   bridge_tests/proxy/ism-Bridge-Proxy01.sh
FAILED: Scenario 1 - bridge.SimpleA1EventStreams - Test Simple Pub-Fwd-Recv through Bridge  bridge_tests/plain/ism-Bridge-Plain01.sh
"proxy_tests" FAILED:
FAILED: Scenario 2 - testproxy_connect01 - Test MQTT/WebSocket connect to an IP address and port  +connect+/+ism-proxy_td-connectScenarios01.sh
FAILED: Scenario 3 - testproxy_connect03 - Test MQTT/WebSocket connect valid user/password  +connect+/+ism-proxy_td-connectScenarios01.sh
FAILED: Scenario 4 - testproxy_connect04 - Test MQTT/WebSocket connect invalid user/password
FAILED: Scenario 5 - testproxy_connect07 - Test MQTT/WebSocket connect with Will topicmessage, publish close normally
FAILED: Scenario 6 - testproxy_connect08 - Test MQTT/WebSocket connect with Will topicmessage and Qos=1
FAILED: Scenario 7 - testproxy_connect09 - Test MQTT/WebSocket connect with Will topicmessage and Qos=2
FAILED: Scenario 8 - testproxy_connect10 - Test MQTT/WebSocket connect with Will topic, message and RETAIN
FAILED: Scenario 9 - testproxy_connect11 - Test MQTT/WebSocket connect with same clientId as already connected client
FAILED: Scenario 10 - testproxy_connect12 - Test MQTT/WebSocket connect with Will topic, message (zero length)
FAILED: Scenario 11 - testproxy_connect13 - Test MQTT/WebSocket connect with cleanSession=0
FAILED: Scenario 12 - testproxy_connect14 - Test MQTT/WebSocket connect with Will topic, connect second client same clientId
FAILED: Scenario 13 - testproxy_connect15 - Test MQTT/WebSocket connect will topic longer than 60 characters
FAILED: Scenario 14 - testproxy_connect16 - Test MQTT connect without cleanSession, receive stored msg
FAILED: Scenario 15 - testproxy_connect17 - Test MQTT connect with cleanSession, don*t receive stored msg
FAILED: Scenario 16 - testproxy_connect21 - Test that message in store are available after server fail/restart [ testproxy_connect21.xml ]
FAILED: Scenario 17 - testproxy_connect22 - Test that RETAINed messages are available after server fail/restart [ testproxy_connect22.xml ]
FAILED: Scenario 18 - testproxy_connect23 - More RETAINed messages tests [ testproxy_connect23.xml ]
FAILED: runScenarios - ISM MQTT via WSTestDriver: Server stopped running during execution.
FAILED: Scenario 1 - testproxy_subscribe01 - Test MQTT/WebSocket subscribe to *#*
FAILED: Scenario 2 - testproxy_subscribe02 - Test MQTT/WebSocket subscribe to *a/b/c*
FAILED: Scenario 3 - testproxy_subscribe03 - Test MQTT/WebSocket subscribe to *a/#*
FAILED: Scenario 4 - testproxy_subscribe04 - Test MQTT/WebSocket subscribe to *a/+/c*
FAILED: Scenario 5 - testproxy_subscribe05 - Test MQTT/WebSocket subscribe to 50 level topic
FAILED: Scenario 6 - testproxy_subscribe06 - Test MQTT/WebSocket subscribe to *a/b/c* with QoS=1
FAILED: Scenario 7 - testproxy_subscribe07 - Test MQTT/WebSocket subscribe to *a/b/c* with QoS=2
FAILED: Scenario 8 - testproxy_subscribe08 - Test MQTT/WebSocket subscribe to *a/b/c* and *a/b/d*
FAILED: Scenario 9 - testproxy_subscribe09 - Test MQTT/WebSocket subscribe to *a/b/c* with QoS=1 and *a/b/d* with QoS=0
FAILED: Scenario 10 - testproxy_subscribe10 - Test MQTT/WebSocket subscribe to *a/b/c* and *a/b/+*, make sure a/b/c messages are not delivered twice
FAILED: Scenario 11 - testproxy_subscribe11 - Test MQTT/WebSocket subscribe to *a/b/c* QoS=0
FAILED: Scenario 12 - testproxy_subscribe13 - Test MQTT/WebSocket subscribe to *a/b/c* QoS=0 publish QoS=1 and Qos=2
FAILED: Scenario 13 - testproxy_subscribe14 - Test MQTT/WebSocket subscribe to long topic (<32767 characters)
FAILED: Scenario 14 - testproxy_subscribe15 - Test MQTT/WebSocket subscribe to long topic (<32767 characters)
FAILED: Scenario 15 - testproxy_subscribe16 - Test MQTT/WebSocket subscribe send 1600 messages on each of two topics
FAILED: Scenario 16 - testproxy_subscribe17 - Test MQTT 1)Subscribe to same specific topic twice, should only receive messages once
FAILED: Scenario 17 - testproxy_subscribe20 - Test MQTT test subscribe to +
FAILED: Scenario 18 - testproxy_subscribe21 - Test MQTT test subscribe, close, subscribe
FAILED: Scenario 19 - testproxy_subscribe22 - Test MQTT test subscribe to /a/c/+
FAILED: Scenario 20 - testproxy_subscribe23 - Test publish and receive with 0 length message
FAILED: Scenario 1 - testproxy_publish05 - Test RETAIN, simple scenario  +publish+/+ism-proxy_td-publishScenarios01.sh
FAILED: Scenario 2 - testproxy_publish06 - Test RETAIN, second message replaces first  +publish+/+ism-proxy_td-publishScenarios01.sh
FAILED: Scenario 3 - testproxy_publish07 - Test RETAIN, if already subscribed, RETAIN flag should be off  +publish+/+ism-proxy_td-publishScenarios01.sh
FAILED: Scenario 4 - testproxy_publish08 - Test RETAIN, if already subscribed/ durable, RETAIN flag should be off  +publish+/+ism-proxy_td-publishScenarios01.sh
FAILED: Scenario 1 - testproxy_monitor01 - Connect through tenant requiring user/password, test that no user/password fails, test that tenant name is properly added in topic sent on to MessageSight
FAILED: Scenario 2 - testproxy_monitor02 - Connect through tenant requiring user/password, test that no user/password fails, test that tenant name is properly added in topic sent on to MessageSight, test that tenant not in cfg files fails
FAILED: Scenario 3 - testproxy_monitor03_MultiProxyStealCID - Test steals of the same client ID between two proxies  +monitor+/+ism-proxy_td-monitorScenarios01.sh
FAILED: Scenario 4 - testproxy_monitor04_MultiProxyConnDisconn - Test rapid connects/disconnects of the same client ID between two proxies
FAILED: Scenario 5 - cleanup_confirmDisconnect - Kill the proxy and confirm final retained message is disconnect  +monitor+/+ism-proxy_td-monitorScenarios01.sh
FAILED: Scenario 1 - testproxy_retain01 - Test MQTT/WebSocket connect with Will topicmessage and Qos=1
FAILED: Scenario 2 - testproxy_retain02 - Test MQTT/WebSocket connect with Will topic, message and RETAIN
FAILED: Scenario 2 - configSetAndGet - Verify proxy config tests passed
FAILED: Scenario 2 - testproxy_tenant01-iot2 - Connect a device on IoT2 requiring user/password, test that no user/password fails, test that org name is properly added in topic sent on to MessageSight
FAILED: Scenario 3 - testproxy_tenant02-iot2 - Connect an application on IoT2 requiring user/password, test that tenant name is properly added in topic sent on to MessageSight, test that tenant not in cfg files fails
FAILED: Scenario 4 - testproxy_tenant03-quickstart2 - Connect a device on Quickstart2 requiring no user/password, test that tenant name is properly added in topic sent on to MessageSight
FAILED: Scenario 5 - testproxy_tenant04-quickstart2 - Connect an application on Quickstart2 requiring no user/password, test that tenant name is properly added in topic sent on to MessageSight
FAILED: Scenario 6 - testproxy_tenant05-quickstart2 - Connect application and device on quickstart2, only device publish and only application subscribe
FAILED: Scenario 7 - testproxy_tenant06-quickstart2 - Connect application quickstart2, check QuickStart Rules
FAILED: Scenario 8 - testproxy_tenant07-iot2 - Connect device on iot2, check Registered Org rules
FAILED: Scenario 1 - testproxy_dynamic01 - Test that dynamic authentication doesn*t override normal
FAILED: Scenario 2 - testproxy_dynamic02 - Test that dynamic authentication does add to normal
FAILED: Scenario 3 - testproxy_dynamic03 - Test that dynamic authentication with simultaneous requests
FAILED: Scenario 4 - testproxy_dynamic04 - Test that dynamic authentication can fail connect
FAILED: Scenario 5 - testproxy_dynamic05 - Test that dynamic authentication can access IP of client
FAILED: Scenario 1 - MqttXrscadaTest15 - SDP_PROTOCOL_PACKED
FAILED: Scenario 3 - proxyACL_InGroup - Test RETAIN, Durable WildCard
FAILED: Scenario 4 - proxyACL_Recovery - Test Recovery after Message Sight Restart  +AAAgateway+/+ism-AAAgateway01.sh
FAILED: Scenario 5 - proxyACL_ErrorPath - Error Paths of AClfile  +AAAgateway+/+ism-AAAgateway01.sh
FAILED: Scenario 6 - proxyACL_Undeliverable - ACLs lost on Reboot, allows Undeliverable msgs to be Queued IoT Tracker ISSUE 1285
FAILED: Scenario 7 - proxyACL_Undeliverable_mixedQoS - ACLs lost on Reboot, allows Undeliverable QoS:0 msgs to be Acked IoT Tracker ISSUE 1285
FAILED: Scenario 8 - proxyACL_Undeliverable.v5 - (MQTTv5) ACLs lost on Reboot, allows Undeliverable msgs to be Queued IoT Tracker ISSUE 1285
FAILED: Scenario 1 - testproxy_tls01_NoStore - Test ability to connect to Proxy TLS port with no store and self signed server cert - conn should fail [ testproxy_tls01_NoStore.xml ]
FAILED: Scenario 2 - testproxy_tls02_WrongStore - Test ability to connect to Proxy TLS port with wrong cert in store for self signed server cert - conn should fail [ testproxy_tls02_WrongStore.xml ]
FAILED: Scenario 3 - testproxy_tls03_MqttsEpStore - Test ability to connect to Proxy TLS port [ testproxy_tls03_MqttsEpStore.xml ]
FAILED: Scenario 4 - testproxy_tls04_MqttsEpStore_WithUser - Test ability to connect to Proxy TLS port with a user [ testproxy_tls04_MqttsEpStore_WithUser.xml ]
FAILED: Scenario 1 - testproxy_tls01_NoTLS - Test that non-TLS connections succeed for SGEnabled=true configuration [ testproxy_tls01_NoTLS.xml ]
FAILED: Scenario 3 - testproxy_tls03_MqttsEpStore - Test TLS connections succeed for SGEnabled=true config when client cert store contains mqtts ep cert only [ testproxy_tls03_MqttsEpStore.xml ]
FAILED: Scenario 5 - testproxy_tls05_ProxyDfltStore_CltCrtNoMatch - Test TLS connections succeed for SGEnabled=true config when client cert store contains dflt proxy cert and non-matching client cert. Also test connections fail when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls05_ProxyDfltStore_CltCrtNoMatch.xml ]
FAILED: Scenario 6 - testproxy_tls06_ProxyDfltStore_CltCrtPartialMatchd - Test TLS connections succeed for SGEnabled=true config when client cert store contains dflt proxy cert and CN partial matching client cert. Also test connections succeed when partial match betw CN/SAN & clientId is required and fails when exact match is required. [ testproxy_tls06_ProxyDfltStore_CltCrtPartialMatchd.xml ]
FAILED: Scenario 7 - testproxy_tls07_ProxyDfltStore_CltCrtExactMatchd - Test TLS connections succeed for SGEnabled=true config when client cert store contains dflt proxy cert and SAN exact matching client cert. Also check that connections succeed when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls07_ProxyDfltStore_CltCrtExactMatchd.xml ]
FAILED: Scenario 8 - testproxy_tls08_ProxyDfltStore_CltCrtPartialMatchg - Test TLS connections succeed for SGEnabled=true config when client cert store contains dflt proxy cert and SAN partial matching client cert. Also check that connections succeed when partial match betw CN/SAN & clientId is required and failes when exact match is required. [ testproxy_tls08_ProxyDfltStore_CltCrtPartialMatchg.xml ]
FAILED: Scenario 9 - testproxy_tls09_ProxyDfltStore_CltCrtExactMatchg - Test TLS connections succeed for SGEnabled=false config when client cert store contains dflt proxy cert and CN exact matching client cert. Also check that connections succeed when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls09_ProxyDfltStore_CltCrtExactMatchg.xml ]
FAILED: Scenario 2 - testproxy_tls02s_OrgSrvStore - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert only [ testproxy_tls02s_OrgSrvStore.xml ]
FAILED: Scenario 3 - testproxy_tls03s_OrgSrvStore_CltCrtNoMatch - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert and non-matching client cert. Also check that connections fail when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls03s_OrgSrvStore_CltCrtNoMatch.xml ]
FAILED: Scenario 4 - testproxy_tls04s_OrgSrvStore_CltCrtPartialMatchd - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert and client cert CN partially matches client ID. Also check that connection succeeds when partial match betw CN/SAN & clientId is required and fails when exact match is required. [ testproxy_tls04s_OrgSrvStore_CltCrtPartialMatchd.xml ]
FAILED: Scenario 5 - testproxy_tls05s_OrgSrvStore_CltCrtExactMatchd - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert and client cert SAN exactly matches client ID. Also check that connection succeeds when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls05s_OrgSrvStore_CltCrtExactMatchd.xml ]
FAILED: Scenario 6 - testproxy_tls06s_OrgSrvStore_CltCrtPartialMatchg - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert and client cert SAN partially matches client ID. Also check that connection succeeds when partial match betw CN/SAN & clientId is required and fails when exact match is required. [ testproxy_tls06s_OrgSrvStore_CltCrtPartialMatchg.xml ]
FAILED: Scenario 7 - testproxy_tls07s_OrgSrvStore_CltCrtExactMatchg - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert and client cert CN exactly matches client ID. Also check that connection succeeds when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls07s_OrgSrvStore_CltCrtExactMatchg.xml ]
FAILED: Scenario 6 - testproxy_tls06_ProxyDfltStore_CltCrtPartialMatchd - Test TLS connections succeed for SGEnabled=false config when client cert store contains dflt proxy cert and client cert CN partially matches client ID [ testproxy_tls06_ProxyDfltStore_CltCrtPartialMatchd.xml ]
FAILED: Scenario 7 - testproxy_tls07_ProxyDfltStore_CltCrtExactMatchd - Test TLS connections succeed for SGEnabled=false config when client cert store contains dflt proxy cert and client cert SAN exactly matches client ID [ testproxy_tls07_ProxyDfltStore_CltCrtExactMatchd.xml ]
FAILED: Scenario 8 - testproxy_tls08_ProxyDfltStore_CltCrtPartialMatchg - Test TLS connections succeed for SGEnabled=false config when client cert store contains dflt proxy cert and client cert SAN partially matches client ID [ testproxy_tls08_ProxyDfltStore_CltCrtPartialMatchg.xml ]
FAILED: Scenario 9 - testproxy_tls09_ProxyDfltStore_CltCrtExactMatchg - Test TLS connections succeed for SGEnabled=false config when client cert store contains dflt proxy cert and client cert CN exactly matches client ID [ testproxy_tls09_ProxyDfltStore_CltCrtExactMatchg.xml ]
FAILED: Scenario 4 - testproxy_tls04s_OrgSrvStore_CltCrtPartialMatchd - Test TLS connections succeed for SGEnabled=false config with org server cert when client cert store contains dflt proxy cert and client cert CN partially matches client ID [ testproxy_tls04s_OrgSrvStore_CltCrtPartialMatchd.xml ]
FAILED: Scenario 5 - testproxy_tls05s_OrgSrvStore_CltCrtExactMatchd - Test TLS connections succeed for SGEnabled=false config with org server cert when client cert store contains dflt proxy cert and client cert SAN exactly matches client ID [ testproxy_tls05s_OrgSrvStore_CltCrtExactMatchd.xml ]
FAILED: Scenario 6 - testproxy_tls06s_OrgSrvStore_CltCrtPartialMatchg - Test TLS connections succeed for SGEnabled=false config with org server cert when client cert store contains dflt proxy cert and client cert SAN partially matches client ID [ testproxy_tls06s_OrgSrvStore_CltCrtPartialMatchg.xml ]
FAILED: Scenario 7 - testproxy_tls07s_OrgSrvStore_CltCrtExactMatchg - Test TLS connections succeed for SGEnabled=false config with org server cert when client cert store contains dflt proxy cert and client cert CN exactly matches client ID [ testproxy_tls07s_OrgSrvStore_CltCrtExactMatchg.xml ]
FAILED: Scenario 5 - testproxy_tls05b_ClientCertEmptyCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty CRL (cert 2 of 3) [ testproxy_tls05b_ClientCertEmptyCRL.xml ]
FAILED: Scenario 6 - testproxy_tls05c_ClientCertEmptyCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty CRL (cert 3 of 3) [ testproxy_tls05c_ClientCertEmptyCRL.xml ]
FAILED: Scenario 7 - testproxy_tls05a_ClientCertEmptyCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty CRL (cert 1 of 3) [ testproxy_tls05a_ClientCertEmptyCRL.xml ]
FAILED: Scenario 10 - testproxy_tls06c_ClientCert2CrtsInCRL - Test ability to connect to Proxy TLS port using client certificate authentication with CRL and 2 reovoked certs - conn for non-revoked cert should succeed [ testproxy_tls06c_ClientCert2CrtsInCRL.xml ]
FAILED: Scenario 11 - testproxy_tls07a_ClientCertEmptyDERCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty DER format CRL (cert 1 of 3) [ testproxy_tls07a_ClientCertEmptyDERCRL.xml ]
FAILED: Scenario 12 - testproxy_tls07b_ClientCertEmptyDERCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty DER format CRL (cert 2 of 3) [ testproxy_tls07b_ClientCertEmptyDERCRL.xml ]
FAILED: Scenario 13 - testproxy_tls07c_ClientCertEmptyDERCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty DER format CRL (cert 3 of 3) [ testproxy_tls07c_ClientCertEmptyDERCRL.xml ]
FAILED: Scenario 15 - testproxy_tls08b_ClientCert1CrtInDERCRL - Test ability to connect to Proxy TLS port using client certificate authentication with DER format CRL and 1 reovoked cert - conn should succeed for cert that is not revoked [ testproxy_tls08b_ClientCert1CrtInDERCRL.xml ]
FAILED: Scenario 16 - testproxy_tls08c_ClientCert1CrtInDERCRL - Test ability to connect to Proxy TLS port using client certificate authentication with DER format CRL and 1 reovoked cert - conn should succeed for cert that is not revoked [ testproxy_tls08c_ClientCert1CrtInDERCRL.xml ]
FAILED: Scenario 2 - testproxy_mqttv5_01 - WS mqttv5 connect01
FAILED: Scenario 3 - testproxy_mqttv5_01b - PAHO mqttv5 connect01b
FAILED: Scenario 4 - testproxy_mqttv5_02 - mqttv5 publish, subscribe, receive
FAILED: Scenario 5 - testproxy_mqttv5_04 - mqttv5 Connect, Disconnect with Expiry
FAILED: Scenario 6 - testproxy_mqttv5_05 - mqttv5 session expiry with connection policy
FAILED: Scenario 7 - testproxy_mqttv5_07 - MQTTv5 Normal disconnect does not send will message with will delay
FAILED: Scenario 8 - testproxy_mqttv5_08 - MQTTv5 Abnormal disconnect to send will message with will delay
FAILED: Scenario 9 - testproxy_mqttv5_09 - MQTTv5 Disconnect with rc=4 to publish will msg after delay
FAILED: Scenario 10 - testproxy_mqttv5_09b - MQTTv5 Disconnect with rc=4 to publish will msg after delay
FAILED: Scenario 11 - testproxy_mqttv5_10 - MQTTv5 session expiry across server restart
FAILED: Scenario 12 - testproxy_mqttv5_11 - MQTTv5 Will delay - create new connection before delay - no send
FAILED: Scenario 13 - testproxy_mqttv5_12 - MQTTv5 Will delay - clientSteals and Clean Session
FAILED: Scenario 14 - testproxy_mqttv5_13 - MQTTv5 publish many messages
FAILED: Scenario 15 - testproxy_mqttv5_14 - MQTTv5 publish user properties
FAILED: Scenario 16 - testproxy_mqttv5_14_GVT - MQTTv5 publish GVT user properties
FAILED: Scenario 17 - testproxy_mqttV5_gvt01 - Test ability use GVT characters in topic and ClientID [ testproxy_mqttV5_gvt01.xml ]
FAILED: Scenario 18 - testproxy_mqttV5_gvt02 - Test ability to connect over an SSL connection [ testproxy_mqttV5_gvt02.xml ]
FAILED: Scenario 20 - testproxy_mqttV5_gvt03 - Test ability to connect with GVT characters in user/password [ testproxy_mqttV5_gvt03.xml ]
FAILED: Scenario 21 - testproxy_mqttV5_gvt05 - Test ability to connect with GVT characters C4 in user/password [ testproxy_mqttV5_gvt05.xml ]
FAILED: Scenario 22 - testproxy_mqttV5_gvt06 - Test ability to connect with GVT characters E3 in user/password [ testproxy_mqttV5_gvt06.xml ]
FAILED: Scenario 1 - testproxy_mqttv5_cleanstart_01 - mqttv5 connect cleanStart - ConnAck SessionPresent
FAILED: Scenario 2 - testproxy_mqttv5_pubsub_02_nonDurable - mqttv5 Pub Sub Receive 
FAILED: Scenario 3 - testproxy_mqttv5_pubsub_03_durableSession - mqttv5 Pub Sub Receive 
FAILED: Scenario 4 - testproxy_mqttv4_clientSteal_04_nonDurable - PAHO mqttv4 Pub Sub Receive with ClientId Steal
FAILED: Scenario 5 - testproxy_mqttv4_clientSteal_05_Durable - PAHO mqttv4 Pub Sub Receive with ClientId Steal
FAILED: Scenario 6 - testproxy_WSmqttv5_clientSteal_04_nonDurable - WEBSOCKET mqttv5 Pub Sub Receive with ClientId Steal 
FAILED: Scenario 7 - testproxy_mqttv5_clientSteal_04_nonDurable - PAHO mqttv5 Pub Sub Receive with ClientId Steal 
FAILED: Scenario 8 - testproxy_mqttv5_clientSteal_05_durable - mqttv5 Pub Sub Receive PAHO MQTTv5
FAILED: Scenario 9 - testproxy_WSmqttv5_clientSteal_05_durable - mqttv5 Pub Sub Receive WebSocket MQTTv5
FAILED: Scenario 2 - testproxy_mqttv5connect01 - Test MQTT/WebSocket connect to an IP address and port  +mqttv5_connect+/+ism-proxy_td-mqttv5_connect-01.sh
FAILED: Scenario 3 - testproxy_mqttv5connect03 - Test MQTT/WebSocket connect valid user/password
FAILED: Scenario 5 - testproxy_v5connect_MPS - Test MQTTV5 that we don*t exceed Maximum Packet Size specified by client
FAILED: Scenario 6 - testproxy_mqttv5connect07 - Test MQTT/WebSocket connect with Will topicmessage, publish close normally
FAILED: Scenario 7 - testproxy_mqttv5connect08 - Test MQTT/WebSocket connect with Will topicmessage and Qos=1
FAILED: Scenario 8 - testproxy_mqttv5connect09 - Test MQTT/WebSocket connect with Will topicmessage and Qos=2
FAILED: Scenario 9 - testproxy_mqttv5connect10 - Test MQTT/WebSocket connect with Will topic, message and RETAIN
FAILED: Scenario 10 - testproxy_mqttv5connect11 - Test MQTT/WebSocket connect with same clientId as already connected client
FAILED: Scenario 11 - testproxy_mqttv5connect12 - Test MQTT/WebSocket connect with Will topic, message (zero length)
FAILED: Scenario 12 - testproxy_mqttv5connect13 - Test MQTT/WebSocket connect with cleanSession=0
FAILED: Scenario 13 - testproxy_mqttv5connect14 - Test MQTT/WebSocket connect with Will topic, connect second client same clientId
FAILED: Scenario 14 - testproxy_mqttv5connect15 - Test MQTT/WebSocket connect will topic longer than 60 characters
FAILED: Scenario 15 - testproxy_mqttv5connect16 - Test MQTT connect without cleanSession, receive stored msg
FAILED: Scenario 16 - testproxy_mqttv5connect17 - Test MQTT connect with cleanSession, don*t receive stored msg
FAILED: Scenario 17 - testproxy_mqttv5connect21 - Test that message in store are available after server fail/restart [ testproxy_mqttv5connect21.xml ]
FAILED: Scenario 18 - testproxy_mqttv5connect22 - Test that RETAINed messages are available after server fail/restart [ testproxy_mqttv5connect22.xml ]
FAILED: Scenario 19 - testproxy_mqttv5connect23 - More RETAINed messages tests [ testproxy_mqttv5connect23.xml ]  +mqttv5_connect+/+ism-proxy_td-mqttv5_connect-01.sh
FAILED: runScenarios - MQTTv5 Connect via Proxy and TestDriver: Server stopped running during execution.
FAILED: Scenario 2 - proxy_mqttV5_connect_KeepAlive - Test MQTTv5 CONNECT Properties Keep Alive
FAILED: Scenario 3 - proxy_mqttV5_connect_SEI - Test MQTTv5 CONNECT Properties Session Expiry Interval
FAILED: Scenario 4 - proxy_mqttV5_publish_PFI - Test MQTTv5 Publish Properties Payload Format Indicator
FAILED: Scenario 5 - proxy_mqttV5_publish_MEI - Test MQTTv5 Publish Properties Message Expiry Interval
FAILED: Scenario 6 - proxy_mqttV5_publish_TA - Test MQTTv5 Publish Properties TopicAlias
FAILED: Scenario 7 - proxy_mqttV5_publish_RT - Test MQTTv5 Publish Properties ResponseTopic
FAILED: Scenario 8 - proxy_mqttV5_publish_CD - Test MQTTv5 Publish Properties CorrelationData
FAILED: Scenario 9 - proxy_mqttV5_publish_UP - Test MQTTv5 Publish Properties UserProperty
FAILED: Scenario 10 - proxy_mqttV5_publish_SI - Test MQTTv5 Publish Properties SubscriptionIdentifier
FAILED: Scenario 11 - proxy_mqttV5_publish_CT - Test MQTTv5 Publish Properties ContentType
FAILED: Scenario 12 - proxy_mqttV5_pubPropError_PFI - Test MQTTv5 Publish Properties Payload Format Indicator
FAILED: Scenario 13 - proxy_mqttV5_pubPropError_TA - Test MQTTv5 Publish Properties TopicAlias Errors
FAILED: Scenario 14 - proxy_mqttV5_pubPropError_SI - Test MQTTv5 Publish Properties SubscriptionIdentifiers Errors
FAILED: Scenario 15 - proxy_mqttV5_subscribe_UP - Test MQTTv5 Subscribe Properties User Property
FAILED: Scenario 16 - proxy_mqttV5_unsubscribe_UP - Test MQTTv5 Unsubscribe Properties User Property
FAILED: Scenario 17 - proxy_mqttV5_subOptions_NoLocal - Test MQTTv5 Subscribe Options - No Local
FAILED: Scenario 18 - proxy_mqttV5_subOptionsError_NoLocal - Test MQTTv5 Subscribe Options Errors with No Local
FAILED: Scenario 19 - proxy_mqttV5_subOptions_RetainAsPub - Test MQTTv5 Subscribe Options RetainAsPublish
FAILED: Scenario 20 - proxy_mqttV5_subOptions_RetainAsPub_share - Test MQTTv5 Subscribe Options RetainAsPublish on Shared Subscription
FAILED: Scenario 21 - proxy_mqttV5_subOptions_RetainHandling - Test MQTTv5 Subscribe Options - RetainHandling
FAILED: Scenario 22 - proxy_mqttV5_subOptionsError_RetainHandling - Test MQTTv5 Subscribe Options - RetainHandling Errors
FAILED: Scenario 1 - testproxy_publishV3_01 - Test RETAIN, simple scenario v3 publisher
FAILED: Scenario 2 - testproxy_publishV5_01 - Test RETAIN, simple scenario v5 publisher
FAILED: Scenario 3 - testproxy_publishV3_02 - Test RETAIN replaced v3 publisher
FAILED: Scenario 4 - testproxy_publishV5_02 - Test RETAIN replaced v5 publisher
FAILED: Scenario 5 - testproxy_publishV3_03 - Test RETAIN, receive RETAIN and as NON_RETAIN
FAILED: Scenario 6 - testproxy_publishV5_03 - Test RETAIN, receive RETAIN and as NON_RETAIN
FAILED: Scenario 7 - testproxy_publishV3_04 - Test RETAIN, Durable Subs receive as NON_RETAIN
FAILED: Scenario 8 - testproxy_publishV5_04 - Test RETAIN, Durable Subs receive as NON_RETAIN
FAILED: Scenario 9 - testproxy_publishV5_05 - Test Message Expiry PAHO
FAILED: Scenario 10 - testWSproxy_publishV5_05 - Test Message Expiry WebSockets
FAILED: Scenario 11 - testproxy_publishV5_06 - Test RETAIN and Message Expiry PAHO
FAILED: Scenario 12 - testWSproxy_publishV5_06 - Test RETAIN and Message Expiry WebSockets
FAILED: Scenario 2 - testproxyV5_MPSwRC - Test MQTTv5 MaxPacketSz exceeded with ReasonCode
FAILED: Scenario 3 - testproxy_mqttV5_rc016 - Test rc016 No matching Subscribers
FAILED: Scenario 4 - testproxy_mqttV5_rc017 - Test rc017 No Subscription Existed
FAILED: Scenario 5 - testproxy_mqttV5_rc130 - Test rc130 Protocol Error
FAILED: Scenario 6 - testproxy_mqttV5_rc133 - Test rc133 Client Identified not valid
FAILED: Scenario 7 - testproxy_mqttV5_rc135 - Test rc135 Not Authorized
FAILED: Scenario 9 - testproxy_mqttV5_rc139 - Test rc139 Server Stopping
FAILED: Scenario 10 - testproxy_mqttV5_rc141 - Test rc139 Server Stopping
FAILED: Scenario 11 - testproxy_mqttV5_rc143 - Test rc143 TopicFilter
FAILED: Scenario 12 - testproxy_mqttV3_rc143 - Test rc143 TopicFilter
FAILED: Scenario 13 - testproxy_WSmqttV5_rc143 - Test rc143 TopicFilter
FAILED: Scenario 14 - testproxy_mqttV5_rc144 - Test rc144 TopicFilter
FAILED: Scenario 2 - proxymqttV5_sharedSub_SubId - Test @SharedSubscriptions (w-w/o WCs) with SubIDs
FAILED: Scenario 3 - proxymqttV5_publishV3_PubUpV5 - MQTTv3 PUB upgrade v3 to V5 Pub
FAILED: Scenario 4 - proxymqttV5_publishV3_SubUpV5 - MQTTv3 SUB upgrade v3 to V5 Sub
FAILED: Scenario 1 - testproxy_sharedMix_csF_error01 - MQTTv5 Test basic Errors in or MQTTv5 shared subs using a durable subscriber. 
FAILED: Scenario 2 - testproxy_sharedMix_csF_error02 - MQTTv5 Test connect, disconnect, reconnect, and ClientID theft conditions for MQTTv5 shared subs using a durable subscriber. 
FAILED: Scenario 3 - testproxy_sharedMix_csT_error01 - MQTTv5 Test basic Errors in or MQTTv5 shared subs using a non-durable subscriber. 
FAILED: Scenario 4 - testproxy_sharedMix_csT_error02 - MQTTv5 Test connect, disconnect,and ClientID theft conditions for MQTTv5 shared subs using a non-durable subscriber. 
FAILED: Scenario 5 - testproxy_sharedMix_error03 - MQTTv5 Test creation and distruction of MQTTv5  subscriptions using cleansession clients in all different orders 
FAILED: Scenario 6 - testproxy_sharedMix_01 - MQTTv5 SharedMix - check different subs on different topics with same subname 
FAILED: Scenario 7 - testproxy_sharedMix_02 - MQTTv5 Basic test of mixed-durability sharedsubs - subscribing and messaging. 
FAILED: Scenario 8 - testproxy_sharedMix_03 - MQTTv5 Clients reconnecting and receiving after server restart. 
FAILED: Scenario 9 - testproxy_sharedMix_04 - MQTTv5 Clients reconnecting and receiving after server restart - bigger test with multiple subs and more messages. 
FAILED: Scenario 10 - testproxy_sharedMix_05 - MQTTv5 Redelivery of in-flight msg on client disconnect. 
FAILED: Scenario 11 - testproxy_sharedMix_06 - MQTTv5 Wildcard subscriptions for share subs. 
FAILED: Scenario 12 - testproxy_sharedMix_07ND - MQTTv5 Busy share test with many subscribes-unsubscribes, nondurable. 
FAILED: Scenario 13 - testproxy_sharedMix_07D - MQTTv5 Busy share test with many subscribes-unsubscribes, nondurable. 
FAILED: Scenario 14 - testproxy_sharedMix_09 - MQTTv5 New Retained Messages behavior - shared durable should not receive RMs when create sub or on reconnect.

BRIDGE:  PCOUNT: 27   FCOUNT: 3
BRIDGE:  PCOUNT: 29   FCOUNT: 4
PROXY:  PCOUNT: 91   FCOUNT: 212
CCI_CentOS7_Docker:  PCOUNT: 147   FCOUNT: 219
