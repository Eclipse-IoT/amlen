
IMA Automated Framework Summary Report
==========================================================================================================================================
Build Type:       production
Server Release:   MGPROD @ 20201008-1542
Proxy Release:    MGPROD @ 20201008-1542
Client Release:   MGPROD @ 20201008-1542
Test Release:     MGPROD @ 20201008-1542
Test Group:       fvt_prod
Total Time:       11:47:45

Total Results:    Passed:  3216   Failed:   618   Success:  83.88%
                  (RC!=0 for some tests, check individual results for details)

Platform Results:
-------------------
CCI_CENTOS_DOCKER:    Passed:  3071   Failed:   397   Success:  88.55%
CCI_CENTOS_RPM:       Passed:   145   Failed:   221   Success:  39.62%

Individual Results:
-------------------
JMS:                  Passed:   734   Failed:     8   Success:  98.92%
JMS_MQTT:             Passed:    24   Failed:     4   Success:  85.71%
MQTT:                 Passed:   919   Failed:    35   Success:  96.33%
WS:                   Passed:    24   Failed:   120   Success:  16.67%
CLI:                  Passed:   804   Failed:    62   Success:  92.84%
REST_API:             Passed:     4   Failed:   124   Success:   3.12%
PROXY:                Passed:    89   Failed:   214   Success:  29.37%
MQ_CONN:              Passed:   172   Failed:     0   Success: 100.00%
HA:                   Passed:   179   Failed:    10   Success:  94.71%
CLUSTER:              Passed:   200   Failed:    19   Success:  91.32%
SNMP:                 Passed:    11   Failed:    15   Success:  42.31%

==========================================================================================================================================
=========================================== Summary of Failures by Number of Occurrences =================================================
==========================================================================================================================================
 4  to start!
 4  mqtt_clearRetained.xml - Clear all retained messages
 3  jca_api_001 - JCA api 001 - Test various JMS API*s in the RA environment
 3  SNMP Tests : ism-SNMP-tests_Core - A core file was found on A1 after running ism-SNMP-tests.
 3  RESTAPI-99-Synopsis - Synopsis of RESTAPI Execution RC=1
 3  RESTAPI-00-ResetConfig - RESTAPI for Service Reset Config
 2  testplugin_subscribe14 - Test MQTT/WebSocket subscribe to long topic (<32767 characters)
 2  testplugin_subscribe06 - Test MQTT/WebSocket subscribe to *a/b/c* with QoS=1
 2  testplugin_subscribe01 - Test MQTT/WebSocket subscribe to *#*
 2  testmqtt_gvt06 - Test ability to connect with GVT characters E3 in user/password [ testmqtt_gvt06.xml ]
 2  testmqtt_gvt03 - Test ability to connect with GVT characters in user/password [ testmqtt_gvt03.xml ]
 2  testmqtt_gvt02 - Test ability to connect over an SSL connection [ testmqtt_gvt02.xml ]
 2  testmqtt_gvt01 - Test ability use GVT characters in topic and ClientID [ testmqtt_gvt01.xml ]
 2  ssl/testmqtt_ssl09b - Test MQTT/WebSocket CommonName usage in ClientID on ConnectionPolicy with asterisk character
 2  ssl/testmqtt_ssl09a - Test MQTT/WebSocket CommonName usage in ClientID on ConnectionPolicy with asterisk character
 2  ssl/testmqtt_ssl08 - Test MQTT/WebSocket CommonName usage in ClientID on ConnectionPolicy with asterisk character
 2  ssl/testmqtt_ssl07 - Test MQTT/WebSocket CommonName usage
 2  ssl/testmqtt_ssl06 - Test MQTT/WebSocket CommonName usage
 2  ssl/testmqtt_ssl05 - Test MQTT/WebSocket CommonName usage
 2  mqtt_clearRetained.xml - Clear all retained messages with MQTTv5
 2  jsclient_sec_e9_b - User is not authorized (IPv6)
 2  jsclient_sec_e5_b - Incorrect password
 2  jsclient_sec_e3_b - User does not exist (IPv6)
 2  jsclient_sec_e2_b - User does not exist (was invalid UTF-8 test)
 2  jsclient_sec_e1_b - UserName is not specified (IPv6)
 2  jsclient_sec_e16_b - Empty userName and non-empty password
 2  jsclient_sec_e14_b - Empty userName and password
 2  jsclient_sec_e13_b - Protocol is JMS on the Endpoint (IPv6)
 2  jsclient_sec_e12_b - Protocol is JMS on the ConnectionPolicy
 2  jsclient_sec_e10_b - Insecure connection to a secure Endpoint
 2  jsclient_sec_6_b - Connect to ISM server using an authorized user (wildcards in ID on ConnectionPolicy) (IPv6)
 2  jsclient_sec_5_b - Connect to ISM server with a ConnectionPolicy that authorizes only one user
 2  jsclient_sec_4_b - Connect to ISM server with an MQTT-only Endpoint (IPv6)
 2  jsclient_sec_3_b - Connect to ISM server with an MQTT-only ConnectionPolicy
 2  jsclient_sec_2_b - Connect to ISM server with SSL disabled, using a valid, non-empty username and password (IPv6)
 2  jsclient_pubsub_e8_b - Specify a non-function for the onmessage callback for a client
 2  jsclient_pubsub_e7_b - Specify a non-function for subscribeCompleteCallback
 2  jsclient_pubsub_e6_b - Test for invalid QoS values on sub
 2  jsclient_pubsub_e4_b - Test for invalid wildcard placements on sub
 2  jsclient_pubsub_e3_b - Test for invalid retain value on pub
 2  jsclient_pubsub_e2_b - Test for invalid QoS values on pub
 2  jsclient_pubsub_e1_b - Test for invalid topic names on pub
 2  jsclient_pubsub_e16_b - Attempt to publish/subscribe on an unauthorized topic
 2  jsclient_pubsub_e15_b - Attempt to publish/subscribe on an unauthorized protocol
 2  jsclient_pubsub_e14_b - Unsubscribe from a topic with invalid wc placement
 2  jsclient_pubsub_e13_b - Test for unsubscribe with non-function callback
 2  jsclient_pubsub_8_b - Specify a subscribe complete callback (IPv6)
 2  jsclient_pubsub_5_b - Test for case-sensitivity in topic name
 2  jsclient_pubsub_4_b - Multiple topics, QoS=0 on publish (IPv6)
 2  jsclient_pubsub_3_b - QoS=2 on publish
 2  jsclient_pubsub_2_b - QoS=1 on publish (IPv6)
 2  jsclient_pubsub_27_b - Connect to an Connection/MessagingPolicy that authorizes a specific user/topic (IPv6)
 2  jsclient_pubsub_26_b - Connect to an Connection/Messaging Policy that authorizes MQTT clients only
 2  jsclient_pubsub_25_b - Connect to an Connection/Messaging Policy that authorizes clients for the MQTT and JMS protocols (IPv6)
 2  jsclient_pubsub_24_b - Test where publisher and subscriber are on different clients (synchronized)
 2  jsclient_pubsub_22_b - Unsubscribe from the same topic twice
 2  jsclient_pubsub_1_b - Basic publish/subscribe for the JavaScript Client
 2  jsclient_pubsub_19_b - No unsubscribe before disconnect
 2  jsclient_pubsub_18_b - Retained message is not the last message
 2  jsclient_pubsub_17_b - Test retained
 2  jsclient_pubsub_16_b - Mixed QoS client with wildcard subscriptions (IPv6)
 2  jsclient_pubsub_15_b - Mixed QoS topics in one client
 2  jsclient_pubsub_14_b - Mixed QoS on publish, QoS=2 on subscribe (IPv6)
 2  jsclient_pubsub_13_b - Mixed QoS on publish, QoS=1 on subscribe
 2  jsclient_pubsub_12_b - Mixed QoS on publish, QoS=0 on subscribe (IPv6)
 2  jsclient_pubsub_11_b - Wildcard subscriptions
 2  jsclient_pubsub_10_b - Specify various callbacks for onsubscribe (IPv6)
 2  jsclient_gvt_4_b - GVT: Will Topic and Message test
 2  jsclient_gvt_3_b - GVT: userName and password test
 2  jsclient_gvt_2_b - GVT: Topic name test
 2  jsclient_gvt_1_b - GVT: ClientID test
 2  jsclient_connect_e12_b - Create an Endpoint that does not have a ConnectionPolicy -  CLI
 2  jsclient_connect_e11_b - Connect to a server with an Endpoint that does not allow the MQTT protocol
 2  jsclient_connect_e10_b - Connect to a server with a connection policy that does not allow the MQTT protocol
 2  jsclient_connect_6_b - Connect to a server with a connection policy that only allows the MQTT protocol
 2  jsclient_connect_5_b - Connect with a non-unique clientId (synchronized) (IPv6)
 2  jsclient_connect_4_b - Connect with multiple clients (synchronized)
 2  jsclient_connect_3_b - Connect with a single space as the clientId (IPv6)
 2  jsclient_connect_2_b - Connect using a clientId with a space and other chars
 2  jsclient_connect_1_b - Connect with a single char clientId (IPv6)
 2  jms_oauth_010_truststore - Test 10 - OAuth Test 10 with TrustStore set
 2  jms_mqtt_001 JMS to MQTT - Test 1 with Unicode Topic Name and RETAINED. [ jms_mqtt_001.xml ]
 2  jca_ssltopic_003 - JCA SSL Topic 003
 2  deleteAllRetained0 - Delete any RETAINed messages, error if any exist
 2  cli_stat_topics_test_016 - validate stat command.
 2  cli_stat_topics_test_008 - validate stat command.
 2  cli_stat_topics_test_007 - send test data to topic
 2  cli_security_test_012 - should work after ep gets new security profile
 2  cli_security_test_008 - send should work
 2  cli_security_test_006 - send test data to topic - client auth
 2  cli_security_test_003 - send test data to topic
 2  cli_security_test_002 - send test data to topic
 2  cli_security_test_001 - send test data to topic
 2  cli_GVT_MQTT_AUTO_ID_45 - policy test ID_45
 2  cli_GVT_MQTT_AUTO_ID_43 - policy test ID_43
 2  cli_GVT_MQTT_AUTO_ID_40 - policy test ID_40
 2  cli_GVT_MQTT_AUTO_ID_4 - policy test ID_4
 2  cli_GVT_MQTT_AUTO_ID_38 - policy test ID_38
 2  cli_GVT_MQTT_AUTO_ID_37 - policy test ID_37
 2  cli_GVT_MQTT_AUTO_ID_36 - policy test ID_36
 2  cli_GVT_MQTT_AUTO_ID_31 - policy test ID_31
 2  cli_GVT_MQTT_AUTO_ID_29 - policy test ID_29
 2  cli_GVT_MQTT_AUTO_ID_26 - policy test ID_26
 2  cli_GVT_MQTT_AUTO_ID_25 - policy test ID_25
 2  cli_GVT_MQTT_AUTO_ID_24 - policy test ID_24
 2  cli_GVT_MQTT_AUTO_ID_20 - policy test ID_20
 2  cli_GVT_MQTT_AUTO_ID_2 - policy test ID_2
 2  cli_GVT_MQTT_AUTO_ID_18 - policy test ID_18
 2  cli_GVT_MQTT_AUTO_ID_17 - policy test ID_17
 2  cli_GVT_MQTT_AUTO_ID_16 - policy test ID_16
 2  cli_GVT_MQTT_AUTO_ID_15 - policy test ID_15
 2  cli_GVT_MQTT_AUTO_ID_14 - policy test ID_14
 2  cli_GVT_MQTT_AUTO_ID_13 - policy test ID_13
 2  cli_GVT_MQTT_AUTO_ID_12 - policy test ID_12
 2  cli_GVT_MQTT_AUTO_ID_11 - policy test ID_11
 2  bridgePx.SimpleA1A2 - Test Simple Pub-Fwd-Recv through Bridge   bridge_tests/proxy/ism-Bridge-Proxy01.sh
 2  bridgePx.MultiFWD_V3Source - Test Multile Forwarders with V3 Source Bridge   bridge_tests/proxy/ism-Bridge-Proxy01.sh
 2  bridgePx.MaxFWDTopics - Test Max Forwarder Topics Bridge   bridge_tests/proxy/ism-Bridge-Proxy01.sh
 2  SNMP_verify_endpoint_info - Verify Endpoint Information
 2  SNMP Tests : Server stopped running during execution.
 2  RESTAPI-93-QueueManagerConnection - RESTAPI for QueueManagerConnection
 2  RESTAPI-92-MQConnectivityLog - RESTAPI for MQConnectivityLog
 2  RESTAPI-91-MQConnectivityEnabled - RESTAPI for MQConnectivityEnabled
 2  RESTAPI-90-DestinationMappingRule - RESTAPI for DestinationMappingRule
 2  RESTAPI-83-TolerateRecoveryInconsistencies - RESTAPI for TolerateRecoveryInconsistencies
 2  RESTAPI-82-XATransaction - RESTAPI for XATransaction
 2  RESTAPI-81-ServerUID - RESTAPI for ServerUID
 2  RESTAPI-80-ServerName - RESTAPI for ServerName
 2  RESTAPI-72-SessionExpiry - server monitoring and MQTT clients for session expiration
 2  RESTAPI-71-ClientSet - RESTAPI for OrgMove ClientSet:Import,Export,Delete ErrorPath
 2  RESTAPI-70-ClientSetScale - RESTAPI for ClientSet Scale and ForceDelete
 2  RESTAPI-65-LicensedUsage - RESTAPI for LicensedUsage
 2  RESTAPI-64-EnableDiskPersistence - RESTAPI for EnableDiskPersistence
 2  RESTAPI-63-ClusterMembership - RESTAPI for ClusterMembership
 2  RESTAPI-62-AdminUserPassword - RESTAPI for AdminUserPassword
 2  RESTAPI-61-AdminUserID - RESTAPI for AdminUserID
 2  RESTAPI-51-CRLProfile - RESTAPI for CRLProfile
 2  RESTAPI-50-PreSharedKey - RESTAPI for PreSharedKey
 2  RESTAPI-49-TrustedCertificate - RESTAPI for TrustedCertificate
 2  RESTAPI-48-ClientCertificate - RESTAPI for ClientCertificate
 2  RESTAPI-47-SecurityProfile - RESTAPI for SecurityProfile
 2  RESTAPI-46-OAuthProfile - RESTAPI for OAuthProfile
 2  RESTAPI-45-LTPAProfile - RESTAPI for LTPAProfile
 2  RESTAPI-44-LDAP - RESTAPI for LDAP
 2  RESTAPI-43-FIPS - RESTAPI for FIPS
 2  RESTAPI-42-ConfigurationPolicy - RESTAPI for ConfigurationPolicy
 2  RESTAPI-41-CertificateProfile - RESTAPI for CertificateProfile
 2  RESTAPI-40-AdminEndpoint - RESTAPI for AdminEndpoint
 2  RESTAPI-35-PluginVMArgs - RESTAPI for PluginVMArgs
 2  RESTAPI-34-PluginServer - RESTAPI for PluginServer
 2  RESTAPI-33-PluginPort - RESTAPI for PluginPort
 2  RESTAPI-32-PluginMaxHeapSize - RESTAPI for PluginMaxHeapSize
 2  RESTAPI-31-PluginDebugServer - RESTAPI for PluginDebugServer
 2  RESTAPI-30-PluginDebugPort - RESTAPI for PluginDebugPort
 2  RESTAPI-29-Plugin - RESTAPI for Plugin
 2  RESTAPI-28-SubscriptionPolicy - RESTAPI for SubscriptionPolicy
 2  RESTAPI-27-QueuePolicy - RESTAPI for QueuePolicy
 2  RESTAPI-26-TopicPolicy - RESTAPI for TopicPolicy
 2  RESTAPI-24-Queue - RESTAPI for Queue
 2  RESTAPI-23-Endpoint - RESTAPI for Endpoint
 2  RESTAPI-21-ConnectionPolicy - RESTAPI for ConnectionPolicy
 2  RESTAPI-20-MessageHub - RESTAPI for MessageHub
 2  RESTAPI-15-Syslog - RESTAPI for Syslog
 2  RESTAPI-14-LogLocation - RESTAPI for LogLocation
 2  RESTAPI-13-TraceSelected - RESTAPI for TraceSelected
 2  RESTAPI-12-TraceOptions - RESTAPI for TraceOptions
 2  RESTAPI-11-TraceMessageData - RESTAPI for TraceMessageData
 2  RESTAPI-10-TraceMax - RESTAPI for TraceMax
 2  RESTAPI-09-TraceLevel - RESTAPI for TraceLevel
 2  RESTAPI-08-TraceConnection - RESTAPI for TraceConnection
 2  RESTAPI-07-TraceBackupDestination - RESTAPI for TraceBackupDestination
 2  RESTAPI-06-TraceBackupCount - RESTAPI for TraceBackupCount
 2  RESTAPI-05-TraceBackup - RESTAPI for TraceBackup
 2  RESTAPI-04-SecurityLog - RESTAPI for SecurityLog
 2  RESTAPI-03-LogLevel - RESTAPI for LogLevel
 2  RESTAPI-02-ConnectionLog - RESTAPI for ConnectionLog
 2  RESTAPI-01-AdminLog - RESTAPI for AdminLog
 2  RESTAPI-00-ServiceResetConfigComplete - RESTAPI for Service ResetConfig Complete
 2  RESTAPI-00-Service - RESTAPI for Service
 2  Clear any retained messages before running JMS Wildcard tests [ mqtt_clearRetained.xml ]
 1  testproxy_v5connect_MPS - Test MQTTV5 that we don*t exceed Maximum Packet Size specified by client
 1  testproxy_tls09_ProxyDfltStore_CltCrtExactMatchg - Test TLS connections succeed for SGEnabled=false config when client cert store contains dflt proxy cert and client cert CN exactly matches client ID [ testproxy_tls09_ProxyDfltStore_CltCrtExactMatchg.xml ]
 1  testproxy_tls09_ProxyDfltStore_CltCrtExactMatchg - Test TLS connections succeed for SGEnabled=false config when client cert store contains dflt proxy cert and CN exact matching client cert. Also check that connections succeed when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls09_ProxyDfltStore_CltCrtExactMatchg.xml ]
 1  testproxy_tls08c_ClientCert1CrtInDERCRL - Test ability to connect to Proxy TLS port using client certificate authentication with DER format CRL and 1 reovoked cert - conn should succeed for cert that is not revoked [ testproxy_tls08c_ClientCert1CrtInDERCRL.xml ]
 1  testproxy_tls08b_ClientCert1CrtInDERCRL - Test ability to connect to Proxy TLS port using client certificate authentication with DER format CRL and 1 reovoked cert - conn should succeed for cert that is not revoked [ testproxy_tls08b_ClientCert1CrtInDERCRL.xml ]
 1  testproxy_tls08_ProxyDfltStore_CltCrtPartialMatchg - Test TLS connections succeed for SGEnabled=true config when client cert store contains dflt proxy cert and SAN partial matching client cert. Also check that connections succeed when partial match betw CN/SAN & clientId is required and failes when exact match is required. [ testproxy_tls08_ProxyDfltStore_CltCrtPartialMatchg.xml ]
 1  testproxy_tls08_ProxyDfltStore_CltCrtPartialMatchg - Test TLS connections succeed for SGEnabled=false config when client cert store contains dflt proxy cert and client cert SAN partially matches client ID [ testproxy_tls08_ProxyDfltStore_CltCrtPartialMatchg.xml ]
 1  testproxy_tls07s_OrgSrvStore_CltCrtExactMatchg - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert and client cert CN exactly matches client ID. Also check that connection succeeds when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls07s_OrgSrvStore_CltCrtExactMatchg.xml ]
 1  testproxy_tls07s_OrgSrvStore_CltCrtExactMatchg - Test TLS connections succeed for SGEnabled=false config with org server cert when client cert store contains dflt proxy cert and client cert CN exactly matches client ID [ testproxy_tls07s_OrgSrvStore_CltCrtExactMatchg.xml ]
 1  testproxy_tls07c_ClientCertEmptyDERCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty DER format CRL (cert 3 of 3) [ testproxy_tls07c_ClientCertEmptyDERCRL.xml ]
 1  testproxy_tls07b_ClientCertEmptyDERCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty DER format CRL (cert 2 of 3) [ testproxy_tls07b_ClientCertEmptyDERCRL.xml ]
 1  testproxy_tls07a_ClientCertEmptyDERCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty DER format CRL (cert 1 of 3) [ testproxy_tls07a_ClientCertEmptyDERCRL.xml ]
 1  testproxy_tls07_ProxyDfltStore_CltCrtExactMatchd - Test TLS connections succeed for SGEnabled=true config when client cert store contains dflt proxy cert and SAN exact matching client cert. Also check that connections succeed when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls07_ProxyDfltStore_CltCrtExactMatchd.xml ]
 1  testproxy_tls07_ProxyDfltStore_CltCrtExactMatchd - Test TLS connections succeed for SGEnabled=false config when client cert store contains dflt proxy cert and client cert SAN exactly matches client ID [ testproxy_tls07_ProxyDfltStore_CltCrtExactMatchd.xml ]
 1  testproxy_tls06s_OrgSrvStore_CltCrtPartialMatchg - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert and client cert SAN partially matches client ID. Also check that connection succeeds when partial match betw CN/SAN & clientId is required and fails when exact match is required. [ testproxy_tls06s_OrgSrvStore_CltCrtPartialMatchg.xml ]
 1  testproxy_tls06s_OrgSrvStore_CltCrtPartialMatchg - Test TLS connections succeed for SGEnabled=false config with org server cert when client cert store contains dflt proxy cert and client cert SAN partially matches client ID [ testproxy_tls06s_OrgSrvStore_CltCrtPartialMatchg.xml ]
 1  testproxy_tls06c_ClientCert2CrtsInCRL - Test ability to connect to Proxy TLS port using client certificate authentication with CRL and 2 reovoked certs - conn for non-revoked cert should succeed [ testproxy_tls06c_ClientCert2CrtsInCRL.xml ]
 1  testproxy_tls06_ProxyDfltStore_CltCrtPartialMatchd - Test TLS connections succeed for SGEnabled=true config when client cert store contains dflt proxy cert and CN partial matching client cert. Also test connections succeed when partial match betw CN/SAN & clientId is required and fails when exact match is required. [ testproxy_tls06_ProxyDfltStore_CltCrtPartialMatchd.xml ]
 1  testproxy_tls06_ProxyDfltStore_CltCrtPartialMatchd - Test TLS connections succeed for SGEnabled=false config when client cert store contains dflt proxy cert and client cert CN partially matches client ID [ testproxy_tls06_ProxyDfltStore_CltCrtPartialMatchd.xml ]
 1  testproxy_tls05s_OrgSrvStore_CltCrtExactMatchd - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert and client cert SAN exactly matches client ID. Also check that connection succeeds when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls05s_OrgSrvStore_CltCrtExactMatchd.xml ]
 1  testproxy_tls05s_OrgSrvStore_CltCrtExactMatchd - Test TLS connections succeed for SGEnabled=false config with org server cert when client cert store contains dflt proxy cert and client cert SAN exactly matches client ID [ testproxy_tls05s_OrgSrvStore_CltCrtExactMatchd.xml ]
 1  testproxy_tls05c_ClientCertEmptyCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty CRL (cert 3 of 3) [ testproxy_tls05c_ClientCertEmptyCRL.xml ]
 1  testproxy_tls05b_ClientCertEmptyCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty CRL (cert 2 of 3) [ testproxy_tls05b_ClientCertEmptyCRL.xml ]
 1  testproxy_tls05a_ClientCertEmptyCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty CRL (cert 1 of 3) [ testproxy_tls05a_ClientCertEmptyCRL.xml ]
 1  testproxy_tls05_ProxyDfltStore_CltCrtNoMatch - Test TLS connections succeed for SGEnabled=true config when client cert store contains dflt proxy cert and non-matching client cert. Also test connections fail when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls05_ProxyDfltStore_CltCrtNoMatch.xml ]
 1  testproxy_tls04s_OrgSrvStore_CltCrtPartialMatchd - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert and client cert CN partially matches client ID. Also check that connection succeeds when partial match betw CN/SAN & clientId is required and fails when exact match is required. [ testproxy_tls04s_OrgSrvStore_CltCrtPartialMatchd.xml ]
 1  testproxy_tls04s_OrgSrvStore_CltCrtPartialMatchd - Test TLS connections succeed for SGEnabled=false config with org server cert when client cert store contains dflt proxy cert and client cert CN partially matches client ID [ testproxy_tls04s_OrgSrvStore_CltCrtPartialMatchd.xml ]
 1  testproxy_tls04_MqttsEpStore_WithUser - Test ability to connect to Proxy TLS port with a user [ testproxy_tls04_MqttsEpStore_WithUser.xml ]
 1  testproxy_tls03s_OrgSrvStore_CltCrtNoMatch - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert and non-matching client cert. Also check that connections fail when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls03s_OrgSrvStore_CltCrtNoMatch.xml ]
 1  testproxy_tls03_MqttsEpStore - Test ability to connect to Proxy TLS port [ testproxy_tls03_MqttsEpStore.xml ]
 1  testproxy_tls03_MqttsEpStore - Test TLS connections succeed for SGEnabled=true config when client cert store contains mqtts ep cert only [ testproxy_tls03_MqttsEpStore.xml ]
 1  testproxy_tls02s_OrgSrvStore - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert only [ testproxy_tls02s_OrgSrvStore.xml ]
 1  testproxy_tls02_WrongStore - Test ability to connect to Proxy TLS port with wrong cert in store for self signed server cert - conn should fail [ testproxy_tls02_WrongStore.xml ]
 1  testproxy_tls01_NoTLS - Test that non-TLS connections succeed for SGEnabled=true configuration [ testproxy_tls01_NoTLS.xml ]
 1  testproxy_tls01_NoStore - Test ability to connect to Proxy TLS port with no store and self signed server cert - conn should fail [ testproxy_tls01_NoStore.xml ]
 1  testproxy_tenant07-iot2 - Connect device on iot2, check Registered Org rules
 1  testproxy_tenant06-quickstart2 - Connect application quickstart2, check QuickStart Rules
 1  testproxy_tenant05-quickstart2 - Connect application and device on quickstart2, only device publish and only application subscribe
 1  testproxy_tenant04-quickstart2 - Connect an application on Quickstart2 requiring no user/password, test that tenant name is properly added in topic sent on to MessageSight
 1  testproxy_tenant03-quickstart2 - Connect a device on Quickstart2 requiring no user/password, test that tenant name is properly added in topic sent on to MessageSight
 1  testproxy_tenant02-iot2 - Connect an application on IoT2 requiring user/password, test that tenant name is properly added in topic sent on to MessageSight, test that tenant not in cfg files fails
 1  testproxy_tenant01-iot2 - Connect a device on IoT2 requiring user/password, test that no user/password fails, test that org name is properly added in topic sent on to MessageSight
 1  testproxy_subscribe23 - Test publish and receive with 0 length message
 1  testproxy_subscribe22 - Test MQTT test subscribe to /a/c/+
 1  testproxy_subscribe21 - Test MQTT test subscribe, close, subscribe
 1  testproxy_subscribe20 - Test MQTT test subscribe to +
 1  testproxy_subscribe17 - Test MQTT 1)Subscribe to same specific topic twice, should only receive messages once
 1  testproxy_subscribe16 - Test MQTT/WebSocket subscribe send 1600 messages on each of two topics
 1  testproxy_subscribe15 - Test MQTT/WebSocket subscribe to long topic (<32767 characters)
 1  testproxy_subscribe14 - Test MQTT/WebSocket subscribe to long topic (<32767 characters)
 1  testproxy_subscribe13 - Test MQTT/WebSocket subscribe to *a/b/c* QoS=0 publish QoS=1 and Qos=2
 1  testproxy_subscribe11 - Test MQTT/WebSocket subscribe to *a/b/c* QoS=0
 1  testproxy_subscribe10 - Test MQTT/WebSocket subscribe to *a/b/c* and *a/b/+*, make sure a/b/c messages are not delivered twice
 1  testproxy_subscribe09 - Test MQTT/WebSocket subscribe to *a/b/c* with QoS=1 and *a/b/d* with QoS=0
 1  testproxy_subscribe08 - Test MQTT/WebSocket subscribe to *a/b/c* and *a/b/d*
 1  testproxy_subscribe07 - Test MQTT/WebSocket subscribe to *a/b/c* with QoS=2
 1  testproxy_subscribe06 - Test MQTT/WebSocket subscribe to *a/b/c* with QoS=1
 1  testproxy_subscribe05 - Test MQTT/WebSocket subscribe to 50 level topic
 1  testproxy_subscribe04 - Test MQTT/WebSocket subscribe to *a/+/c*
 1  testproxy_subscribe03 - Test MQTT/WebSocket subscribe to *a/#*
 1  testproxy_subscribe02 - Test MQTT/WebSocket subscribe to *a/b/c*
 1  testproxy_subscribe01 - Test MQTT/WebSocket subscribe to *#*
 1  testproxy_sharedMix_error03 - MQTTv5 Test creation and distruction of MQTTv5  subscriptions using cleansession clients in all different orders
 1  testproxy_sharedMix_csT_error02 - MQTTv5 Test connect, disconnect,and ClientID theft conditions for MQTTv5 shared subs using a non-durable subscriber.
 1  testproxy_sharedMix_csT_error01 - MQTTv5 Test basic Errors in or MQTTv5 shared subs using a non-durable subscriber.
 1  testproxy_sharedMix_csF_error02 - MQTTv5 Test connect, disconnect, reconnect, and ClientID theft conditions for MQTTv5 shared subs using a durable subscriber.
 1  testproxy_sharedMix_csF_error01 - MQTTv5 Test basic Errors in or MQTTv5 shared subs using a durable subscriber.
 1  testproxy_sharedMix_09 - MQTTv5 New Retained Messages behavior - shared durable should not receive RMs when create sub or on reconnect.
 1  testproxy_sharedMix_07ND - MQTTv5 Busy share test with many subscribes-unsubscribes, nondurable.
 1  testproxy_sharedMix_07D - MQTTv5 Busy share test with many subscribes-unsubscribes, nondurable.
 1  testproxy_sharedMix_06 - MQTTv5 Wildcard subscriptions for share subs.
 1  testproxy_sharedMix_05 - MQTTv5 Redelivery of in-flight msg on client disconnect.
 1  testproxy_sharedMix_04 - MQTTv5 Clients reconnecting and receiving after server restart - bigger test with multiple subs and more messages.
 1  testproxy_sharedMix_03 - MQTTv5 Clients reconnecting and receiving after server restart.
 1  testproxy_sharedMix_02 - MQTTv5 Basic test of mixed-durability sharedsubs - subscribing and messaging.
 1  testproxy_sharedMix_01 - MQTTv5 SharedMix - check different subs on different topics with same subname
 1  testproxy_retain02 - Test MQTT/WebSocket connect with Will topic, message and RETAIN
 1  testproxy_retain01 - Test MQTT/WebSocket connect with Will topicmessage and Qos=1
 1  testproxy_publishV5_06 - Test RETAIN and Message Expiry PAHO
 1  testproxy_publishV5_05 - Test Message Expiry PAHO
 1  testproxy_publishV5_04 - Test RETAIN, Durable Subs receive as NON_RETAIN
 1  testproxy_publishV5_03 - Test RETAIN, receive RETAIN and as NON_RETAIN
 1  testproxy_publishV5_02 - Test RETAIN replaced v5 publisher
 1  testproxy_publishV5_01 - Test RETAIN, simple scenario v5 publisher
 1  testproxy_publishV3_04 - Test RETAIN, Durable Subs receive as NON_RETAIN
 1  testproxy_publishV3_03 - Test RETAIN, receive RETAIN and as NON_RETAIN
 1  testproxy_publishV3_02 - Test RETAIN replaced v3 publisher
 1  testproxy_publishV3_01 - Test RETAIN, simple scenario v3 publisher
 1  testproxy_publish08 - Test RETAIN, if already subscribed/ durable, RETAIN flag should be off  +publish+/+ism-proxy_td-publishScenarios01.sh
 1  testproxy_publish07 - Test RETAIN, if already subscribed, RETAIN flag should be off  +publish+/+ism-proxy_td-publishScenarios01.sh
 1  testproxy_publish06 - Test RETAIN, second message replaces first  +publish+/+ism-proxy_td-publishScenarios01.sh
 1  testproxy_publish05 - Test RETAIN, simple scenario  +publish+/+ism-proxy_td-publishScenarios01.sh
 1  testproxy_mqttv5connect23 - More RETAINed messages tests [ testproxy_mqttv5connect23.xml ]  +mqttv5_connect+/+ism-proxy_td-mqttv5_connect-01.sh
 1  testproxy_mqttv5connect22 - Test that RETAINed messages are available after server fail/restart [ testproxy_mqttv5connect22.xml ]
 1  testproxy_mqttv5connect21 - Test that message in store are available after server fail/restart [ testproxy_mqttv5connect21.xml ]
 1  testproxy_mqttv5connect17 - Test MQTT connect with cleanSession, don*t receive stored msg
 1  testproxy_mqttv5connect16 - Test MQTT connect without cleanSession, receive stored msg
 1  testproxy_mqttv5connect15 - Test MQTT/WebSocket connect will topic longer than 60 characters
 1  testproxy_mqttv5connect14 - Test MQTT/WebSocket connect with Will topic, connect second client same clientId
 1  testproxy_mqttv5connect13 - Test MQTT/WebSocket connect with cleanSession=0
 1  testproxy_mqttv5connect12 - Test MQTT/WebSocket connect with Will topic, message (zero length)
 1  testproxy_mqttv5connect11 - Test MQTT/WebSocket connect with same clientId as already connected client
 1  testproxy_mqttv5connect10 - Test MQTT/WebSocket connect with Will topic, message and RETAIN
 1  testproxy_mqttv5connect09 - Test MQTT/WebSocket connect with Will topicmessage and Qos=2
 1  testproxy_mqttv5connect08 - Test MQTT/WebSocket connect with Will topicmessage and Qos=1
 1  testproxy_mqttv5connect07 - Test MQTT/WebSocket connect with Will topicmessage, publish close normally
 1  testproxy_mqttv5connect03 - Test MQTT/WebSocket connect valid user/password
 1  testproxy_mqttv5connect01 - Test MQTT/WebSocket connect to an IP address and port  +mqttv5_connect+/+ism-proxy_td-mqttv5_connect-01.sh
 1  testproxy_mqttv5_pubsub_03_durableSession - mqttv5 Pub Sub Receive
 1  testproxy_mqttv5_pubsub_02_nonDurable - mqttv5 Pub Sub Receive
 1  testproxy_mqttv5_clientSteal_05_durable - mqttv5 Pub Sub Receive PAHO MQTTv5
 1  testproxy_mqttv5_clientSteal_04_nonDurable - PAHO mqttv5 Pub Sub Receive with ClientId Steal
 1  testproxy_mqttv5_cleanstart_01 - mqttv5 connect cleanStart - ConnAck SessionPresent
 1  testproxy_mqttv5_14_GVT - MQTTv5 publish GVT user properties
 1  testproxy_mqttv5_14 - MQTTv5 publish user properties
 1  testproxy_mqttv5_13 - MQTTv5 publish many messages
 1  testproxy_mqttv5_12 - MQTTv5 Will delay - clientSteals and Clean Session
 1  testproxy_mqttv5_11 - MQTTv5 Will delay - create new connection before delay - no send
 1  testproxy_mqttv5_10 - MQTTv5 session expiry across server restart
 1  testproxy_mqttv5_09b - MQTTv5 Disconnect with rc=4 to publish will msg after delay
 1  testproxy_mqttv5_09 - MQTTv5 Disconnect with rc=4 to publish will msg after delay
 1  testproxy_mqttv5_08 - MQTTv5 Abnormal disconnect to send will message with will delay
 1  testproxy_mqttv5_07 - MQTTv5 Normal disconnect does not send will message with will delay
 1  testproxy_mqttv5_05 - mqttv5 session expiry with connection policy
 1  testproxy_mqttv5_04 - mqttv5 Connect, Disconnect with Expiry
 1  testproxy_mqttv5_02 - mqttv5 publish, subscribe, receive
 1  testproxy_mqttv5_01b - PAHO mqttv5 connect01b
 1  testproxy_mqttv5_01 - WS mqttv5 connect01
 1  testproxy_mqttv4_clientSteal_05_Durable - PAHO mqttv4 Pub Sub Receive with ClientId Steal
 1  testproxy_mqttv4_clientSteal_04_nonDurable - PAHO mqttv4 Pub Sub Receive with ClientId Steal
 1  testproxy_mqttV5_rc144 - Test rc144 TopicFilter
 1  testproxy_mqttV5_rc143 - Test rc143 TopicFilter
 1  testproxy_mqttV5_rc141 - Test rc139 Server Stopping
 1  testproxy_mqttV5_rc139 - Test rc139 Server Stopping
 1  testproxy_mqttV5_rc135 - Test rc135 Not Authorized
 1  testproxy_mqttV5_rc133 - Test rc133 Client Identified not valid
 1  testproxy_mqttV5_rc130 - Test rc130 Protocol Error
 1  testproxy_mqttV5_rc017 - Test rc017 No Subscription Existed
 1  testproxy_mqttV5_rc016 - Test rc016 No matching Subscribers
 1  testproxy_mqttV5_gvt06 - Test ability to connect with GVT characters E3 in user/password [ testproxy_mqttV5_gvt06.xml ]
 1  testproxy_mqttV5_gvt05 - Test ability to connect with GVT characters C4 in user/password [ testproxy_mqttV5_gvt05.xml ]
 1  testproxy_mqttV5_gvt03 - Test ability to connect with GVT characters in user/password [ testproxy_mqttV5_gvt03.xml ]
 1  testproxy_mqttV5_gvt02 - Test ability to connect over an SSL connection [ testproxy_mqttV5_gvt02.xml ]
 1  testproxy_mqttV5_gvt01 - Test ability use GVT characters in topic and ClientID [ testproxy_mqttV5_gvt01.xml ]
 1  testproxy_mqttV3_rc143 - Test rc143 TopicFilter
 1  testproxy_monitor04_MultiProxyConnDisconn - Test rapid connects/disconnects of the same client ID between two proxies
 1  testproxy_monitor03_MultiProxyStealCID - Test steals of the same client ID between two proxies  +monitor+/+ism-proxy_td-monitorScenarios01.sh
 1  testproxy_monitor02 - Connect through tenant requiring user/password, test that no user/password fails, test that tenant name is properly added in topic sent on to MessageSight, test that tenant not in cfg files fails
 1  testproxy_monitor01 - Connect through tenant requiring user/password, test that no user/password fails, test that tenant name is properly added in topic sent on to MessageSight
 1  testproxy_dynamic05 - Test that dynamic authentication can access IP of client
 1  testproxy_dynamic04 - Test that dynamic authentication can fail connect
 1  testproxy_dynamic03 - Test that dynamic authentication with simultaneous requests
 1  testproxy_dynamic02 - Test that dynamic authentication does add to normal
 1  testproxy_dynamic01 - Test that dynamic authentication doesn*t override normal
 1  testproxy_connect23 - More RETAINed messages tests [ testproxy_connect23.xml ]
 1  testproxy_connect22 - Test that RETAINed messages are available after server fail/restart [ testproxy_connect22.xml ]
 1  testproxy_connect21 - Test that message in store are available after server fail/restart [ testproxy_connect21.xml ]
 1  testproxy_connect17 - Test MQTT connect with cleanSession, don*t receive stored msg
 1  testproxy_connect16 - Test MQTT connect without cleanSession, receive stored msg
 1  testproxy_connect15 - Test MQTT/WebSocket connect will topic longer than 60 characters
 1  testproxy_connect14 - Test MQTT/WebSocket connect with Will topic, connect second client same clientId
 1  testproxy_connect13 - Test MQTT/WebSocket connect with cleanSession=0
 1  testproxy_connect12 - Test MQTT/WebSocket connect with Will topic, message (zero length)
 1  testproxy_connect11 - Test MQTT/WebSocket connect with same clientId as already connected client
 1  testproxy_connect10 - Test MQTT/WebSocket connect with Will topic, message and RETAIN
 1  testproxy_connect09 - Test MQTT/WebSocket connect with Will topicmessage and Qos=2
 1  testproxy_connect08 - Test MQTT/WebSocket connect with Will topicmessage and Qos=1
 1  testproxy_connect07 - Test MQTT/WebSocket connect with Will topicmessage, publish close normally
 1  testproxy_connect04 - Test MQTT/WebSocket connect invalid user/password
 1  testproxy_connect03 - Test MQTT/WebSocket connect valid user/password  +connect+/+ism-proxy_td-connectScenarios01.sh
 1  testproxy_connect01 - Test MQTT/WebSocket connect to an IP address and port  +connect+/+ism-proxy_td-connectScenarios01.sh
 1  testproxy_WSmqttv5_clientSteal_05_durable - mqttv5 Pub Sub Receive WebSocket MQTTv5
 1  testproxy_WSmqttv5_clientSteal_04_nonDurable - WEBSOCKET mqttv5 Pub Sub Receive with ClientId Steal
 1  testproxy_WSmqttV5_rc143 - Test rc143 TopicFilter
 1  testproxyV5_MPSwRC - Test MQTTv5 MaxPacketSz exceeded with ReasonCode
 1  testmqtt_multiClientSet -  ClientSet - Multi Client Delete, Durable Subscriptions, MQTT disconnected,
 1  testmqtt_maxmsgBehavior2HA - Test MaxMessagesBehavior=DiscardOldMessages behavior at QoS=2 in HA. Multiple subscribers
 1  testmqtt_clusterCTT_013_Expiry -  CommonTopicTree, publishing when a member is down, messages held in ForwardingQueue should expire and be deleted.
 1  testmqtt_basicClientSet -  ClientSet - Delete, Durable Subscriptions, MQTT disconnected,
 1  testmqtt_activeCloseConn -  ClientSet - Monitor Subscription, MQTTClient and Active Connection when Close Connection issued
 1  testmqtt_activeClientSet -  ClientSet - Multi Client Delete, Durable Subscriptions, Active MQTT connections,
 1  testmqtt_NDS_04_MixedQoS - Non-Durable Shared Subscription at QoS=0, Busy test with lots of Disconnects and no unsubscribes
 1  testmqtt_HA05 - Test admin objects are properly rolled over [ testmqtt_HA05.xml ]
 1  testWSproxy_publishV5_06 - Test RETAIN and Message Expiry WebSockets
 1  testWSproxy_publishV5_05 - Test Message Expiry WebSockets
 1  restapi-ClientSet_Setup - ClientSet Delete ALL: UncoupleServers,  Durable Subscriptions, MQTT connections,
 1  restapi-ClientSet_Setup - ClientSet Delete ALL: Couple HA Pairs
 1  restapi-ClientSet_Setup - ClientSet Delete ALL: Couple Cluster Pairs
 1  restapi-ClientSet_CleanUp - ClientSet Delete ALL: DE-Couple HA Pairs
 1  restapi-ClientSet_CleanUp - ClientSet Delete ALL: DE-Couple Cluster Pairs
 1  restapi-ClientSet_CleanUp - ClientSet Delete ALL after Basic Import Export
 1  restapi-ClientSetCleanUp4 -  ClientSet - Delete ALL, Durable Subscriptions, MQTT connections,
 1  restapi-ClientSetCleanUp3 -  ClientSet - Delete ALL, Durable Subscriptions, MQTT connections,
 1  restapi-ClientSetCleanUp2 -  ClientSet - Delete ALL, Durable Subscriptions, MQTT connections,
 1  restapi-ClientSetCleanUp1 -  ClientSet - Delete ALL, Durable Subscriptions, MQTT connections,
 1  restapi-ClientSetCleanUp0 -  ClientSet - Delete ALL, Durable Subscriptions, MQTT connections,
 1  proxymqttV5_sharedSub_SubId - Test @SharedSubscriptions (w-w/o WCs) with SubIDs
 1  proxymqttV5_publishV3_SubUpV5 - MQTTv3 SUB upgrade v3 to V5 Sub
 1  proxymqttV5_publishV3_PubUpV5 - MQTTv3 PUB upgrade v3 to V5 Pub
 1  proxy_mqttV5_unsubscribe_UP - Test MQTTv5 Unsubscribe Properties User Property
 1  proxy_mqttV5_subscribe_UP - Test MQTTv5 Subscribe Properties User Property
 1  proxy_mqttV5_subOptions_RetainHandling - Test MQTTv5 Subscribe Options - RetainHandling
 1  proxy_mqttV5_subOptions_RetainAsPub_share - Test MQTTv5 Subscribe Options RetainAsPublish on Shared Subscription
 1  proxy_mqttV5_subOptions_RetainAsPub - Test MQTTv5 Subscribe Options RetainAsPublish
 1  proxy_mqttV5_subOptions_NoLocal - Test MQTTv5 Subscribe Options - No Local
 1  proxy_mqttV5_subOptionsError_RetainHandling - Test MQTTv5 Subscribe Options - RetainHandling Errors
 1  proxy_mqttV5_subOptionsError_NoLocal - Test MQTTv5 Subscribe Options Errors with No Local
 1  proxy_mqttV5_publish_UP - Test MQTTv5 Publish Properties UserProperty
 1  proxy_mqttV5_publish_TA - Test MQTTv5 Publish Properties TopicAlias
 1  proxy_mqttV5_publish_SI - Test MQTTv5 Publish Properties SubscriptionIdentifier
 1  proxy_mqttV5_publish_RT - Test MQTTv5 Publish Properties ResponseTopic
 1  proxy_mqttV5_publish_PFI - Test MQTTv5 Publish Properties Payload Format Indicator
 1  proxy_mqttV5_publish_MEI - Test MQTTv5 Publish Properties Message Expiry Interval
 1  proxy_mqttV5_publish_CT - Test MQTTv5 Publish Properties ContentType
 1  proxy_mqttV5_publish_CD - Test MQTTv5 Publish Properties CorrelationData
 1  proxy_mqttV5_pubPropError_TA - Test MQTTv5 Publish Properties TopicAlias Errors
 1  proxy_mqttV5_pubPropError_SI - Test MQTTv5 Publish Properties SubscriptionIdentifiers Errors
 1  proxy_mqttV5_pubPropError_PFI - Test MQTTv5 Publish Properties Payload Format Indicator
 1  proxy_mqttV5_connect_SEI - Test MQTTv5 CONNECT Properties Session Expiry Interval
 1  proxy_mqttV5_connect_KeepAlive - Test MQTTv5 CONNECT Properties Keep Alive
 1  proxy_connect_M1_LDAP_cleanup - disable and clean  +connect+/+ism-proxy_td-connectScenarios01.sh
 1  proxyACL_Undeliverable_mixedQoS - ACLs lost on Reboot, allows Undeliverable QoS:0 msgs to be Acked IoT Tracker ISSUE 1285
 1  proxyACL_Undeliverable.v5 - (MQTTv5) ACLs lost on Reboot, allows Undeliverable msgs to be Queued IoT Tracker ISSUE 1285
 1  proxyACL_Undeliverable - ACLs lost on Reboot, allows Undeliverable msgs to be Queued IoT Tracker ISSUE 1285
 1  proxyACL_Recovery - Test Recovery after Message Sight Restart  +AAAgateway+/+ism-AAAgateway01.sh
 1  proxyACL_InGroup - Test RETAIN, Durable WildCard
 1  proxyACL_ErrorPath - Error Paths of AClfile  +AAAgateway+/+ism-AAAgateway01.sh
 1  mqtt_connect_M1_LDAP_cleanup - disable and clean  +mqttv5_connect+/+ism-proxy_td-mqttv5_connect-01.sh
 1  mqtt HAScenarios03: Server stopped running during execution.
 1  configSetAndGet - Verify proxy config tests passed
 1  cleanup_confirmDisconnect - Kill the proxy and confirm final retained message is disconnect  +monitor+/+ism-proxy_td-monitorScenarios01.sh
 1  bridge.SimpleA1EventStreams - Test Simple Pub-Fwd-Recv through Bridge  bridge_tests/plain/ism-Bridge-Plain01.sh
 1  SNMP_verify_server_info - Verify Server Information
 1  SNMP_verify_memory_info - Verify Memory Information RC=1
 1  SNMP_verify_memory_info - Verify Memory Information
 1  SNMP_verify_harole_info - Verify HARole Information
 1  SNMP_verify_General_info - Verify General Information
 1  SNMP_settest_info - Set SNMP Values
 1  SNMP_Cleanup_001 - Test 1 - Policy Cleanup for IMAServer objects
 1  RESTAPI_OrgMove_ClientSetSetup -  ClientSet - Export(A1_A2 HA) and Import(A3_A4 HA) Durable Subscriptions of MQTT clients
 1  RESTAPI_OrgMove_ClientSetSetup -  ClientSet - Export(A1_A2 Cluster) and Import(A3_A4 Cluster) Durable Subscriptions of MQTT clients
 1  RESTAPI_OrgMove_ClientSetSetup -  ClientSet - Export(A1) and Import(A3) Durable Subscriptions of MQTT clients
 1  RESTAPI-02-HighAvailability - RESTAPI for HighAvailability
 1  RESTAPI-01-ClusterMembership - RESTAPI for ClusterMembership
 1  RESTAPI-00-ExportImport - RESTAPI for ExportImport
 1  MqttXrscadaTest15 - SDP_PROTOCOL_PACKED
 1  MQTTv5 Connect via Proxy and TestDriver: Server stopped running during execution.
 1  JCA Setup Objects - 00: 10.47.65.74 A1:Server may not be running. service/status returned RC=7
 1  JCA Setup Objects - 00: 10.47.65.175 A1:Server may not be running. service/status returned RC=7
 1  ISM MQTT via WSTestDriver: Server stopped running during execution.

==========================================================================================================================================
================================================== Summary of Individual Test Runs =======================================================
==========================================================================================================================================
ismClient           A1AFcciRHD01g A2AFcciCOD03g M1AFfvt13g M2AFfvt14g                               Passed: 38    Failed: 10
  "CLSTSM_cluster_tests" FAILED:
      FAILED: Scenario 16 - testmqtt_clusterCTT_013_Expiry -  CommonTopicTree, publishing when a member is down, messages held in ForwardingQueue should expire and be deleted.
      FAILED: Scenario 0 - restapi-ClientSetCleanUp0 -  ClientSet - Delete ALL, Durable Subscriptions, MQTT connections, 
      FAILED: Scenario 1 - testmqtt_basicClientSet -  ClientSet - Delete, Durable Subscriptions, MQTT disconnected, 
      FAILED: Scenario 2 - restapi-ClientSetCleanUp1 -  ClientSet - Delete ALL, Durable Subscriptions, MQTT connections, 
      FAILED: Scenario 3 - testmqtt_multiClientSet -  ClientSet - Multi Client Delete, Durable Subscriptions, MQTT disconnected, 
      FAILED: Scenario 4 - restapi-ClientSetCleanUp2 -  ClientSet - Delete ALL, Durable Subscriptions, MQTT connections, 
      FAILED: Scenario 5 - testmqtt_activeClientSet -  ClientSet - Multi Client Delete, Durable Subscriptions, Active MQTT connections, 
      FAILED: Scenario 6 - restapi-ClientSetCleanUp3 -  ClientSet - Delete ALL, Durable Subscriptions, MQTT connections, 
      FAILED: Scenario 7 - testmqtt_activeCloseConn -  ClientSet - Monitor Subscription, MQTTClient and Active Connection when Close Connection issued 
      FAILED: Scenario 8 - restapi-ClientSetCleanUp4 -  ClientSet - Delete ALL, Durable Subscriptions, MQTT connections, 

ismClient           A1AFcciRHD06g A2AFcciCOD02g M1AFfvt11g M2AFfvt12g                               Passed: 179   Failed: 10
  "HA_mqtt_td_tests" FAILED:
      FAILED: Scenario 1 - testmqtt_HA05 - Test admin objects are properly rolled over [ testmqtt_HA05.xml ]
      FAILED: runScenarios - mqtt HAScenarios03: Server stopped running during execution.
      FAILED: Scenario 6 - testmqtt_maxmsgBehavior2HA - Test MaxMessagesBehavior=DiscardOldMessages behavior at QoS=2 in HA. Multiple subscribers
  "HA_jca_tests" FAILED:
      FAILED: Scenario 13 - jca_api_001 - JCA api 001 - Test various JMS API*s in the RA environment
  "HA_restapi" FAILED:
      FAILED: Scenario 0 - RESTAPI-00-ResetConfig - RESTAPI for Service Reset Config
      FAILED: Scenario 1 - RESTAPI-01-ClusterMembership - RESTAPI for ClusterMembership
      FAILED: Scenario 2 - RESTAPI-02-HighAvailability - RESTAPI for HighAvailability
cAppDriver  /niagara/test/restapi/synopsis.sh FAILED to start!
      FAILED: Scenario 3 - RESTAPI-99-Synopsis - Synopsis of RESTAPI Execution RC=1
      FAILED: Scenario 0 - RESTAPI-00-ExportImport - RESTAPI for ExportImport

(RC!=0 for some tests, check individual results for details)
ismClient           A1AFcciCOD04g A2AFcciCOD07g A3AFcciRHD07g A4AFcciRHD02g A5AFcciRHD03g M1AFfvt15g M2AFfvt16g Passed: 162   Failed: 9
  "CLSTLG_cluster_tests" FAILED:
      FAILED: Scenario 0 - restapi-ClientSet_Setup - ClientSet Delete ALL: UncoupleServers,  Durable Subscriptions, MQTT connections, 
      FAILED: Scenario 1 - RESTAPI_OrgMove_ClientSetSetup -  ClientSet - Export(A1) and Import(A3) Durable Subscriptions of MQTT clients 
      FAILED: Scenario 2 - restapi-ClientSet_CleanUp - ClientSet Delete ALL after Basic Import Export 
      FAILED: Scenario 0 - restapi-ClientSet_Setup - ClientSet Delete ALL: Couple Cluster Pairs
      FAILED: Scenario 1 - RESTAPI_OrgMove_ClientSetSetup -  ClientSet - Export(A1_A2 Cluster) and Import(A3_A4 Cluster) Durable Subscriptions of MQTT clients 
      FAILED: Scenario 2 - restapi-ClientSet_CleanUp - ClientSet Delete ALL: DE-Couple Cluster Pairs
      FAILED: Scenario 0 - restapi-ClientSet_Setup - ClientSet Delete ALL: Couple HA Pairs
      FAILED: Scenario 1 - RESTAPI_OrgMove_ClientSetSetup -  ClientSet - Export(A1_A2 HA) and Import(A3_A4 HA) Durable Subscriptions of MQTT clients 
      FAILED: Scenario 2 - restapi-ClientSet_CleanUp - ClientSet Delete ALL: DE-Couple HA Pairs

ismClient           A1AFcciCOR06g A2AFcciCOR07g A3AFcciCOR14g A4AFcciCOR15g M1AFfvt25g M2AFfvt26g B1AFbridge05g B2AFbridge06g P1AFproxy07g P2AFproxy06g Passed: 145   Failed: 221
  "BRIDGE_bridge_tests" FAILED:
      FAILED: Scenario 1 - bridgePx.SimpleA1A2 - Test Simple Pub-Fwd-Recv through Bridge   bridge_tests/proxy/ism-Bridge-Proxy01.sh
      FAILED: Scenario 3 - bridgePx.MultiFWD_V3Source - Test Multile Forwarders with V3 Source Bridge   bridge_tests/proxy/ism-Bridge-Proxy01.sh
      FAILED: Scenario 5 - bridgePx.MaxFWDTopics - Test Max Forwarder Topics Bridge   bridge_tests/proxy/ism-Bridge-Proxy01.sh
  "BRIDGE_bridge_tests" FAILED:
      FAILED: Scenario 1 - bridgePx.SimpleA1A2 - Test Simple Pub-Fwd-Recv through Bridge   bridge_tests/proxy/ism-Bridge-Proxy01.sh
      FAILED: Scenario 3 - bridgePx.MultiFWD_V3Source - Test Multile Forwarders with V3 Source Bridge   bridge_tests/proxy/ism-Bridge-Proxy01.sh
      FAILED: Scenario 5 - bridgePx.MaxFWDTopics - Test Max Forwarder Topics Bridge   bridge_tests/proxy/ism-Bridge-Proxy01.sh
      FAILED: Scenario 1 - bridge.SimpleA1EventStreams - Test Simple Pub-Fwd-Recv through Bridge  bridge_tests/plain/ism-Bridge-Plain01.sh
  "proxy_tests" FAILED:
      FAILED: Scenario 2 - testproxy_connect01 - Test MQTT/WebSocket connect to an IP address and port  +connect+/+ism-proxy_td-connectScenarios01.sh
      FAILED: Scenario 3 - testproxy_connect03 - Test MQTT/WebSocket connect valid user/password  +connect+/+ism-proxy_td-connectScenarios01.sh
      FAILED: Scenario 4 - testproxy_connect04 - Test MQTT/WebSocket connect invalid user/password
      FAILED: Scenario 5 - testproxy_connect07 - Test MQTT/WebSocket connect with Will topicmessage, publish close normally
      FAILED: Scenario 6 - testproxy_connect08 - Test MQTT/WebSocket connect with Will topicmessage and Qos=1
      FAILED: Scenario 7 - testproxy_connect09 - Test MQTT/WebSocket connect with Will topicmessage and Qos=2
      FAILED: Scenario 8 - testproxy_connect10 - Test MQTT/WebSocket connect with Will topic, message and RETAIN
      FAILED: Scenario 9 - testproxy_connect11 - Test MQTT/WebSocket connect with same clientId as already connected client
      FAILED: Scenario 10 - testproxy_connect12 - Test MQTT/WebSocket connect with Will topic, message (zero length)
      FAILED: Scenario 11 - testproxy_connect13 - Test MQTT/WebSocket connect with cleanSession=0
      FAILED: Scenario 12 - testproxy_connect14 - Test MQTT/WebSocket connect with Will topic, connect second client same clientId
      FAILED: Scenario 13 - testproxy_connect15 - Test MQTT/WebSocket connect will topic longer than 60 characters
      FAILED: Scenario 14 - testproxy_connect16 - Test MQTT connect without cleanSession, receive stored msg
      FAILED: Scenario 15 - testproxy_connect17 - Test MQTT connect with cleanSession, don*t receive stored msg
      FAILED: Scenario 16 - testproxy_connect21 - Test that message in store are available after server fail/restart [ testproxy_connect21.xml ]
      FAILED: Scenario 17 - testproxy_connect22 - Test that RETAINed messages are available after server fail/restart [ testproxy_connect22.xml ]
      FAILED: Scenario 18 - testproxy_connect23 - More RETAINed messages tests [ testproxy_connect23.xml ]
      FAILED: Scenario 20 - proxy_connect_M1_LDAP_cleanup - disable and clean  +connect+/+ism-proxy_td-connectScenarios01.sh
      FAILED: runScenarios - ISM MQTT via WSTestDriver: Server stopped running during execution.
      FAILED: Scenario 1 - testproxy_subscribe01 - Test MQTT/WebSocket subscribe to *#*
      FAILED: Scenario 2 - testproxy_subscribe02 - Test MQTT/WebSocket subscribe to *a/b/c*
      FAILED: Scenario 3 - testproxy_subscribe03 - Test MQTT/WebSocket subscribe to *a/#*
      FAILED: Scenario 4 - testproxy_subscribe04 - Test MQTT/WebSocket subscribe to *a/+/c*
      FAILED: Scenario 5 - testproxy_subscribe05 - Test MQTT/WebSocket subscribe to 50 level topic
      FAILED: Scenario 6 - testproxy_subscribe06 - Test MQTT/WebSocket subscribe to *a/b/c* with QoS=1
      FAILED: Scenario 7 - testproxy_subscribe07 - Test MQTT/WebSocket subscribe to *a/b/c* with QoS=2
      FAILED: Scenario 8 - testproxy_subscribe08 - Test MQTT/WebSocket subscribe to *a/b/c* and *a/b/d*
      FAILED: Scenario 9 - testproxy_subscribe09 - Test MQTT/WebSocket subscribe to *a/b/c* with QoS=1 and *a/b/d* with QoS=0
      FAILED: Scenario 10 - testproxy_subscribe10 - Test MQTT/WebSocket subscribe to *a/b/c* and *a/b/+*, make sure a/b/c messages are not delivered twice
      FAILED: Scenario 11 - testproxy_subscribe11 - Test MQTT/WebSocket subscribe to *a/b/c* QoS=0
      FAILED: Scenario 12 - testproxy_subscribe13 - Test MQTT/WebSocket subscribe to *a/b/c* QoS=0 publish QoS=1 and Qos=2
      FAILED: Scenario 13 - testproxy_subscribe14 - Test MQTT/WebSocket subscribe to long topic (<32767 characters)
      FAILED: Scenario 14 - testproxy_subscribe15 - Test MQTT/WebSocket subscribe to long topic (<32767 characters)
      FAILED: Scenario 15 - testproxy_subscribe16 - Test MQTT/WebSocket subscribe send 1600 messages on each of two topics
      FAILED: Scenario 16 - testproxy_subscribe17 - Test MQTT 1)Subscribe to same specific topic twice, should only receive messages once
      FAILED: Scenario 17 - testproxy_subscribe20 - Test MQTT test subscribe to +
      FAILED: Scenario 18 - testproxy_subscribe21 - Test MQTT test subscribe, close, subscribe
      FAILED: Scenario 19 - testproxy_subscribe22 - Test MQTT test subscribe to /a/c/+
      FAILED: Scenario 20 - testproxy_subscribe23 - Test publish and receive with 0 length message
      FAILED: Scenario 1 - testproxy_publish05 - Test RETAIN, simple scenario  +publish+/+ism-proxy_td-publishScenarios01.sh
      FAILED: Scenario 2 - testproxy_publish06 - Test RETAIN, second message replaces first  +publish+/+ism-proxy_td-publishScenarios01.sh
      FAILED: Scenario 3 - testproxy_publish07 - Test RETAIN, if already subscribed, RETAIN flag should be off  +publish+/+ism-proxy_td-publishScenarios01.sh
      FAILED: Scenario 4 - testproxy_publish08 - Test RETAIN, if already subscribed/ durable, RETAIN flag should be off  +publish+/+ism-proxy_td-publishScenarios01.sh
      FAILED: Scenario 1 - testproxy_monitor01 - Connect through tenant requiring user/password, test that no user/password fails, test that tenant name is properly added in topic sent on to MessageSight
      FAILED: Scenario 2 - testproxy_monitor02 - Connect through tenant requiring user/password, test that no user/password fails, test that tenant name is properly added in topic sent on to MessageSight, test that tenant not in cfg files fails
      FAILED: Scenario 3 - testproxy_monitor03_MultiProxyStealCID - Test steals of the same client ID between two proxies  +monitor+/+ism-proxy_td-monitorScenarios01.sh
      FAILED: Scenario 4 - testproxy_monitor04_MultiProxyConnDisconn - Test rapid connects/disconnects of the same client ID between two proxies
      FAILED: Scenario 5 - cleanup_confirmDisconnect - Kill the proxy and confirm final retained message is disconnect  +monitor+/+ism-proxy_td-monitorScenarios01.sh
      FAILED: Scenario 1 - testproxy_retain01 - Test MQTT/WebSocket connect with Will topicmessage and Qos=1
      FAILED: Scenario 2 - testproxy_retain02 - Test MQTT/WebSocket connect with Will topic, message and RETAIN
      FAILED: Scenario 2 - configSetAndGet - Verify proxy config tests passed
      FAILED: Scenario 2 - testproxy_tenant01-iot2 - Connect a device on IoT2 requiring user/password, test that no user/password fails, test that org name is properly added in topic sent on to MessageSight
      FAILED: Scenario 3 - testproxy_tenant02-iot2 - Connect an application on IoT2 requiring user/password, test that tenant name is properly added in topic sent on to MessageSight, test that tenant not in cfg files fails
      FAILED: Scenario 4 - testproxy_tenant03-quickstart2 - Connect a device on Quickstart2 requiring no user/password, test that tenant name is properly added in topic sent on to MessageSight
      FAILED: Scenario 5 - testproxy_tenant04-quickstart2 - Connect an application on Quickstart2 requiring no user/password, test that tenant name is properly added in topic sent on to MessageSight
      FAILED: Scenario 6 - testproxy_tenant05-quickstart2 - Connect application and device on quickstart2, only device publish and only application subscribe
      FAILED: Scenario 7 - testproxy_tenant06-quickstart2 - Connect application quickstart2, check QuickStart Rules
      FAILED: Scenario 8 - testproxy_tenant07-iot2 - Connect device on iot2, check Registered Org rules
      FAILED: Scenario 1 - testproxy_dynamic01 - Test that dynamic authentication doesn*t override normal
      FAILED: Scenario 2 - testproxy_dynamic02 - Test that dynamic authentication does add to normal
      FAILED: Scenario 3 - testproxy_dynamic03 - Test that dynamic authentication with simultaneous requests
      FAILED: Scenario 4 - testproxy_dynamic04 - Test that dynamic authentication can fail connect
      FAILED: Scenario 5 - testproxy_dynamic05 - Test that dynamic authentication can access IP of client
      FAILED: Scenario 1 - MqttXrscadaTest15 - SDP_PROTOCOL_PACKED
      FAILED: Scenario 3 - proxyACL_InGroup - Test RETAIN, Durable WildCard
      FAILED: Scenario 4 - proxyACL_Recovery - Test Recovery after Message Sight Restart  +AAAgateway+/+ism-AAAgateway01.sh
      FAILED: Scenario 5 - proxyACL_ErrorPath - Error Paths of AClfile  +AAAgateway+/+ism-AAAgateway01.sh
      FAILED: Scenario 6 - proxyACL_Undeliverable - ACLs lost on Reboot, allows Undeliverable msgs to be Queued IoT Tracker ISSUE 1285
      FAILED: Scenario 7 - proxyACL_Undeliverable_mixedQoS - ACLs lost on Reboot, allows Undeliverable QoS:0 msgs to be Acked IoT Tracker ISSUE 1285
      FAILED: Scenario 8 - proxyACL_Undeliverable.v5 - (MQTTv5) ACLs lost on Reboot, allows Undeliverable msgs to be Queued IoT Tracker ISSUE 1285
      FAILED: Scenario 1 - testproxy_tls01_NoStore - Test ability to connect to Proxy TLS port with no store and self signed server cert - conn should fail [ testproxy_tls01_NoStore.xml ]
      FAILED: Scenario 2 - testproxy_tls02_WrongStore - Test ability to connect to Proxy TLS port with wrong cert in store for self signed server cert - conn should fail [ testproxy_tls02_WrongStore.xml ]
      FAILED: Scenario 3 - testproxy_tls03_MqttsEpStore - Test ability to connect to Proxy TLS port [ testproxy_tls03_MqttsEpStore.xml ]
      FAILED: Scenario 4 - testproxy_tls04_MqttsEpStore_WithUser - Test ability to connect to Proxy TLS port with a user [ testproxy_tls04_MqttsEpStore_WithUser.xml ]
      FAILED: Scenario 1 - testproxy_tls01_NoTLS - Test that non-TLS connections succeed for SGEnabled=true configuration [ testproxy_tls01_NoTLS.xml ]
      FAILED: Scenario 3 - testproxy_tls03_MqttsEpStore - Test TLS connections succeed for SGEnabled=true config when client cert store contains mqtts ep cert only [ testproxy_tls03_MqttsEpStore.xml ]
      FAILED: Scenario 5 - testproxy_tls05_ProxyDfltStore_CltCrtNoMatch - Test TLS connections succeed for SGEnabled=true config when client cert store contains dflt proxy cert and non-matching client cert. Also test connections fail when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls05_ProxyDfltStore_CltCrtNoMatch.xml ]
      FAILED: Scenario 6 - testproxy_tls06_ProxyDfltStore_CltCrtPartialMatchd - Test TLS connections succeed for SGEnabled=true config when client cert store contains dflt proxy cert and CN partial matching client cert. Also test connections succeed when partial match betw CN/SAN & clientId is required and fails when exact match is required. [ testproxy_tls06_ProxyDfltStore_CltCrtPartialMatchd.xml ]
      FAILED: Scenario 7 - testproxy_tls07_ProxyDfltStore_CltCrtExactMatchd - Test TLS connections succeed for SGEnabled=true config when client cert store contains dflt proxy cert and SAN exact matching client cert. Also check that connections succeed when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls07_ProxyDfltStore_CltCrtExactMatchd.xml ]
      FAILED: Scenario 8 - testproxy_tls08_ProxyDfltStore_CltCrtPartialMatchg - Test TLS connections succeed for SGEnabled=true config when client cert store contains dflt proxy cert and SAN partial matching client cert. Also check that connections succeed when partial match betw CN/SAN & clientId is required and failes when exact match is required. [ testproxy_tls08_ProxyDfltStore_CltCrtPartialMatchg.xml ]
      FAILED: Scenario 9 - testproxy_tls09_ProxyDfltStore_CltCrtExactMatchg - Test TLS connections succeed for SGEnabled=false config when client cert store contains dflt proxy cert and CN exact matching client cert. Also check that connections succeed when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls09_ProxyDfltStore_CltCrtExactMatchg.xml ]
      FAILED: Scenario 2 - testproxy_tls02s_OrgSrvStore - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert only [ testproxy_tls02s_OrgSrvStore.xml ]
      FAILED: Scenario 3 - testproxy_tls03s_OrgSrvStore_CltCrtNoMatch - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert and non-matching client cert. Also check that connections fail when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls03s_OrgSrvStore_CltCrtNoMatch.xml ]
      FAILED: Scenario 4 - testproxy_tls04s_OrgSrvStore_CltCrtPartialMatchd - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert and client cert CN partially matches client ID. Also check that connection succeeds when partial match betw CN/SAN & clientId is required and fails when exact match is required. [ testproxy_tls04s_OrgSrvStore_CltCrtPartialMatchd.xml ]
      FAILED: Scenario 5 - testproxy_tls05s_OrgSrvStore_CltCrtExactMatchd - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert and client cert SAN exactly matches client ID. Also check that connection succeeds when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls05s_OrgSrvStore_CltCrtExactMatchd.xml ]
      FAILED: Scenario 6 - testproxy_tls06s_OrgSrvStore_CltCrtPartialMatchg - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert and client cert SAN partially matches client ID. Also check that connection succeeds when partial match betw CN/SAN & clientId is required and fails when exact match is required. [ testproxy_tls06s_OrgSrvStore_CltCrtPartialMatchg.xml ]
      FAILED: Scenario 7 - testproxy_tls07s_OrgSrvStore_CltCrtExactMatchg - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert and client cert CN exactly matches client ID. Also check that connection succeeds when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls07s_OrgSrvStore_CltCrtExactMatchg.xml ]
      FAILED: Scenario 6 - testproxy_tls06_ProxyDfltStore_CltCrtPartialMatchd - Test TLS connections succeed for SGEnabled=false config when client cert store contains dflt proxy cert and client cert CN partially matches client ID [ testproxy_tls06_ProxyDfltStore_CltCrtPartialMatchd.xml ]
      FAILED: Scenario 7 - testproxy_tls07_ProxyDfltStore_CltCrtExactMatchd - Test TLS connections succeed for SGEnabled=false config when client cert store contains dflt proxy cert and client cert SAN exactly matches client ID [ testproxy_tls07_ProxyDfltStore_CltCrtExactMatchd.xml ]
      FAILED: Scenario 8 - testproxy_tls08_ProxyDfltStore_CltCrtPartialMatchg - Test TLS connections succeed for SGEnabled=false config when client cert store contains dflt proxy cert and client cert SAN partially matches client ID [ testproxy_tls08_ProxyDfltStore_CltCrtPartialMatchg.xml ]
      FAILED: Scenario 9 - testproxy_tls09_ProxyDfltStore_CltCrtExactMatchg - Test TLS connections succeed for SGEnabled=false config when client cert store contains dflt proxy cert and client cert CN exactly matches client ID [ testproxy_tls09_ProxyDfltStore_CltCrtExactMatchg.xml ]
      FAILED: Scenario 4 - testproxy_tls04s_OrgSrvStore_CltCrtPartialMatchd - Test TLS connections succeed for SGEnabled=false config with org server cert when client cert store contains dflt proxy cert and client cert CN partially matches client ID [ testproxy_tls04s_OrgSrvStore_CltCrtPartialMatchd.xml ]
      FAILED: Scenario 5 - testproxy_tls05s_OrgSrvStore_CltCrtExactMatchd - Test TLS connections succeed for SGEnabled=false config with org server cert when client cert store contains dflt proxy cert and client cert SAN exactly matches client ID [ testproxy_tls05s_OrgSrvStore_CltCrtExactMatchd.xml ]
      FAILED: Scenario 6 - testproxy_tls06s_OrgSrvStore_CltCrtPartialMatchg - Test TLS connections succeed for SGEnabled=false config with org server cert when client cert store contains dflt proxy cert and client cert SAN partially matches client ID [ testproxy_tls06s_OrgSrvStore_CltCrtPartialMatchg.xml ]
      FAILED: Scenario 7 - testproxy_tls07s_OrgSrvStore_CltCrtExactMatchg - Test TLS connections succeed for SGEnabled=false config with org server cert when client cert store contains dflt proxy cert and client cert CN exactly matches client ID [ testproxy_tls07s_OrgSrvStore_CltCrtExactMatchg.xml ]
      FAILED: Scenario 5 - testproxy_tls05b_ClientCertEmptyCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty CRL (cert 2 of 3) [ testproxy_tls05b_ClientCertEmptyCRL.xml ]
      FAILED: Scenario 6 - testproxy_tls05c_ClientCertEmptyCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty CRL (cert 3 of 3) [ testproxy_tls05c_ClientCertEmptyCRL.xml ]
      FAILED: Scenario 7 - testproxy_tls05a_ClientCertEmptyCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty CRL (cert 1 of 3) [ testproxy_tls05a_ClientCertEmptyCRL.xml ]
      FAILED: Scenario 10 - testproxy_tls06c_ClientCert2CrtsInCRL - Test ability to connect to Proxy TLS port using client certificate authentication with CRL and 2 reovoked certs - conn for non-revoked cert should succeed [ testproxy_tls06c_ClientCert2CrtsInCRL.xml ]
      FAILED: Scenario 11 - testproxy_tls07a_ClientCertEmptyDERCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty DER format CRL (cert 1 of 3) [ testproxy_tls07a_ClientCertEmptyDERCRL.xml ]
      FAILED: Scenario 12 - testproxy_tls07b_ClientCertEmptyDERCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty DER format CRL (cert 2 of 3) [ testproxy_tls07b_ClientCertEmptyDERCRL.xml ]
      FAILED: Scenario 13 - testproxy_tls07c_ClientCertEmptyDERCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty DER format CRL (cert 3 of 3) [ testproxy_tls07c_ClientCertEmptyDERCRL.xml ]
      FAILED: Scenario 15 - testproxy_tls08b_ClientCert1CrtInDERCRL - Test ability to connect to Proxy TLS port using client certificate authentication with DER format CRL and 1 reovoked cert - conn should succeed for cert that is not revoked [ testproxy_tls08b_ClientCert1CrtInDERCRL.xml ]
      FAILED: Scenario 16 - testproxy_tls08c_ClientCert1CrtInDERCRL - Test ability to connect to Proxy TLS port using client certificate authentication with DER format CRL and 1 reovoked cert - conn should succeed for cert that is not revoked [ testproxy_tls08c_ClientCert1CrtInDERCRL.xml ]
      FAILED: Scenario 2 - testproxy_mqttv5_01 - WS mqttv5 connect01
      FAILED: Scenario 3 - testproxy_mqttv5_01b - PAHO mqttv5 connect01b
      FAILED: Scenario 4 - testproxy_mqttv5_02 - mqttv5 publish, subscribe, receive
      FAILED: Scenario 5 - testproxy_mqttv5_04 - mqttv5 Connect, Disconnect with Expiry
      FAILED: Scenario 6 - testproxy_mqttv5_05 - mqttv5 session expiry with connection policy
      FAILED: Scenario 7 - testproxy_mqttv5_07 - MQTTv5 Normal disconnect does not send will message with will delay
      FAILED: Scenario 8 - testproxy_mqttv5_08 - MQTTv5 Abnormal disconnect to send will message with will delay
      FAILED: Scenario 9 - testproxy_mqttv5_09 - MQTTv5 Disconnect with rc=4 to publish will msg after delay
      FAILED: Scenario 10 - testproxy_mqttv5_09b - MQTTv5 Disconnect with rc=4 to publish will msg after delay
      FAILED: Scenario 11 - testproxy_mqttv5_10 - MQTTv5 session expiry across server restart
      FAILED: Scenario 12 - testproxy_mqttv5_11 - MQTTv5 Will delay - create new connection before delay - no send
      FAILED: Scenario 13 - testproxy_mqttv5_12 - MQTTv5 Will delay - clientSteals and Clean Session
      FAILED: Scenario 14 - testproxy_mqttv5_13 - MQTTv5 publish many messages
      FAILED: Scenario 15 - testproxy_mqttv5_14 - MQTTv5 publish user properties
      FAILED: Scenario 16 - testproxy_mqttv5_14_GVT - MQTTv5 publish GVT user properties
      FAILED: Scenario 17 - testproxy_mqttV5_gvt01 - Test ability use GVT characters in topic and ClientID [ testproxy_mqttV5_gvt01.xml ]
      FAILED: Scenario 18 - testproxy_mqttV5_gvt02 - Test ability to connect over an SSL connection [ testproxy_mqttV5_gvt02.xml ]
      FAILED: Scenario 20 - testproxy_mqttV5_gvt03 - Test ability to connect with GVT characters in user/password [ testproxy_mqttV5_gvt03.xml ]
      FAILED: Scenario 21 - testproxy_mqttV5_gvt05 - Test ability to connect with GVT characters C4 in user/password [ testproxy_mqttV5_gvt05.xml ]
      FAILED: Scenario 22 - testproxy_mqttV5_gvt06 - Test ability to connect with GVT characters E3 in user/password [ testproxy_mqttV5_gvt06.xml ]
      FAILED: Scenario 1 - testproxy_mqttv5_cleanstart_01 - mqttv5 connect cleanStart - ConnAck SessionPresent
      FAILED: Scenario 2 - testproxy_mqttv5_pubsub_02_nonDurable - mqttv5 Pub Sub Receive 
      FAILED: Scenario 3 - testproxy_mqttv5_pubsub_03_durableSession - mqttv5 Pub Sub Receive 
      FAILED: Scenario 4 - testproxy_mqttv4_clientSteal_04_nonDurable - PAHO mqttv4 Pub Sub Receive with ClientId Steal
      FAILED: Scenario 5 - testproxy_mqttv4_clientSteal_05_Durable - PAHO mqttv4 Pub Sub Receive with ClientId Steal
      FAILED: Scenario 6 - testproxy_WSmqttv5_clientSteal_04_nonDurable - WEBSOCKET mqttv5 Pub Sub Receive with ClientId Steal 
      FAILED: Scenario 7 - testproxy_mqttv5_clientSteal_04_nonDurable - PAHO mqttv5 Pub Sub Receive with ClientId Steal 
      FAILED: Scenario 8 - testproxy_mqttv5_clientSteal_05_durable - mqttv5 Pub Sub Receive PAHO MQTTv5
      FAILED: Scenario 9 - testproxy_WSmqttv5_clientSteal_05_durable - mqttv5 Pub Sub Receive WebSocket MQTTv5
      FAILED: Scenario 2 - testproxy_mqttv5connect01 - Test MQTT/WebSocket connect to an IP address and port  +mqttv5_connect+/+ism-proxy_td-mqttv5_connect-01.sh
      FAILED: Scenario 3 - testproxy_mqttv5connect03 - Test MQTT/WebSocket connect valid user/password
      FAILED: Scenario 5 - testproxy_v5connect_MPS - Test MQTTV5 that we don*t exceed Maximum Packet Size specified by client
      FAILED: Scenario 6 - testproxy_mqttv5connect07 - Test MQTT/WebSocket connect with Will topicmessage, publish close normally
      FAILED: Scenario 7 - testproxy_mqttv5connect08 - Test MQTT/WebSocket connect with Will topicmessage and Qos=1
      FAILED: Scenario 8 - testproxy_mqttv5connect09 - Test MQTT/WebSocket connect with Will topicmessage and Qos=2
      FAILED: Scenario 9 - testproxy_mqttv5connect10 - Test MQTT/WebSocket connect with Will topic, message and RETAIN
      FAILED: Scenario 10 - testproxy_mqttv5connect11 - Test MQTT/WebSocket connect with same clientId as already connected client
      FAILED: Scenario 11 - testproxy_mqttv5connect12 - Test MQTT/WebSocket connect with Will topic, message (zero length)
      FAILED: Scenario 12 - testproxy_mqttv5connect13 - Test MQTT/WebSocket connect with cleanSession=0
      FAILED: Scenario 13 - testproxy_mqttv5connect14 - Test MQTT/WebSocket connect with Will topic, connect second client same clientId
      FAILED: Scenario 14 - testproxy_mqttv5connect15 - Test MQTT/WebSocket connect will topic longer than 60 characters
      FAILED: Scenario 15 - testproxy_mqttv5connect16 - Test MQTT connect without cleanSession, receive stored msg
      FAILED: Scenario 16 - testproxy_mqttv5connect17 - Test MQTT connect with cleanSession, don*t receive stored msg
      FAILED: Scenario 17 - testproxy_mqttv5connect21 - Test that message in store are available after server fail/restart [ testproxy_mqttv5connect21.xml ]
      FAILED: Scenario 18 - testproxy_mqttv5connect22 - Test that RETAINed messages are available after server fail/restart [ testproxy_mqttv5connect22.xml ]
      FAILED: Scenario 19 - testproxy_mqttv5connect23 - More RETAINed messages tests [ testproxy_mqttv5connect23.xml ]  +mqttv5_connect+/+ism-proxy_td-mqttv5_connect-01.sh
      FAILED: Scenario 21 - mqtt_connect_M1_LDAP_cleanup - disable and clean  +mqttv5_connect+/+ism-proxy_td-mqttv5_connect-01.sh
      FAILED: runScenarios - MQTTv5 Connect via Proxy and TestDriver: Server stopped running during execution.
      FAILED: Scenario 2 - proxy_mqttV5_connect_KeepAlive - Test MQTTv5 CONNECT Properties Keep Alive
      FAILED: Scenario 3 - proxy_mqttV5_connect_SEI - Test MQTTv5 CONNECT Properties Session Expiry Interval
      FAILED: Scenario 4 - proxy_mqttV5_publish_PFI - Test MQTTv5 Publish Properties Payload Format Indicator
      FAILED: Scenario 5 - proxy_mqttV5_publish_MEI - Test MQTTv5 Publish Properties Message Expiry Interval
      FAILED: Scenario 6 - proxy_mqttV5_publish_TA - Test MQTTv5 Publish Properties TopicAlias
      FAILED: Scenario 7 - proxy_mqttV5_publish_RT - Test MQTTv5 Publish Properties ResponseTopic
      FAILED: Scenario 8 - proxy_mqttV5_publish_CD - Test MQTTv5 Publish Properties CorrelationData
      FAILED: Scenario 9 - proxy_mqttV5_publish_UP - Test MQTTv5 Publish Properties UserProperty
      FAILED: Scenario 10 - proxy_mqttV5_publish_SI - Test MQTTv5 Publish Properties SubscriptionIdentifier
      FAILED: Scenario 11 - proxy_mqttV5_publish_CT - Test MQTTv5 Publish Properties ContentType
      FAILED: Scenario 12 - proxy_mqttV5_pubPropError_PFI - Test MQTTv5 Publish Properties Payload Format Indicator
      FAILED: Scenario 13 - proxy_mqttV5_pubPropError_TA - Test MQTTv5 Publish Properties TopicAlias Errors
      FAILED: Scenario 14 - proxy_mqttV5_pubPropError_SI - Test MQTTv5 Publish Properties SubscriptionIdentifiers Errors
      FAILED: Scenario 15 - proxy_mqttV5_subscribe_UP - Test MQTTv5 Subscribe Properties User Property
      FAILED: Scenario 16 - proxy_mqttV5_unsubscribe_UP - Test MQTTv5 Unsubscribe Properties User Property
      FAILED: Scenario 17 - proxy_mqttV5_subOptions_NoLocal - Test MQTTv5 Subscribe Options - No Local
      FAILED: Scenario 18 - proxy_mqttV5_subOptionsError_NoLocal - Test MQTTv5 Subscribe Options Errors with No Local
      FAILED: Scenario 19 - proxy_mqttV5_subOptions_RetainAsPub - Test MQTTv5 Subscribe Options RetainAsPublish
      FAILED: Scenario 20 - proxy_mqttV5_subOptions_RetainAsPub_share - Test MQTTv5 Subscribe Options RetainAsPublish on Shared Subscription
      FAILED: Scenario 21 - proxy_mqttV5_subOptions_RetainHandling - Test MQTTv5 Subscribe Options - RetainHandling
      FAILED: Scenario 22 - proxy_mqttV5_subOptionsError_RetainHandling - Test MQTTv5 Subscribe Options - RetainHandling Errors
      FAILED: Scenario 1 - testproxy_publishV3_01 - Test RETAIN, simple scenario v3 publisher
      FAILED: Scenario 2 - testproxy_publishV5_01 - Test RETAIN, simple scenario v5 publisher
      FAILED: Scenario 3 - testproxy_publishV3_02 - Test RETAIN replaced v3 publisher
      FAILED: Scenario 4 - testproxy_publishV5_02 - Test RETAIN replaced v5 publisher
      FAILED: Scenario 5 - testproxy_publishV3_03 - Test RETAIN, receive RETAIN and as NON_RETAIN
      FAILED: Scenario 6 - testproxy_publishV5_03 - Test RETAIN, receive RETAIN and as NON_RETAIN
      FAILED: Scenario 7 - testproxy_publishV3_04 - Test RETAIN, Durable Subs receive as NON_RETAIN
      FAILED: Scenario 8 - testproxy_publishV5_04 - Test RETAIN, Durable Subs receive as NON_RETAIN
      FAILED: Scenario 9 - testproxy_publishV5_05 - Test Message Expiry PAHO
      FAILED: Scenario 10 - testWSproxy_publishV5_05 - Test Message Expiry WebSockets
      FAILED: Scenario 11 - testproxy_publishV5_06 - Test RETAIN and Message Expiry PAHO
      FAILED: Scenario 12 - testWSproxy_publishV5_06 - Test RETAIN and Message Expiry WebSockets
      FAILED: Scenario 2 - testproxyV5_MPSwRC - Test MQTTv5 MaxPacketSz exceeded with ReasonCode
      FAILED: Scenario 3 - testproxy_mqttV5_rc016 - Test rc016 No matching Subscribers
      FAILED: Scenario 4 - testproxy_mqttV5_rc017 - Test rc017 No Subscription Existed
      FAILED: Scenario 5 - testproxy_mqttV5_rc130 - Test rc130 Protocol Error
      FAILED: Scenario 6 - testproxy_mqttV5_rc133 - Test rc133 Client Identified not valid
      FAILED: Scenario 7 - testproxy_mqttV5_rc135 - Test rc135 Not Authorized
      FAILED: Scenario 9 - testproxy_mqttV5_rc139 - Test rc139 Server Stopping
      FAILED: Scenario 10 - testproxy_mqttV5_rc141 - Test rc139 Server Stopping
      FAILED: Scenario 11 - testproxy_mqttV5_rc143 - Test rc143 TopicFilter
      FAILED: Scenario 12 - testproxy_mqttV3_rc143 - Test rc143 TopicFilter
      FAILED: Scenario 13 - testproxy_WSmqttV5_rc143 - Test rc143 TopicFilter
      FAILED: Scenario 14 - testproxy_mqttV5_rc144 - Test rc144 TopicFilter
      FAILED: Scenario 2 - proxymqttV5_sharedSub_SubId - Test @SharedSubscriptions (w-w/o WCs) with SubIDs
      FAILED: Scenario 3 - proxymqttV5_publishV3_PubUpV5 - MQTTv3 PUB upgrade v3 to V5 Pub
      FAILED: Scenario 4 - proxymqttV5_publishV3_SubUpV5 - MQTTv3 SUB upgrade v3 to V5 Sub
      FAILED: Scenario 1 - testproxy_sharedMix_csF_error01 - MQTTv5 Test basic Errors in or MQTTv5 shared subs using a durable subscriber. 
      FAILED: Scenario 2 - testproxy_sharedMix_csF_error02 - MQTTv5 Test connect, disconnect, reconnect, and ClientID theft conditions for MQTTv5 shared subs using a durable subscriber. 
      FAILED: Scenario 3 - testproxy_sharedMix_csT_error01 - MQTTv5 Test basic Errors in or MQTTv5 shared subs using a non-durable subscriber. 
      FAILED: Scenario 4 - testproxy_sharedMix_csT_error02 - MQTTv5 Test connect, disconnect,and ClientID theft conditions for MQTTv5 shared subs using a non-durable subscriber. 
      FAILED: Scenario 5 - testproxy_sharedMix_error03 - MQTTv5 Test creation and distruction of MQTTv5  subscriptions using cleansession clients in all different orders 
      FAILED: Scenario 6 - testproxy_sharedMix_01 - MQTTv5 SharedMix - check different subs on different topics with same subname 
      FAILED: Scenario 7 - testproxy_sharedMix_02 - MQTTv5 Basic test of mixed-durability sharedsubs - subscribing and messaging. 
      FAILED: Scenario 8 - testproxy_sharedMix_03 - MQTTv5 Clients reconnecting and receiving after server restart. 
      FAILED: Scenario 9 - testproxy_sharedMix_04 - MQTTv5 Clients reconnecting and receiving after server restart - bigger test with multiple subs and more messages. 
      FAILED: Scenario 10 - testproxy_sharedMix_05 - MQTTv5 Redelivery of in-flight msg on client disconnect. 
      FAILED: Scenario 11 - testproxy_sharedMix_06 - MQTTv5 Wildcard subscriptions for share subs. 
      FAILED: Scenario 12 - testproxy_sharedMix_07ND - MQTTv5 Busy share test with many subscribes-unsubscribes, nondurable. 
      FAILED: Scenario 13 - testproxy_sharedMix_07D - MQTTv5 Busy share test with many subscribes-unsubscribes, nondurable. 
      FAILED: Scenario 14 - testproxy_sharedMix_09 - MQTTv5 New Retained Messages behavior - shared durable should not receive RMs when create sub or on reconnect.

ismClient           A1AFcciCOD01g M1AFfvt01g M2AFfvt02g                                             Passed: 1346  Failed: 182
  "IBMjava80_jms_td_tests" FAILED:
      FAILED: Scenario 18 - jms_oauth_010_truststore - Test 10 - OAuth Test 10 with TrustStore set
  "IBMjava80_mqtt_td_tests" FAILED:
      FAILED: Scenario 1 - testmqtt_gvt01 - Test ability use GVT characters in topic and ClientID [ testmqtt_gvt01.xml ]
      FAILED: Scenario 2 - testmqtt_gvt03 - Test ability to connect with GVT characters in user/password [ testmqtt_gvt03.xml ]
      FAILED: Scenario 4 - testmqtt_gvt06 - Test ability to connect with GVT characters E3 in user/password [ testmqtt_gvt06.xml ]
      FAILED: Scenario 5 - testmqtt_gvt02 - Test ability to connect over an SSL connection [ testmqtt_gvt02.xml ]
      FAILED: Scenario 2 - ssl/testmqtt_ssl05 - Test MQTT/WebSocket CommonName usage
      FAILED: Scenario 3 - ssl/testmqtt_ssl06 - Test MQTT/WebSocket CommonName usage
      FAILED: Scenario 4 - ssl/testmqtt_ssl07 - Test MQTT/WebSocket CommonName usage
      FAILED: Scenario 5 - ssl/testmqtt_ssl08 - Test MQTT/WebSocket CommonName usage in ClientID on ConnectionPolicy with asterisk character
      FAILED: Scenario 6 - ssl/testmqtt_ssl09a - Test MQTT/WebSocket CommonName usage in ClientID on ConnectionPolicy with asterisk character
      FAILED: Scenario 7 - ssl/testmqtt_ssl09b - Test MQTT/WebSocket CommonName usage in ClientID on ConnectionPolicy with asterisk character
      FAILED: Scenario 0 - deleteAllRetained0 - Delete any RETAINed messages, error if any exist
  "IBMjava80_jms_mqtt_td_tests" FAILED:
      FAILED: Scenario 0 - jms_mqtt_001 JMS to MQTT - Test 1 with Unicode Topic Name and RETAINED. [ jms_mqtt_001.xml ]
      FAILED: Scenario 12 - Clear any retained messages before running JMS Wildcard tests [ mqtt_clearRetained.xml ]
  "mqtt_xrscada" FAILED:
      FAILED: Scenario 17 - mqtt_clearRetained.xml - Clear all retained messages
      FAILED: Scenario 17 - mqtt_clearRetained.xml - Clear all retained messages
      FAILED: Scenario 17 - mqtt_clearRetained.xml - Clear all retained messages with MQTTv5
  "plugin_tests" FAILED:
      FAILED: Scenario 0 - testplugin_subscribe01 - Test MQTT/WebSocket subscribe to *#*
      FAILED: Scenario 5 - testplugin_subscribe06 - Test MQTT/WebSocket subscribe to *a/b/c* with QoS=1
      FAILED: Scenario 12 - testplugin_subscribe14 - Test MQTT/WebSocket subscribe to long topic (<32767 characters)
  "ws_mqtt_js_tests" FAILED:
      FAILED: Scenario 0 - jsclient_connect_1_b - Connect with a single char clientId (IPv6)
      FAILED: Scenario 1 - jsclient_connect_2_b - Connect using a clientId with a space and other chars
      FAILED: Scenario 2 - jsclient_connect_3_b - Connect with a single space as the clientId (IPv6)
      FAILED: Scenario 3 - jsclient_connect_4_b - Connect with multiple clients (synchronized)
      FAILED: Scenario 4 - jsclient_connect_5_b - Connect with a non-unique clientId (synchronized) (IPv6)
      FAILED: Scenario 5 - jsclient_connect_6_b - Connect to a server with a connection policy that only allows the MQTT protocol 
      FAILED: Scenario 7 - jsclient_connect_e10_b - Connect to a server with a connection policy that does not allow the MQTT protocol 
      FAILED: Scenario 8 - jsclient_connect_e11_b - Connect to a server with an Endpoint that does not allow the MQTT protocol 
      FAILED: Scenario 9 - jsclient_connect_e12_b - Create an Endpoint that does not have a ConnectionPolicy -  CLI
      FAILED: Scenario 1 - jsclient_sec_2_b - Connect to ISM server with SSL disabled, using a valid, non-empty username and password (IPv6)
      FAILED: Scenario 2 - jsclient_sec_3_b - Connect to ISM server with an MQTT-only ConnectionPolicy
      FAILED: Scenario 3 - jsclient_sec_4_b - Connect to ISM server with an MQTT-only Endpoint (IPv6)
      FAILED: Scenario 4 - jsclient_sec_5_b - Connect to ISM server with a ConnectionPolicy that authorizes only one user
      FAILED: Scenario 5 - jsclient_sec_6_b - Connect to ISM server using an authorized user (wildcards in ID on ConnectionPolicy) (IPv6)
      FAILED: Scenario 6 - jsclient_sec_e1_b - UserName is not specified (IPv6)
      FAILED: Scenario 7 - jsclient_sec_e2_b - User does not exist (was invalid UTF-8 test)
      FAILED: Scenario 8 - jsclient_sec_e3_b - User does not exist (IPv6)
      FAILED: Scenario 9 - jsclient_sec_e5_b - Incorrect password
      FAILED: Scenario 10 - jsclient_sec_e9_b - User is not authorized (IPv6)
      FAILED: Scenario 11 - jsclient_sec_e10_b - Insecure connection to a secure Endpoint
      FAILED: Scenario 12 - jsclient_sec_e12_b - Protocol is JMS on the ConnectionPolicy
      FAILED: Scenario 13 - jsclient_sec_e13_b - Protocol is JMS on the Endpoint (IPv6)
      FAILED: Scenario 14 - jsclient_sec_e14_b - Empty userName and password
      FAILED: Scenario 16 - jsclient_sec_e16_b - Empty userName and non-empty password
      FAILED: Scenario 2 - jsclient_pubsub_1_b - Basic publish/subscribe for the JavaScript Client
      FAILED: Scenario 3 - jsclient_pubsub_2_b - QoS=1 on publish (IPv6)
      FAILED: Scenario 4 - jsclient_pubsub_3_b - QoS=2 on publish
      FAILED: Scenario 5 - jsclient_pubsub_4_b - Multiple topics, QoS=0 on publish (IPv6)
      FAILED: Scenario 6 - jsclient_pubsub_5_b - Test for case-sensitivity in topic name
      FAILED: Scenario 7 - jsclient_pubsub_8_b - Specify a subscribe complete callback (IPv6)
      FAILED: Scenario 8 - jsclient_pubsub_10_b - Specify various callbacks for onsubscribe (IPv6)
      FAILED: Scenario 9 - jsclient_pubsub_11_b - Wildcard subscriptions
      FAILED: Scenario 10 - jsclient_pubsub_12_b - Mixed QoS on publish, QoS=0 on subscribe (IPv6)
      FAILED: Scenario 11 - jsclient_pubsub_13_b - Mixed QoS on publish, QoS=1 on subscribe
      FAILED: Scenario 12 - jsclient_pubsub_14_b - Mixed QoS on publish, QoS=2 on subscribe (IPv6)
      FAILED: Scenario 13 - jsclient_pubsub_15_b - Mixed QoS topics in one client
      FAILED: Scenario 14 - jsclient_pubsub_16_b - Mixed QoS client with wildcard subscriptions (IPv6)
      FAILED: Scenario 15 - jsclient_pubsub_17_b - Test retained
      FAILED: Scenario 16 - jsclient_pubsub_18_b - Retained message is not the last message
      FAILED: Scenario 17 - jsclient_pubsub_19_b - No unsubscribe before disconnect
      FAILED: Scenario 18 - jsclient_pubsub_22_b - Unsubscribe from the same topic twice
      FAILED: Scenario 19 - jsclient_pubsub_24_b - Test where publisher and subscriber are on different clients (synchronized)
      FAILED: Scenario 20 - jsclient_pubsub_25_b - Connect to an Connection/Messaging Policy that authorizes clients for the MQTT and JMS protocols (IPv6)
      FAILED: Scenario 21 - jsclient_pubsub_26_b - Connect to an Connection/Messaging Policy that authorizes MQTT clients only
      FAILED: Scenario 22 - jsclient_pubsub_27_b - Connect to an Connection/MessagingPolicy that authorizes a specific user/topic (IPv6)
      FAILED: Scenario 23 - jsclient_pubsub_e1_b - Test for invalid topic names on pub
      FAILED: Scenario 24 - jsclient_pubsub_e2_b - Test for invalid QoS values on pub
      FAILED: Scenario 25 - jsclient_pubsub_e3_b - Test for invalid retain value on pub
      FAILED: Scenario 26 - jsclient_pubsub_e4_b - Test for invalid wildcard placements on sub
      FAILED: Scenario 27 - jsclient_pubsub_e6_b - Test for invalid QoS values on sub
      FAILED: Scenario 28 - jsclient_pubsub_e7_b - Specify a non-function for subscribeCompleteCallback
      FAILED: Scenario 29 - jsclient_pubsub_e8_b - Specify a non-function for the onmessage callback for a client
      FAILED: Scenario 30 - jsclient_pubsub_e13_b - Test for unsubscribe with non-function callback
      FAILED: Scenario 31 - jsclient_pubsub_e14_b - Unsubscribe from a topic with invalid wc placement
      FAILED: Scenario 32 - jsclient_pubsub_e15_b - Attempt to publish/subscribe on an unauthorized protocol
      FAILED: Scenario 33 - jsclient_pubsub_e16_b - Attempt to publish/subscribe on an unauthorized topic
      FAILED: Scenario 1 - jsclient_gvt_1_b - GVT: ClientID test
      FAILED: Scenario 2 - jsclient_gvt_2_b - GVT: Topic name test
      FAILED: Scenario 3 - jsclient_gvt_3_b - GVT: userName and password test
      FAILED: Scenario 4 - jsclient_gvt_4_b - GVT: Will Topic and Message test
  "cli_tests" FAILED:
      FAILED: Scenario 0 - cli_GVT_MQTT_AUTO_ID_2 - policy test ID_2
      FAILED: Scenario 4 - cli_GVT_MQTT_AUTO_ID_4 - policy test ID_4
      FAILED: Scenario 16 - cli_GVT_MQTT_AUTO_ID_11 - policy test ID_11
      FAILED: Scenario 18 - cli_GVT_MQTT_AUTO_ID_12 - policy test ID_12
      FAILED: Scenario 20 - cli_GVT_MQTT_AUTO_ID_13 - policy test ID_13
      FAILED: Scenario 22 - cli_GVT_MQTT_AUTO_ID_14 - policy test ID_14
      FAILED: Scenario 24 - cli_GVT_MQTT_AUTO_ID_15 - policy test ID_15
      FAILED: Scenario 26 - cli_GVT_MQTT_AUTO_ID_16 - policy test ID_16
      FAILED: Scenario 28 - cli_GVT_MQTT_AUTO_ID_17 - policy test ID_17
      FAILED: Scenario 30 - cli_GVT_MQTT_AUTO_ID_18 - policy test ID_18
      FAILED: Scenario 34 - cli_GVT_MQTT_AUTO_ID_20 - policy test ID_20
      FAILED: Scenario 42 - cli_GVT_MQTT_AUTO_ID_24 - policy test ID_24
      FAILED: Scenario 44 - cli_GVT_MQTT_AUTO_ID_25 - policy test ID_25
      FAILED: Scenario 46 - cli_GVT_MQTT_AUTO_ID_26 - policy test ID_26
      FAILED: Scenario 52 - cli_GVT_MQTT_AUTO_ID_29 - policy test ID_29
      FAILED: Scenario 54 - cli_GVT_MQTT_AUTO_ID_31 - policy test ID_31
      FAILED: Scenario 60 - cli_GVT_MQTT_AUTO_ID_36 - policy test ID_36
      FAILED: Scenario 62 - cli_GVT_MQTT_AUTO_ID_37 - policy test ID_37
      FAILED: Scenario 64 - cli_GVT_MQTT_AUTO_ID_38 - policy test ID_38
      FAILED: Scenario 66 - cli_GVT_MQTT_AUTO_ID_40 - policy test ID_40
      FAILED: Scenario 72 - cli_GVT_MQTT_AUTO_ID_43 - policy test ID_43
      FAILED: Scenario 76 - cli_GVT_MQTT_AUTO_ID_45 - policy test ID_45
      FAILED: Scenario 2 - cli_security_test_001 - send test data to topic
      FAILED: Scenario 4 - cli_security_test_002 - send test data to topic
      FAILED: Scenario 6 - cli_security_test_003 - send test data to topic
      FAILED: Scenario 10 - cli_security_test_006 - send test data to topic - client auth
      FAILED: Scenario 14 - cli_security_test_008 - send should work
      FAILED: Scenario 19 - cli_security_test_012 - should work after ep gets new security profile
      FAILED: Scenario 7 - cli_stat_topics_test_007 - send test data to topic
      FAILED: Scenario 8 - cli_stat_topics_test_008 - validate stat command.
      FAILED: Scenario 19 - cli_stat_topics_test_016 - validate stat command.
  "snmp_tests" FAILED:
      FAILED: Scenario 5 - SNMP_verify_endpoint_info - Verify Endpoint Information
cAppDriverWait  ./ism-SNMP-VerifyMemoryInfo.sh FAILED to start!
      FAILED: Scenario 6 - SNMP_verify_memory_info - Verify Memory Information RC=1
      FAILED: runScenarios - SNMP Tests : Server stopped running during execution.
      FAILED: runScenarios - SNMP Tests : ism-SNMP-tests_Core - A core file was found on A1 after running ism-SNMP-tests.
      FAILED: runScenarios - SNMP Tests : ism-SNMP-tests_Core - A core file was found on A1 after running ism-SNMP-tests.
  "jca_tests" FAILED:
      FAILED: runScenarios - JCA Setup Objects - 00: 10.47.65.74 A1:Server may not be running. service/status returned RC=7
      FAILED: Scenario 13 - jca_api_001 - JCA api 001 - Test various JMS API*s in the RA environment
      FAILED: Scenario 4 - jca_ssltopic_003 - JCA SSL Topic 003
  "restapi" FAILED:
      FAILED: Scenario 0 - RESTAPI-00-ResetConfig - RESTAPI for Service Reset Config
      FAILED: Scenario 1 - RESTAPI-01-AdminLog - RESTAPI for AdminLog
      FAILED: Scenario 2 - RESTAPI-02-ConnectionLog - RESTAPI for ConnectionLog
      FAILED: Scenario 3 - RESTAPI-03-LogLevel - RESTAPI for LogLevel
      FAILED: Scenario 4 - RESTAPI-04-SecurityLog - RESTAPI for SecurityLog
      FAILED: Scenario 5 - RESTAPI-05-TraceBackup - RESTAPI for TraceBackup
      FAILED: Scenario 6 - RESTAPI-06-TraceBackupCount - RESTAPI for TraceBackupCount
      FAILED: Scenario 7 - RESTAPI-07-TraceBackupDestination - RESTAPI for TraceBackupDestination
      FAILED: Scenario 8 - RESTAPI-08-TraceConnection - RESTAPI for TraceConnection
      FAILED: Scenario 9 - RESTAPI-09-TraceLevel - RESTAPI for TraceLevel
      FAILED: Scenario 10 - RESTAPI-10-TraceMax - RESTAPI for TraceMax
      FAILED: Scenario 11 - RESTAPI-11-TraceMessageData - RESTAPI for TraceMessageData
      FAILED: Scenario 12 - RESTAPI-12-TraceOptions - RESTAPI for TraceOptions
      FAILED: Scenario 13 - RESTAPI-13-TraceSelected - RESTAPI for TraceSelected
      FAILED: Scenario 14 - RESTAPI-14-LogLocation - RESTAPI for LogLocation
      FAILED: Scenario 15 - RESTAPI-15-Syslog - RESTAPI for Syslog
      FAILED: Scenario 16 - RESTAPI-20-MessageHub - RESTAPI for MessageHub
      FAILED: Scenario 17 - RESTAPI-21-ConnectionPolicy - RESTAPI for ConnectionPolicy
      FAILED: Scenario 18 - RESTAPI-23-Endpoint - RESTAPI for Endpoint
      FAILED: Scenario 19 - RESTAPI-24-Queue - RESTAPI for Queue
      FAILED: Scenario 20 - RESTAPI-26-TopicPolicy - RESTAPI for TopicPolicy
      FAILED: Scenario 21 - RESTAPI-27-QueuePolicy - RESTAPI for QueuePolicy
      FAILED: Scenario 22 - RESTAPI-28-SubscriptionPolicy - RESTAPI for SubscriptionPolicy
      FAILED: Scenario 23 - RESTAPI-29-Plugin - RESTAPI for Plugin
      FAILED: Scenario 24 - RESTAPI-30-PluginDebugPort - RESTAPI for PluginDebugPort
      FAILED: Scenario 25 - RESTAPI-31-PluginDebugServer - RESTAPI for PluginDebugServer
      FAILED: Scenario 26 - RESTAPI-32-PluginMaxHeapSize - RESTAPI for PluginMaxHeapSize
      FAILED: Scenario 27 - RESTAPI-33-PluginPort - RESTAPI for PluginPort
      FAILED: Scenario 28 - RESTAPI-34-PluginServer - RESTAPI for PluginServer
      FAILED: Scenario 29 - RESTAPI-35-PluginVMArgs - RESTAPI for PluginVMArgs
      FAILED: Scenario 30 - RESTAPI-40-AdminEndpoint - RESTAPI for AdminEndpoint
      FAILED: Scenario 31 - RESTAPI-41-CertificateProfile - RESTAPI for CertificateProfile
      FAILED: Scenario 32 - RESTAPI-42-ConfigurationPolicy - RESTAPI for ConfigurationPolicy
      FAILED: Scenario 33 - RESTAPI-43-FIPS - RESTAPI for FIPS
      FAILED: Scenario 34 - RESTAPI-44-LDAP - RESTAPI for LDAP
      FAILED: Scenario 35 - RESTAPI-45-LTPAProfile - RESTAPI for LTPAProfile
      FAILED: Scenario 36 - RESTAPI-46-OAuthProfile - RESTAPI for OAuthProfile
      FAILED: Scenario 37 - RESTAPI-47-SecurityProfile - RESTAPI for SecurityProfile
      FAILED: Scenario 38 - RESTAPI-48-ClientCertificate - RESTAPI for ClientCertificate
      FAILED: Scenario 39 - RESTAPI-49-TrustedCertificate - RESTAPI for TrustedCertificate
      FAILED: Scenario 40 - RESTAPI-50-PreSharedKey - RESTAPI for PreSharedKey
      FAILED: Scenario 41 - RESTAPI-51-CRLProfile - RESTAPI for CRLProfile
      FAILED: Scenario 42 - RESTAPI-61-AdminUserID - RESTAPI for AdminUserID
      FAILED: Scenario 43 - RESTAPI-62-AdminUserPassword - RESTAPI for AdminUserPassword
      FAILED: Scenario 44 - RESTAPI-63-ClusterMembership - RESTAPI for ClusterMembership
      FAILED: Scenario 45 - RESTAPI-64-EnableDiskPersistence - RESTAPI for EnableDiskPersistence
      FAILED: Scenario 46 - RESTAPI-65-LicensedUsage - RESTAPI for LicensedUsage
      FAILED: Scenario 47 - RESTAPI-70-ClientSetScale - RESTAPI for ClientSet Scale and ForceDelete
      FAILED: Scenario 48 - RESTAPI-71-ClientSet - RESTAPI for OrgMove ClientSet:Import,Export,Delete ErrorPath
      FAILED: Scenario 49 - RESTAPI-72-SessionExpiry - server monitoring and MQTT clients for session expiration
      FAILED: Scenario 50 - RESTAPI-80-ServerName - RESTAPI for ServerName
      FAILED: Scenario 51 - RESTAPI-81-ServerUID - RESTAPI for ServerUID
      FAILED: Scenario 52 - RESTAPI-82-XATransaction - RESTAPI for XATransaction
      FAILED: Scenario 53 - RESTAPI-83-TolerateRecoveryInconsistencies - RESTAPI for TolerateRecoveryInconsistencies
      FAILED: Scenario 54 - RESTAPI-90-DestinationMappingRule - RESTAPI for DestinationMappingRule
      FAILED: Scenario 55 - RESTAPI-91-MQConnectivityEnabled - RESTAPI for MQConnectivityEnabled
      FAILED: Scenario 56 - RESTAPI-92-MQConnectivityLog - RESTAPI for MQConnectivityLog
      FAILED: Scenario 57 - RESTAPI-93-QueueManagerConnection - RESTAPI for QueueManagerConnection
      FAILED: Scenario 0 - RESTAPI-00-Service - RESTAPI for Service
cAppDriver  /niagara/test/restapi/synopsis.sh FAILED to start!
      FAILED: Scenario 1 - RESTAPI-99-Synopsis - Synopsis of RESTAPI Execution RC=1
      FAILED: Scenario 0 - RESTAPI-00-ServiceResetConfigComplete - RESTAPI for Service ResetConfig Complete

(RC!=0 for some tests, check individual results for details)
ismClient           A1AFcciCOD06g M1AFfvt09g M2AFfvt10g P1AFproxy05g                                Passed: 1346  Failed: 186
  "IBMjava80_jms_td_tests" FAILED:
      FAILED: Scenario 18 - jms_oauth_010_truststore - Test 10 - OAuth Test 10 with TrustStore set
  "IBMjava80_mqtt_td_tests" FAILED:
      FAILED: Scenario 1 - testmqtt_gvt01 - Test ability use GVT characters in topic and ClientID [ testmqtt_gvt01.xml ]
      FAILED: Scenario 2 - testmqtt_gvt03 - Test ability to connect with GVT characters in user/password [ testmqtt_gvt03.xml ]
      FAILED: Scenario 4 - testmqtt_gvt06 - Test ability to connect with GVT characters E3 in user/password [ testmqtt_gvt06.xml ]
      FAILED: Scenario 5 - testmqtt_gvt02 - Test ability to connect over an SSL connection [ testmqtt_gvt02.xml ]
      FAILED: Scenario 19 - testmqtt_NDS_04_MixedQoS - Non-Durable Shared Subscription at QoS=0, Busy test with lots of Disconnects and no unsubscribes 
      FAILED: Scenario 2 - ssl/testmqtt_ssl05 - Test MQTT/WebSocket CommonName usage
      FAILED: Scenario 3 - ssl/testmqtt_ssl06 - Test MQTT/WebSocket CommonName usage
      FAILED: Scenario 4 - ssl/testmqtt_ssl07 - Test MQTT/WebSocket CommonName usage
      FAILED: Scenario 5 - ssl/testmqtt_ssl08 - Test MQTT/WebSocket CommonName usage in ClientID on ConnectionPolicy with asterisk character
      FAILED: Scenario 6 - ssl/testmqtt_ssl09a - Test MQTT/WebSocket CommonName usage in ClientID on ConnectionPolicy with asterisk character
      FAILED: Scenario 7 - ssl/testmqtt_ssl09b - Test MQTT/WebSocket CommonName usage in ClientID on ConnectionPolicy with asterisk character
      FAILED: Scenario 0 - deleteAllRetained0 - Delete any RETAINed messages, error if any exist
  "IBMjava80_jms_mqtt_td_tests" FAILED:
      FAILED: Scenario 0 - jms_mqtt_001 JMS to MQTT - Test 1 with Unicode Topic Name and RETAINED. [ jms_mqtt_001.xml ]
      FAILED: Scenario 12 - Clear any retained messages before running JMS Wildcard tests [ mqtt_clearRetained.xml ]
  "mqtt_xrscada" FAILED:
      FAILED: Scenario 17 - mqtt_clearRetained.xml - Clear all retained messages
      FAILED: Scenario 17 - mqtt_clearRetained.xml - Clear all retained messages
      FAILED: Scenario 17 - mqtt_clearRetained.xml - Clear all retained messages with MQTTv5
  "plugin_tests" FAILED:
      FAILED: Scenario 0 - testplugin_subscribe01 - Test MQTT/WebSocket subscribe to *#*
      FAILED: Scenario 5 - testplugin_subscribe06 - Test MQTT/WebSocket subscribe to *a/b/c* with QoS=1
      FAILED: Scenario 12 - testplugin_subscribe14 - Test MQTT/WebSocket subscribe to long topic (<32767 characters)
  "ws_mqtt_js_tests" FAILED:
      FAILED: Scenario 0 - jsclient_connect_1_b - Connect with a single char clientId (IPv6)
      FAILED: Scenario 1 - jsclient_connect_2_b - Connect using a clientId with a space and other chars
      FAILED: Scenario 2 - jsclient_connect_3_b - Connect with a single space as the clientId (IPv6)
      FAILED: Scenario 3 - jsclient_connect_4_b - Connect with multiple clients (synchronized)
      FAILED: Scenario 4 - jsclient_connect_5_b - Connect with a non-unique clientId (synchronized) (IPv6)
      FAILED: Scenario 5 - jsclient_connect_6_b - Connect to a server with a connection policy that only allows the MQTT protocol 
      FAILED: Scenario 7 - jsclient_connect_e10_b - Connect to a server with a connection policy that does not allow the MQTT protocol 
      FAILED: Scenario 8 - jsclient_connect_e11_b - Connect to a server with an Endpoint that does not allow the MQTT protocol 
      FAILED: Scenario 9 - jsclient_connect_e12_b - Create an Endpoint that does not have a ConnectionPolicy -  CLI
      FAILED: Scenario 1 - jsclient_sec_2_b - Connect to ISM server with SSL disabled, using a valid, non-empty username and password (IPv6)
      FAILED: Scenario 2 - jsclient_sec_3_b - Connect to ISM server with an MQTT-only ConnectionPolicy
      FAILED: Scenario 3 - jsclient_sec_4_b - Connect to ISM server with an MQTT-only Endpoint (IPv6)
      FAILED: Scenario 4 - jsclient_sec_5_b - Connect to ISM server with a ConnectionPolicy that authorizes only one user
      FAILED: Scenario 5 - jsclient_sec_6_b - Connect to ISM server using an authorized user (wildcards in ID on ConnectionPolicy) (IPv6)
      FAILED: Scenario 6 - jsclient_sec_e1_b - UserName is not specified (IPv6)
      FAILED: Scenario 7 - jsclient_sec_e2_b - User does not exist (was invalid UTF-8 test)
      FAILED: Scenario 8 - jsclient_sec_e3_b - User does not exist (IPv6)
      FAILED: Scenario 9 - jsclient_sec_e5_b - Incorrect password
      FAILED: Scenario 10 - jsclient_sec_e9_b - User is not authorized (IPv6)
      FAILED: Scenario 11 - jsclient_sec_e10_b - Insecure connection to a secure Endpoint
      FAILED: Scenario 12 - jsclient_sec_e12_b - Protocol is JMS on the ConnectionPolicy
      FAILED: Scenario 13 - jsclient_sec_e13_b - Protocol is JMS on the Endpoint (IPv6)
      FAILED: Scenario 14 - jsclient_sec_e14_b - Empty userName and password
      FAILED: Scenario 16 - jsclient_sec_e16_b - Empty userName and non-empty password
      FAILED: Scenario 2 - jsclient_pubsub_1_b - Basic publish/subscribe for the JavaScript Client
      FAILED: Scenario 3 - jsclient_pubsub_2_b - QoS=1 on publish (IPv6)
      FAILED: Scenario 4 - jsclient_pubsub_3_b - QoS=2 on publish
      FAILED: Scenario 5 - jsclient_pubsub_4_b - Multiple topics, QoS=0 on publish (IPv6)
      FAILED: Scenario 6 - jsclient_pubsub_5_b - Test for case-sensitivity in topic name
      FAILED: Scenario 7 - jsclient_pubsub_8_b - Specify a subscribe complete callback (IPv6)
      FAILED: Scenario 8 - jsclient_pubsub_10_b - Specify various callbacks for onsubscribe (IPv6)
      FAILED: Scenario 9 - jsclient_pubsub_11_b - Wildcard subscriptions
      FAILED: Scenario 10 - jsclient_pubsub_12_b - Mixed QoS on publish, QoS=0 on subscribe (IPv6)
      FAILED: Scenario 11 - jsclient_pubsub_13_b - Mixed QoS on publish, QoS=1 on subscribe
      FAILED: Scenario 12 - jsclient_pubsub_14_b - Mixed QoS on publish, QoS=2 on subscribe (IPv6)
      FAILED: Scenario 13 - jsclient_pubsub_15_b - Mixed QoS topics in one client
      FAILED: Scenario 14 - jsclient_pubsub_16_b - Mixed QoS client with wildcard subscriptions (IPv6)
      FAILED: Scenario 15 - jsclient_pubsub_17_b - Test retained
      FAILED: Scenario 16 - jsclient_pubsub_18_b - Retained message is not the last message
      FAILED: Scenario 17 - jsclient_pubsub_19_b - No unsubscribe before disconnect
      FAILED: Scenario 18 - jsclient_pubsub_22_b - Unsubscribe from the same topic twice
      FAILED: Scenario 19 - jsclient_pubsub_24_b - Test where publisher and subscriber are on different clients (synchronized)
      FAILED: Scenario 20 - jsclient_pubsub_25_b - Connect to an Connection/Messaging Policy that authorizes clients for the MQTT and JMS protocols (IPv6)
      FAILED: Scenario 21 - jsclient_pubsub_26_b - Connect to an Connection/Messaging Policy that authorizes MQTT clients only
      FAILED: Scenario 22 - jsclient_pubsub_27_b - Connect to an Connection/MessagingPolicy that authorizes a specific user/topic (IPv6)
      FAILED: Scenario 23 - jsclient_pubsub_e1_b - Test for invalid topic names on pub
      FAILED: Scenario 24 - jsclient_pubsub_e2_b - Test for invalid QoS values on pub
      FAILED: Scenario 25 - jsclient_pubsub_e3_b - Test for invalid retain value on pub
      FAILED: Scenario 26 - jsclient_pubsub_e4_b - Test for invalid wildcard placements on sub
      FAILED: Scenario 27 - jsclient_pubsub_e6_b - Test for invalid QoS values on sub
      FAILED: Scenario 28 - jsclient_pubsub_e7_b - Specify a non-function for subscribeCompleteCallback
      FAILED: Scenario 29 - jsclient_pubsub_e8_b - Specify a non-function for the onmessage callback for a client
      FAILED: Scenario 30 - jsclient_pubsub_e13_b - Test for unsubscribe with non-function callback
      FAILED: Scenario 31 - jsclient_pubsub_e14_b - Unsubscribe from a topic with invalid wc placement
      FAILED: Scenario 32 - jsclient_pubsub_e15_b - Attempt to publish/subscribe on an unauthorized protocol
      FAILED: Scenario 33 - jsclient_pubsub_e16_b - Attempt to publish/subscribe on an unauthorized topic
      FAILED: Scenario 1 - jsclient_gvt_1_b - GVT: ClientID test
      FAILED: Scenario 2 - jsclient_gvt_2_b - GVT: Topic name test
      FAILED: Scenario 3 - jsclient_gvt_3_b - GVT: userName and password test
      FAILED: Scenario 4 - jsclient_gvt_4_b - GVT: Will Topic and Message test
  "cli_tests" FAILED:
      FAILED: Scenario 0 - cli_GVT_MQTT_AUTO_ID_2 - policy test ID_2
      FAILED: Scenario 4 - cli_GVT_MQTT_AUTO_ID_4 - policy test ID_4
      FAILED: Scenario 16 - cli_GVT_MQTT_AUTO_ID_11 - policy test ID_11
      FAILED: Scenario 18 - cli_GVT_MQTT_AUTO_ID_12 - policy test ID_12
      FAILED: Scenario 20 - cli_GVT_MQTT_AUTO_ID_13 - policy test ID_13
      FAILED: Scenario 22 - cli_GVT_MQTT_AUTO_ID_14 - policy test ID_14
      FAILED: Scenario 24 - cli_GVT_MQTT_AUTO_ID_15 - policy test ID_15
      FAILED: Scenario 26 - cli_GVT_MQTT_AUTO_ID_16 - policy test ID_16
      FAILED: Scenario 28 - cli_GVT_MQTT_AUTO_ID_17 - policy test ID_17
      FAILED: Scenario 30 - cli_GVT_MQTT_AUTO_ID_18 - policy test ID_18
      FAILED: Scenario 34 - cli_GVT_MQTT_AUTO_ID_20 - policy test ID_20
      FAILED: Scenario 42 - cli_GVT_MQTT_AUTO_ID_24 - policy test ID_24
      FAILED: Scenario 44 - cli_GVT_MQTT_AUTO_ID_25 - policy test ID_25
      FAILED: Scenario 46 - cli_GVT_MQTT_AUTO_ID_26 - policy test ID_26
      FAILED: Scenario 52 - cli_GVT_MQTT_AUTO_ID_29 - policy test ID_29
      FAILED: Scenario 54 - cli_GVT_MQTT_AUTO_ID_31 - policy test ID_31
      FAILED: Scenario 60 - cli_GVT_MQTT_AUTO_ID_36 - policy test ID_36
      FAILED: Scenario 62 - cli_GVT_MQTT_AUTO_ID_37 - policy test ID_37
      FAILED: Scenario 64 - cli_GVT_MQTT_AUTO_ID_38 - policy test ID_38
      FAILED: Scenario 66 - cli_GVT_MQTT_AUTO_ID_40 - policy test ID_40
      FAILED: Scenario 72 - cli_GVT_MQTT_AUTO_ID_43 - policy test ID_43
      FAILED: Scenario 76 - cli_GVT_MQTT_AUTO_ID_45 - policy test ID_45
      FAILED: Scenario 2 - cli_security_test_001 - send test data to topic
      FAILED: Scenario 4 - cli_security_test_002 - send test data to topic
      FAILED: Scenario 6 - cli_security_test_003 - send test data to topic
      FAILED: Scenario 10 - cli_security_test_006 - send test data to topic - client auth
      FAILED: Scenario 14 - cli_security_test_008 - send should work
      FAILED: Scenario 19 - cli_security_test_012 - should work after ep gets new security profile
      FAILED: Scenario 7 - cli_stat_topics_test_007 - send test data to topic
      FAILED: Scenario 8 - cli_stat_topics_test_008 - validate stat command.
      FAILED: Scenario 19 - cli_stat_topics_test_016 - validate stat command.
  "snmp_tests" FAILED:
      FAILED: Scenario 5 - SNMP_verify_endpoint_info - Verify Endpoint Information
      FAILED: Scenario 6 - SNMP_verify_memory_info - Verify Memory Information
      FAILED: Scenario 7 - SNMP_verify_server_info - Verify Server Information
      FAILED: Scenario 8 - SNMP_verify_harole_info - Verify HARole Information
      FAILED: Scenario 9 - SNMP_verify_General_info - Verify General Information
      FAILED: Scenario 10 - SNMP_settest_info - Set SNMP Values
      FAILED: Scenario 11 - SNMP_Cleanup_001 - Test 1 - Policy Cleanup for IMAServer objects
      FAILED: runScenarios - SNMP Tests : Server stopped running during execution.
      FAILED: runScenarios - SNMP Tests : ism-SNMP-tests_Core - A core file was found on A1 after running ism-SNMP-tests.
  "jca_tests" FAILED:
      FAILED: runScenarios - JCA Setup Objects - 00: 10.47.65.175 A1:Server may not be running. service/status returned RC=7
      FAILED: Scenario 13 - jca_api_001 - JCA api 001 - Test various JMS API*s in the RA environment
      FAILED: Scenario 4 - jca_ssltopic_003 - JCA SSL Topic 003
  "restapi" FAILED:
      FAILED: Scenario 0 - RESTAPI-00-ResetConfig - RESTAPI for Service Reset Config
      FAILED: Scenario 1 - RESTAPI-01-AdminLog - RESTAPI for AdminLog
      FAILED: Scenario 2 - RESTAPI-02-ConnectionLog - RESTAPI for ConnectionLog
      FAILED: Scenario 3 - RESTAPI-03-LogLevel - RESTAPI for LogLevel
      FAILED: Scenario 4 - RESTAPI-04-SecurityLog - RESTAPI for SecurityLog
      FAILED: Scenario 5 - RESTAPI-05-TraceBackup - RESTAPI for TraceBackup
      FAILED: Scenario 6 - RESTAPI-06-TraceBackupCount - RESTAPI for TraceBackupCount
      FAILED: Scenario 7 - RESTAPI-07-TraceBackupDestination - RESTAPI for TraceBackupDestination
      FAILED: Scenario 8 - RESTAPI-08-TraceConnection - RESTAPI for TraceConnection
      FAILED: Scenario 9 - RESTAPI-09-TraceLevel - RESTAPI for TraceLevel
      FAILED: Scenario 10 - RESTAPI-10-TraceMax - RESTAPI for TraceMax
      FAILED: Scenario 11 - RESTAPI-11-TraceMessageData - RESTAPI for TraceMessageData
      FAILED: Scenario 12 - RESTAPI-12-TraceOptions - RESTAPI for TraceOptions
      FAILED: Scenario 13 - RESTAPI-13-TraceSelected - RESTAPI for TraceSelected
      FAILED: Scenario 14 - RESTAPI-14-LogLocation - RESTAPI for LogLocation
      FAILED: Scenario 15 - RESTAPI-15-Syslog - RESTAPI for Syslog
      FAILED: Scenario 16 - RESTAPI-20-MessageHub - RESTAPI for MessageHub
      FAILED: Scenario 17 - RESTAPI-21-ConnectionPolicy - RESTAPI for ConnectionPolicy
      FAILED: Scenario 18 - RESTAPI-23-Endpoint - RESTAPI for Endpoint
      FAILED: Scenario 19 - RESTAPI-24-Queue - RESTAPI for Queue
      FAILED: Scenario 20 - RESTAPI-26-TopicPolicy - RESTAPI for TopicPolicy
      FAILED: Scenario 21 - RESTAPI-27-QueuePolicy - RESTAPI for QueuePolicy
      FAILED: Scenario 22 - RESTAPI-28-SubscriptionPolicy - RESTAPI for SubscriptionPolicy
      FAILED: Scenario 23 - RESTAPI-29-Plugin - RESTAPI for Plugin
      FAILED: Scenario 24 - RESTAPI-30-PluginDebugPort - RESTAPI for PluginDebugPort
      FAILED: Scenario 25 - RESTAPI-31-PluginDebugServer - RESTAPI for PluginDebugServer
      FAILED: Scenario 26 - RESTAPI-32-PluginMaxHeapSize - RESTAPI for PluginMaxHeapSize
      FAILED: Scenario 27 - RESTAPI-33-PluginPort - RESTAPI for PluginPort
      FAILED: Scenario 28 - RESTAPI-34-PluginServer - RESTAPI for PluginServer
      FAILED: Scenario 29 - RESTAPI-35-PluginVMArgs - RESTAPI for PluginVMArgs
      FAILED: Scenario 30 - RESTAPI-40-AdminEndpoint - RESTAPI for AdminEndpoint
      FAILED: Scenario 31 - RESTAPI-41-CertificateProfile - RESTAPI for CertificateProfile
      FAILED: Scenario 32 - RESTAPI-42-ConfigurationPolicy - RESTAPI for ConfigurationPolicy
      FAILED: Scenario 33 - RESTAPI-43-FIPS - RESTAPI for FIPS
      FAILED: Scenario 34 - RESTAPI-44-LDAP - RESTAPI for LDAP
      FAILED: Scenario 35 - RESTAPI-45-LTPAProfile - RESTAPI for LTPAProfile
      FAILED: Scenario 36 - RESTAPI-46-OAuthProfile - RESTAPI for OAuthProfile
      FAILED: Scenario 37 - RESTAPI-47-SecurityProfile - RESTAPI for SecurityProfile
      FAILED: Scenario 38 - RESTAPI-48-ClientCertificate - RESTAPI for ClientCertificate
      FAILED: Scenario 39 - RESTAPI-49-TrustedCertificate - RESTAPI for TrustedCertificate
      FAILED: Scenario 40 - RESTAPI-50-PreSharedKey - RESTAPI for PreSharedKey
      FAILED: Scenario 41 - RESTAPI-51-CRLProfile - RESTAPI for CRLProfile
      FAILED: Scenario 42 - RESTAPI-61-AdminUserID - RESTAPI for AdminUserID
      FAILED: Scenario 43 - RESTAPI-62-AdminUserPassword - RESTAPI for AdminUserPassword
      FAILED: Scenario 44 - RESTAPI-63-ClusterMembership - RESTAPI for ClusterMembership
      FAILED: Scenario 45 - RESTAPI-64-EnableDiskPersistence - RESTAPI for EnableDiskPersistence
      FAILED: Scenario 46 - RESTAPI-65-LicensedUsage - RESTAPI for LicensedUsage
      FAILED: Scenario 47 - RESTAPI-70-ClientSetScale - RESTAPI for ClientSet Scale and ForceDelete
      FAILED: Scenario 48 - RESTAPI-71-ClientSet - RESTAPI for OrgMove ClientSet:Import,Export,Delete ErrorPath
      FAILED: Scenario 49 - RESTAPI-72-SessionExpiry - server monitoring and MQTT clients for session expiration
      FAILED: Scenario 50 - RESTAPI-80-ServerName - RESTAPI for ServerName
      FAILED: Scenario 51 - RESTAPI-81-ServerUID - RESTAPI for ServerUID
      FAILED: Scenario 52 - RESTAPI-82-XATransaction - RESTAPI for XATransaction
      FAILED: Scenario 53 - RESTAPI-83-TolerateRecoveryInconsistencies - RESTAPI for TolerateRecoveryInconsistencies
      FAILED: Scenario 54 - RESTAPI-90-DestinationMappingRule - RESTAPI for DestinationMappingRule
      FAILED: Scenario 55 - RESTAPI-91-MQConnectivityEnabled - RESTAPI for MQConnectivityEnabled
      FAILED: Scenario 56 - RESTAPI-92-MQConnectivityLog - RESTAPI for MQConnectivityLog
      FAILED: Scenario 57 - RESTAPI-93-QueueManagerConnection - RESTAPI for QueueManagerConnection
      FAILED: Scenario 0 - RESTAPI-00-Service - RESTAPI for Service
cAppDriver  /niagara/test/restapi/synopsis.sh FAILED to start!
      FAILED: Scenario 1 - RESTAPI-99-Synopsis - Synopsis of RESTAPI Execution RC=1
      FAILED: Scenario 0 - RESTAPI-00-ServiceResetConfigComplete - RESTAPI for Service ResetConfig Complete


IMA Automated Framework Summary Report
==========================================================================================================================================
Build Type:       production
Server Release:   MGPROD @ 20210302-1459
Proxy Release:    MGPROD @ 20210302-1459
Client Release:   MGPROD @ 20210302-1459
Test Release:     MGPROD @ 20210302-1459
Test Group:       fvt_prod
Total Time:       11:42:36

Total Results:    Passed:  3128   Failed:   702   Success:  81.67%
                  (RC!=0 for some tests, check individual results for details)

Platform Results:
-------------------
CCI_CENTOS_DOCKER:    Passed:  3128   Failed:   702   Success:  81.67%

Individual Results:
-------------------
JMS:                  Passed:   616   Failed:   126   Success:  83.02%
JMS_MQTT:             Passed:    24   Failed:     4   Success:  85.71%
MQTT:                 Passed:   919   Failed:    35   Success:  96.33%
WS:                   Passed:    24   Failed:   120   Success:  16.67%
CLI:                  Passed:   803   Failed:    63   Success:  92.73%
REST_API:             Passed:    28   Failed:   100   Success:  21.88%
PROXY:                Passed:    91   Failed:   212   Success:  30.03%
MQ_CONN:              Passed:   169   Failed:     3   Success:  98.26%
HA:                   Passed:   169   Failed:    20   Success:  89.42%
CLUSTER:              Passed:   219   Failed:     0   Success: 100.00%
SNMP:                 Passed:    10   Failed:    12   Success:  45.45%

==========================================================================================================================================
=========================================== Summary of Failures by Number of Occurrences =================================================
==========================================================================================================================================
 4  to start!
 4  mqtt_clearRetained.xml - Clear all retained messages
 4  SNMP Tests : ism-SNMP-tests_Core - A core file was found on A1 after running ism-SNMP-tests.
 3  jca_topic_002 - JCA topic 002
 3  jca_topic_001 - JCA topic 001
 3  jca_shared_004 - JCA shared 004 - durable shared subscription with a clientid
 3  jca_shared_003 - JCA shared 003 - durable shared subscription without a clientid
 3  jca_shared_002 - JCA shared 002 - nondurable shared subscription with a clientid
 3  jca_shared_001 - JCA shared 001 - nondurable shared subscription without a clientid
 3  jca_retained_001 - JCA retained 001
 3  jca_queue_001 - JCA queue 001
 3  jca_jndi_topic - JCA JNDI Topic
 3  jca_jndi_queue - JCA JNDI Queue
 3  jca_api_001 - JCA api 001 - Test various JMS API*s in the RA environment
 2  testplugin_subscribe14 - Test MQTT/WebSocket subscribe to long topic (<32767 characters)
 2  testplugin_subscribe01 - Test MQTT/WebSocket subscribe to *#*
 2  testmqtt_stat02 - Test that stat MQTTClient shows correct clients
 2  testmqtt_gvt06 - Test ability to connect with GVT characters E3 in user/password [ testmqtt_gvt06.xml ]
 2  testmqtt_gvt03 - Test ability to connect with GVT characters in user/password [ testmqtt_gvt03.xml ]
 2  testmqtt_gvt02 - Test ability to connect over an SSL connection [ testmqtt_gvt02.xml ]
 2  testmqtt_gvt01 - Test ability use GVT characters in topic and ClientID [ testmqtt_gvt01.xml ]
 2  ssl/testmqtt_ssl09b - Test MQTT/WebSocket CommonName usage in ClientID on ConnectionPolicy with asterisk character
 2  ssl/testmqtt_ssl09a - Test MQTT/WebSocket CommonName usage in ClientID on ConnectionPolicy with asterisk character
 2  ssl/testmqtt_ssl08 - Test MQTT/WebSocket CommonName usage in ClientID on ConnectionPolicy with asterisk character
 2  ssl/testmqtt_ssl07 - Test MQTT/WebSocket CommonName usage
 2  ssl/testmqtt_ssl06 - Test MQTT/WebSocket CommonName usage
 2  ssl/testmqtt_ssl05 - Test MQTT/WebSocket CommonName usage
 2  mqtt_clearRetained.xml - Clear all retained messages with MQTTv5
 2  jsclient_sec_e9_b - User is not authorized (IPv6)
 2  jsclient_sec_e5_b - Incorrect password
 2  jsclient_sec_e3_b - User does not exist (IPv6)
 2  jsclient_sec_e2_b - User does not exist (was invalid UTF-8 test)
 2  jsclient_sec_e1_b - UserName is not specified (IPv6)
 2  jsclient_sec_e16_b - Empty userName and non-empty password
 2  jsclient_sec_e14_b - Empty userName and password
 2  jsclient_sec_e13_b - Protocol is JMS on the Endpoint (IPv6)
 2  jsclient_sec_e12_b - Protocol is JMS on the ConnectionPolicy
 2  jsclient_sec_e10_b - Insecure connection to a secure Endpoint
 2  jsclient_sec_6_b - Connect to ISM server using an authorized user (wildcards in ID on ConnectionPolicy) (IPv6)
 2  jsclient_sec_5_b - Connect to ISM server with a ConnectionPolicy that authorizes only one user
 2  jsclient_sec_4_b - Connect to ISM server with an MQTT-only Endpoint (IPv6)
 2  jsclient_sec_3_b - Connect to ISM server with an MQTT-only ConnectionPolicy
 2  jsclient_sec_2_b - Connect to ISM server with SSL disabled, using a valid, non-empty username and password (IPv6)
 2  jsclient_pubsub_e8_b - Specify a non-function for the onmessage callback for a client
 2  jsclient_pubsub_e7_b - Specify a non-function for subscribeCompleteCallback
 2  jsclient_pubsub_e6_b - Test for invalid QoS values on sub
 2  jsclient_pubsub_e4_b - Test for invalid wildcard placements on sub
 2  jsclient_pubsub_e3_b - Test for invalid retain value on pub
 2  jsclient_pubsub_e2_b - Test for invalid QoS values on pub
 2  jsclient_pubsub_e1_b - Test for invalid topic names on pub
 2  jsclient_pubsub_e16_b - Attempt to publish/subscribe on an unauthorized topic
 2  jsclient_pubsub_e15_b - Attempt to publish/subscribe on an unauthorized protocol
 2  jsclient_pubsub_e14_b - Unsubscribe from a topic with invalid wc placement
 2  jsclient_pubsub_e13_b - Test for unsubscribe with non-function callback
 2  jsclient_pubsub_8_b - Specify a subscribe complete callback (IPv6)
 2  jsclient_pubsub_5_b - Test for case-sensitivity in topic name
 2  jsclient_pubsub_4_b - Multiple topics, QoS=0 on publish (IPv6)
 2  jsclient_pubsub_3_b - QoS=2 on publish
 2  jsclient_pubsub_2_b - QoS=1 on publish (IPv6)
 2  jsclient_pubsub_27_b - Connect to an Connection/MessagingPolicy that authorizes a specific user/topic (IPv6)
 2  jsclient_pubsub_26_b - Connect to an Connection/Messaging Policy that authorizes MQTT clients only
 2  jsclient_pubsub_25_b - Connect to an Connection/Messaging Policy that authorizes clients for the MQTT and JMS protocols (IPv6)
 2  jsclient_pubsub_24_b - Test where publisher and subscriber are on different clients (synchronized)
 2  jsclient_pubsub_22_b - Unsubscribe from the same topic twice
 2  jsclient_pubsub_1_b - Basic publish/subscribe for the JavaScript Client
 2  jsclient_pubsub_19_b - No unsubscribe before disconnect
 2  jsclient_pubsub_18_b - Retained message is not the last message
 2  jsclient_pubsub_17_b - Test retained
 2  jsclient_pubsub_16_b - Mixed QoS client with wildcard subscriptions (IPv6)
 2  jsclient_pubsub_15_b - Mixed QoS topics in one client
 2  jsclient_pubsub_14_b - Mixed QoS on publish, QoS=2 on subscribe (IPv6)
 2  jsclient_pubsub_13_b - Mixed QoS on publish, QoS=1 on subscribe
 2  jsclient_pubsub_12_b - Mixed QoS on publish, QoS=0 on subscribe (IPv6)
 2  jsclient_pubsub_11_b - Wildcard subscriptions
 2  jsclient_pubsub_10_b - Specify various callbacks for onsubscribe (IPv6)
 2  jsclient_gvt_4_b - GVT: Will Topic and Message test
 2  jsclient_gvt_3_b - GVT: userName and password test
 2  jsclient_gvt_2_b - GVT: Topic name test
 2  jsclient_gvt_1_b - GVT: ClientID test
 2  jsclient_connect_e12_b - Create an Endpoint that does not have a ConnectionPolicy -  CLI
 2  jsclient_connect_e11_b - Connect to a server with an Endpoint that does not allow the MQTT protocol
 2  jsclient_connect_e10_b - Connect to a server with a connection policy that does not allow the MQTT protocol
 2  jsclient_connect_6_b - Connect to a server with a connection policy that only allows the MQTT protocol
 2  jsclient_connect_5_b - Connect with a non-unique clientId (synchronized) (IPv6)
 2  jsclient_connect_4_b - Connect with multiple clients (synchronized)
 2  jsclient_connect_3_b - Connect with a single space as the clientId (IPv6)
 2  jsclient_connect_2_b - Connect using a clientId with a space and other chars
 2  jsclient_connect_1_b - Connect with a single char clientId (IPv6)
 2  jms_oauth_010_truststore - Test 10 - OAuth Test 10 with TrustStore set
 2  jms_mqtt_001 JMS to MQTT - Test 1 with Unicode Topic Name and RETAINED. [ jms_mqtt_001.xml ]
 2  jca_xaerror_start_statelessCMT - EvilRA throws Error in start() in XA
 2  jca_xaerror_start_statelessBMTUT - EvilRA throws Error in start() in XA
 2  jca_xaerror_prepare_statelessCMT - EvilRA throws Error in prepare() in XA
 2  jca_xaerror_prepare_statelessBMTUT - EvilRA throws Error in prepare() in XA
 2  jca_xaerror_none_statelessCMT - A check to make sure Evil RA works
 2  jca_xaerror_none_statelessBMTUT - A check to make sure Evil RA works
 2  jca_xaerror_end_statelessCMT - EvilRA throws Error in end() in XA
 2  jca_xaerror_end_statelessBMTUT - EvilRA throws Error in end() in XA
 2  jca_xaerror_commit_statelessCMT - EvilRA throws Error in commit() in XA
 2  jca_xaerror_commit_statelessBMTUT - EvilRA throws Error in commit() in XA
 2  jca_translevel_004 - transationLevelSupport = NoTransaction with BMTUT MDB
 2  jca_translevel_003 - transationLevelSupport = NoTransaction with CMTR MDB and Supports EJB
 2  jca_translevel_002 - transationLevelSupport = Local with BMT MDB and EJB
 2  jca_translevel_001 - transactionLevelSupport = Local with CMTNS MDB and CMTR EJB
 2  jca_ssltopic_002 - JCA SSL Topic 002
 2  jca_ssltopic_001 - JCA SSL Topic 001
 2  jca_sslqueue_002 - JCA SSL Queue 002 - User authentication on outbound
 2  jca_sslqueue_001 - JCA SSL Queue 001
 2  jca_reconnect_002 - Durable Shared subscription CMTR MDB, max messages and an imaserver restart
 2  jca_reconnect_001 - JCA Reconnect 001
 2  jca_pause_003 - ignoreFailuresOnStart activation spec property test
 2  jca_pause_002 - MDB Pause - this test should cause the MDB to pause
 2  jca_pause_001 - MDB Pause - this test should not cause the MDB to pause
 2  jca_enablerb_004 - enable rollback = false CMTNS
 2  jca_enablerb_003 - enable rollback = false BMT
 2  jca_enablerb_002 - enable rollback = true CMTNS
 2  jca_enablerb_001 - enable rollback = true BMT
 2  jca_dest_full - CMTR MDB and max messages
 2  jca_cmtr_topic - Stateless Session Bean with Container Managed Transactions - MDB Required
 2  jca_cmtr_queue - Stateless Session Bean with Container Managed Transactions - MDB Required - Queue
 2  jca_cmtr_nodb2_topic - Stateless Session Bean with Container Managed Transactions - MDB Required - no DB2
 2  jca_cmtns_topic - Stateless Session Bean with Container Managed Transactions - MDB NotSupported
 2  jca_cmtns_queue - Stateless Session Bean with Container Managed Transactions - MDB NotSupported - Queue
 2  jca_cmtns_nodb2_topic - Stateless Session Bean with Container Managed Transactions - MDB NotSupported - no DB2
 2  jca_cmt_rb_queue - Container Managed Transactions with rollback - queue
 2  jca_cmt_rb_persistent - Container Managed Transactions with rollback - persistent
 2  jca_cmt_rb_nonpersistent - Container Managed Transactions with rollback - nonpersistent
 2  jca_bmtut_topic - Stateless Session Bean with Bean Managed Transactions on a topic
 2  jca_bmtut_rb_queue - Bean Managed Transactions and rollback with a queue
 2  jca_bmtut_rb_persistent - Bean Managed Transactions and rollback with persistent messages
 2  jca_bmtut_rb_nonpersistent - Bean Managed Transactions and rollback with non-persistent messages
 2  jca_bmtut_queue - Stateless Session Bean with Bean Managed Transactions on a queue
 2  heur_rollback_cmt - JCA Heuristic XA CMT Rollback
 2  heur_rollback_bmt - JCA Heuristic XA BMT Rollback
 2  heur_prepRB_cmt - JCA Heuristic XA CMT crash on prepare then rollback
 2  heur_prepRB_bmt - JCA Heuristic XA BMT crash on prepare then rollback
 2  heur_prepCommit_cmt - JCA Heuristic XA CMT crash on prepare then commit
 2  heur_prepCommit_bmt - JCA Heuristic XA BMT crash on prepare then commit
 2  heur_commit_cmt - JCA Heuristic XA CMT Commit
 2  heur_commit_bmt - JCA Heuristic XA BMT Commit
 2  deleteAllRetained0 - Delete any RETAINed messages, error if any exist
 2  cli_stat_topics_test_016 - validate stat command.
 2  cli_stat_topics_test_008 - validate stat command.
 2  cli_stat_topics_test_007 - send test data to topic
 2  cli_security_test_012 - should work after ep gets new security profile
 2  cli_security_test_008 - send should work
 2  cli_security_test_006 - send test data to topic - client auth
 2  cli_security_test_003 - send test data to topic
 2  cli_security_test_002 - send test data to topic
 2  cli_security_test_001 - send test data to topic
 2  cli_GVT_MQTT_AUTO_ID_45 - policy test ID_45
 2  cli_GVT_MQTT_AUTO_ID_43 - policy test ID_43
 2  cli_GVT_MQTT_AUTO_ID_40 - policy test ID_40
 2  cli_GVT_MQTT_AUTO_ID_4 - policy test ID_4
 2  cli_GVT_MQTT_AUTO_ID_38 - policy test ID_38
 2  cli_GVT_MQTT_AUTO_ID_37 - policy test ID_37
 2  cli_GVT_MQTT_AUTO_ID_36 - policy test ID_36
 2  cli_GVT_MQTT_AUTO_ID_31 - policy test ID_31
 2  cli_GVT_MQTT_AUTO_ID_29 - policy test ID_29
 2  cli_GVT_MQTT_AUTO_ID_26 - policy test ID_26
 2  cli_GVT_MQTT_AUTO_ID_25 - policy test ID_25
 2  cli_GVT_MQTT_AUTO_ID_24 - policy test ID_24
 2  cli_GVT_MQTT_AUTO_ID_20 - policy test ID_20
 2  cli_GVT_MQTT_AUTO_ID_2 - policy test ID_2
 2  cli_GVT_MQTT_AUTO_ID_18 - policy test ID_18
 2  cli_GVT_MQTT_AUTO_ID_17 - policy test ID_17
 2  cli_GVT_MQTT_AUTO_ID_16 - policy test ID_16
 2  cli_GVT_MQTT_AUTO_ID_15 - policy test ID_15
 2  cli_GVT_MQTT_AUTO_ID_14 - policy test ID_14
 2  cli_GVT_MQTT_AUTO_ID_13 - policy test ID_13
 2  cli_GVT_MQTT_AUTO_ID_12 - policy test ID_12
 2  cli_GVT_MQTT_AUTO_ID_11 - policy test ID_11
 2  bridgePx.SimpleA1A2 - Test Simple Pub-Fwd-Recv through Bridge   bridge_tests/proxy/ism-Bridge-Proxy01.sh
 2  bridgePx.MultiFWD_V3Source - Test Multile Forwarders with V3 Source Bridge   bridge_tests/proxy/ism-Bridge-Proxy01.sh
 2  bridgePx.MaxFWDTopics - Test Max Forwarder Topics Bridge   bridge_tests/proxy/ism-Bridge-Proxy01.sh
 2  SNMP_verify_memory_info - Verify Memory Information RC=1
 2  SNMP_verify_endpoint_info - Verify Endpoint Information
 2  SNMP Tests : Server stopped running during execution.
 2  RESTAPI-99-Synopsis - Synopsis of RESTAPI Execution RC=1
 2  RESTAPI-93-QueueManagerConnection - RESTAPI for QueueManagerConnection
 2  RESTAPI-90-DestinationMappingRule - RESTAPI for DestinationMappingRule
 2  RESTAPI-83-TolerateRecoveryInconsistencies - RESTAPI for TolerateRecoveryInconsistencies
 2  RESTAPI-81-ServerUID - RESTAPI for ServerUID
 2  RESTAPI-80-ServerName - RESTAPI for ServerName
 2  RESTAPI-65-LicensedUsage - RESTAPI for LicensedUsage
 2  RESTAPI-63-ClusterMembership - RESTAPI for ClusterMembership
 2  RESTAPI-61-AdminUserID - RESTAPI for AdminUserID
 2  RESTAPI-49-TrustedCertificate - RESTAPI for TrustedCertificate
 2  RESTAPI-48-ClientCertificate - RESTAPI for ClientCertificate
 2  RESTAPI-47-SecurityProfile - RESTAPI for SecurityProfile
 2  RESTAPI-46-OAuthProfile - RESTAPI for OAuthProfile
 2  RESTAPI-45-LTPAProfile - RESTAPI for LTPAProfile
 2  RESTAPI-44-LDAP - RESTAPI for LDAP
 2  RESTAPI-43-FIPS - RESTAPI for FIPS
 2  RESTAPI-42-ConfigurationPolicy - RESTAPI for ConfigurationPolicy
 2  RESTAPI-41-CertificateProfile - RESTAPI for CertificateProfile
 2  RESTAPI-40-AdminEndpoint - RESTAPI for AdminEndpoint
 2  RESTAPI-35-PluginVMArgs - RESTAPI for PluginVMArgs
 2  RESTAPI-34-PluginServer - RESTAPI for PluginServer
 2  RESTAPI-33-PluginPort - RESTAPI for PluginPort
 2  RESTAPI-32-PluginMaxHeapSize - RESTAPI for PluginMaxHeapSize
 2  RESTAPI-31-PluginDebugServer - RESTAPI for PluginDebugServer
 2  RESTAPI-30-PluginDebugPort - RESTAPI for PluginDebugPort
 2  RESTAPI-29-Plugin - RESTAPI for Plugin
 2  RESTAPI-28-SubscriptionPolicy - RESTAPI for SubscriptionPolicy
 2  RESTAPI-27-QueuePolicy - RESTAPI for QueuePolicy
 2  RESTAPI-26-TopicPolicy - RESTAPI for TopicPolicy
 2  RESTAPI-24-Queue - RESTAPI for Queue
 2  RESTAPI-23-Endpoint - RESTAPI for Endpoint
 2  RESTAPI-21-ConnectionPolicy - RESTAPI for ConnectionPolicy
 2  RESTAPI-20-MessageHub - RESTAPI for MessageHub
 2  RESTAPI-15-Syslog - RESTAPI for Syslog
 2  RESTAPI-13-TraceSelected - RESTAPI for TraceSelected
 2  RESTAPI-12-TraceOptions - RESTAPI for TraceOptions
 2  RESTAPI-11-TraceMessageData - RESTAPI for TraceMessageData
 2  RESTAPI-10-TraceMax - RESTAPI for TraceMax
 2  RESTAPI-09-TraceLevel - RESTAPI for TraceLevel
 2  RESTAPI-08-TraceConnection - RESTAPI for TraceConnection
 2  RESTAPI-07-TraceBackupDestination - RESTAPI for TraceBackupDestination
 2  RESTAPI-06-TraceBackupCount - RESTAPI for TraceBackupCount
 2  RESTAPI-05-TraceBackup - RESTAPI for TraceBackup
 2  RESTAPI-04-SecurityLog - RESTAPI for SecurityLog
 2  RESTAPI-03-LogLevel - RESTAPI for LogLevel
 2  RESTAPI-02-ConnectionLog - RESTAPI for ConnectionLog
 2  RESTAPI-01-AdminLog - RESTAPI for AdminLog
 2  RESTAPI-00-Service - RESTAPI for Service
 2  RESTAPI-00-ResetConfig - RESTAPI for Service Reset Config
 2  MQ_CON_BOUNDARIES_04 - com.ibm.ima.mqcon.boundaries MQTT messages are published to a topic which is associated with a destination mapping rule in order to check that the max messages value is being enforced
 2  Clear any retained messages before running JMS Wildcard tests [ mqtt_clearRetained.xml ]
 1  testproxy_v5connect_MPS - Test MQTTV5 that we don*t exceed Maximum Packet Size specified by client
 1  testproxy_tls09_ProxyDfltStore_CltCrtExactMatchg - Test TLS connections succeed for SGEnabled=false config when client cert store contains dflt proxy cert and client cert CN exactly matches client ID [ testproxy_tls09_ProxyDfltStore_CltCrtExactMatchg.xml ]
 1  testproxy_tls09_ProxyDfltStore_CltCrtExactMatchg - Test TLS connections succeed for SGEnabled=false config when client cert store contains dflt proxy cert and CN exact matching client cert. Also check that connections succeed when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls09_ProxyDfltStore_CltCrtExactMatchg.xml ]
 1  testproxy_tls08c_ClientCert1CrtInDERCRL - Test ability to connect to Proxy TLS port using client certificate authentication with DER format CRL and 1 reovoked cert - conn should succeed for cert that is not revoked [ testproxy_tls08c_ClientCert1CrtInDERCRL.xml ]
 1  testproxy_tls08b_ClientCert1CrtInDERCRL - Test ability to connect to Proxy TLS port using client certificate authentication with DER format CRL and 1 reovoked cert - conn should succeed for cert that is not revoked [ testproxy_tls08b_ClientCert1CrtInDERCRL.xml ]
 1  testproxy_tls08_ProxyDfltStore_CltCrtPartialMatchg - Test TLS connections succeed for SGEnabled=true config when client cert store contains dflt proxy cert and SAN partial matching client cert. Also check that connections succeed when partial match betw CN/SAN & clientId is required and failes when exact match is required. [ testproxy_tls08_ProxyDfltStore_CltCrtPartialMatchg.xml ]
 1  testproxy_tls08_ProxyDfltStore_CltCrtPartialMatchg - Test TLS connections succeed for SGEnabled=false config when client cert store contains dflt proxy cert and client cert SAN partially matches client ID [ testproxy_tls08_ProxyDfltStore_CltCrtPartialMatchg.xml ]
 1  testproxy_tls07s_OrgSrvStore_CltCrtExactMatchg - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert and client cert CN exactly matches client ID. Also check that connection succeeds when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls07s_OrgSrvStore_CltCrtExactMatchg.xml ]
 1  testproxy_tls07s_OrgSrvStore_CltCrtExactMatchg - Test TLS connections succeed for SGEnabled=false config with org server cert when client cert store contains dflt proxy cert and client cert CN exactly matches client ID [ testproxy_tls07s_OrgSrvStore_CltCrtExactMatchg.xml ]
 1  testproxy_tls07c_ClientCertEmptyDERCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty DER format CRL (cert 3 of 3) [ testproxy_tls07c_ClientCertEmptyDERCRL.xml ]
 1  testproxy_tls07b_ClientCertEmptyDERCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty DER format CRL (cert 2 of 3) [ testproxy_tls07b_ClientCertEmptyDERCRL.xml ]
 1  testproxy_tls07a_ClientCertEmptyDERCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty DER format CRL (cert 1 of 3) [ testproxy_tls07a_ClientCertEmptyDERCRL.xml ]
 1  testproxy_tls07_ProxyDfltStore_CltCrtExactMatchd - Test TLS connections succeed for SGEnabled=true config when client cert store contains dflt proxy cert and SAN exact matching client cert. Also check that connections succeed when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls07_ProxyDfltStore_CltCrtExactMatchd.xml ]
 1  testproxy_tls07_ProxyDfltStore_CltCrtExactMatchd - Test TLS connections succeed for SGEnabled=false config when client cert store contains dflt proxy cert and client cert SAN exactly matches client ID [ testproxy_tls07_ProxyDfltStore_CltCrtExactMatchd.xml ]
 1  testproxy_tls06s_OrgSrvStore_CltCrtPartialMatchg - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert and client cert SAN partially matches client ID. Also check that connection succeeds when partial match betw CN/SAN & clientId is required and fails when exact match is required. [ testproxy_tls06s_OrgSrvStore_CltCrtPartialMatchg.xml ]
 1  testproxy_tls06s_OrgSrvStore_CltCrtPartialMatchg - Test TLS connections succeed for SGEnabled=false config with org server cert when client cert store contains dflt proxy cert and client cert SAN partially matches client ID [ testproxy_tls06s_OrgSrvStore_CltCrtPartialMatchg.xml ]
 1  testproxy_tls06c_ClientCert2CrtsInCRL - Test ability to connect to Proxy TLS port using client certificate authentication with CRL and 2 reovoked certs - conn for non-revoked cert should succeed [ testproxy_tls06c_ClientCert2CrtsInCRL.xml ]
 1  testproxy_tls06_ProxyDfltStore_CltCrtPartialMatchd - Test TLS connections succeed for SGEnabled=true config when client cert store contains dflt proxy cert and CN partial matching client cert. Also test connections succeed when partial match betw CN/SAN & clientId is required and fails when exact match is required. [ testproxy_tls06_ProxyDfltStore_CltCrtPartialMatchd.xml ]
 1  testproxy_tls06_ProxyDfltStore_CltCrtPartialMatchd - Test TLS connections succeed for SGEnabled=false config when client cert store contains dflt proxy cert and client cert CN partially matches client ID [ testproxy_tls06_ProxyDfltStore_CltCrtPartialMatchd.xml ]
 1  testproxy_tls05s_OrgSrvStore_CltCrtExactMatchd - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert and client cert SAN exactly matches client ID. Also check that connection succeeds when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls05s_OrgSrvStore_CltCrtExactMatchd.xml ]
 1  testproxy_tls05s_OrgSrvStore_CltCrtExactMatchd - Test TLS connections succeed for SGEnabled=false config with org server cert when client cert store contains dflt proxy cert and client cert SAN exactly matches client ID [ testproxy_tls05s_OrgSrvStore_CltCrtExactMatchd.xml ]
 1  testproxy_tls05c_ClientCertEmptyCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty CRL (cert 3 of 3) [ testproxy_tls05c_ClientCertEmptyCRL.xml ]
 1  testproxy_tls05b_ClientCertEmptyCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty CRL (cert 2 of 3) [ testproxy_tls05b_ClientCertEmptyCRL.xml ]
 1  testproxy_tls05a_ClientCertEmptyCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty CRL (cert 1 of 3) [ testproxy_tls05a_ClientCertEmptyCRL.xml ]
 1  testproxy_tls05_ProxyDfltStore_CltCrtNoMatch - Test TLS connections succeed for SGEnabled=true config when client cert store contains dflt proxy cert and non-matching client cert. Also test connections fail when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls05_ProxyDfltStore_CltCrtNoMatch.xml ]
 1  testproxy_tls04s_OrgSrvStore_CltCrtPartialMatchd - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert and client cert CN partially matches client ID. Also check that connection succeeds when partial match betw CN/SAN & clientId is required and fails when exact match is required. [ testproxy_tls04s_OrgSrvStore_CltCrtPartialMatchd.xml ]
 1  testproxy_tls04s_OrgSrvStore_CltCrtPartialMatchd - Test TLS connections succeed for SGEnabled=false config with org server cert when client cert store contains dflt proxy cert and client cert CN partially matches client ID [ testproxy_tls04s_OrgSrvStore_CltCrtPartialMatchd.xml ]
 1  testproxy_tls04_MqttsEpStore_WithUser - Test ability to connect to Proxy TLS port with a user [ testproxy_tls04_MqttsEpStore_WithUser.xml ]
 1  testproxy_tls03s_OrgSrvStore_CltCrtNoMatch - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert and non-matching client cert. Also check that connections fail when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls03s_OrgSrvStore_CltCrtNoMatch.xml ]
 1  testproxy_tls03_MqttsEpStore - Test ability to connect to Proxy TLS port [ testproxy_tls03_MqttsEpStore.xml ]
 1  testproxy_tls03_MqttsEpStore - Test TLS connections succeed for SGEnabled=true config when client cert store contains mqtts ep cert only [ testproxy_tls03_MqttsEpStore.xml ]
 1  testproxy_tls02s_OrgSrvStore - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert only [ testproxy_tls02s_OrgSrvStore.xml ]
 1  testproxy_tls02_WrongStore - Test ability to connect to Proxy TLS port with wrong cert in store for self signed server cert - conn should fail [ testproxy_tls02_WrongStore.xml ]
 1  testproxy_tls01_NoTLS - Test that non-TLS connections succeed for SGEnabled=true configuration [ testproxy_tls01_NoTLS.xml ]
 1  testproxy_tls01_NoStore - Test ability to connect to Proxy TLS port with no store and self signed server cert - conn should fail [ testproxy_tls01_NoStore.xml ]
 1  testproxy_tenant07-iot2 - Connect device on iot2, check Registered Org rules
 1  testproxy_tenant06-quickstart2 - Connect application quickstart2, check QuickStart Rules
 1  testproxy_tenant05-quickstart2 - Connect application and device on quickstart2, only device publish and only application subscribe
 1  testproxy_tenant04-quickstart2 - Connect an application on Quickstart2 requiring no user/password, test that tenant name is properly added in topic sent on to MessageSight
 1  testproxy_tenant03-quickstart2 - Connect a device on Quickstart2 requiring no user/password, test that tenant name is properly added in topic sent on to MessageSight
 1  testproxy_tenant02-iot2 - Connect an application on IoT2 requiring user/password, test that tenant name is properly added in topic sent on to MessageSight, test that tenant not in cfg files fails
 1  testproxy_tenant01-iot2 - Connect a device on IoT2 requiring user/password, test that no user/password fails, test that org name is properly added in topic sent on to MessageSight
 1  testproxy_subscribe23 - Test publish and receive with 0 length message
 1  testproxy_subscribe22 - Test MQTT test subscribe to /a/c/+
 1  testproxy_subscribe21 - Test MQTT test subscribe, close, subscribe
 1  testproxy_subscribe20 - Test MQTT test subscribe to +
 1  testproxy_subscribe17 - Test MQTT 1)Subscribe to same specific topic twice, should only receive messages once
 1  testproxy_subscribe16 - Test MQTT/WebSocket subscribe send 1600 messages on each of two topics
 1  testproxy_subscribe15 - Test MQTT/WebSocket subscribe to long topic (<32767 characters)
 1  testproxy_subscribe14 - Test MQTT/WebSocket subscribe to long topic (<32767 characters)
 1  testproxy_subscribe13 - Test MQTT/WebSocket subscribe to *a/b/c* QoS=0 publish QoS=1 and Qos=2
 1  testproxy_subscribe11 - Test MQTT/WebSocket subscribe to *a/b/c* QoS=0
 1  testproxy_subscribe10 - Test MQTT/WebSocket subscribe to *a/b/c* and *a/b/+*, make sure a/b/c messages are not delivered twice
 1  testproxy_subscribe09 - Test MQTT/WebSocket subscribe to *a/b/c* with QoS=1 and *a/b/d* with QoS=0
 1  testproxy_subscribe08 - Test MQTT/WebSocket subscribe to *a/b/c* and *a/b/d*
 1  testproxy_subscribe07 - Test MQTT/WebSocket subscribe to *a/b/c* with QoS=2
 1  testproxy_subscribe06 - Test MQTT/WebSocket subscribe to *a/b/c* with QoS=1
 1  testproxy_subscribe05 - Test MQTT/WebSocket subscribe to 50 level topic
 1  testproxy_subscribe04 - Test MQTT/WebSocket subscribe to *a/+/c*
 1  testproxy_subscribe03 - Test MQTT/WebSocket subscribe to *a/#*
 1  testproxy_subscribe02 - Test MQTT/WebSocket subscribe to *a/b/c*
 1  testproxy_subscribe01 - Test MQTT/WebSocket subscribe to *#*
 1  testproxy_sharedMix_error03 - MQTTv5 Test creation and distruction of MQTTv5  subscriptions using cleansession clients in all different orders
 1  testproxy_sharedMix_csT_error02 - MQTTv5 Test connect, disconnect,and ClientID theft conditions for MQTTv5 shared subs using a non-durable subscriber.
 1  testproxy_sharedMix_csT_error01 - MQTTv5 Test basic Errors in or MQTTv5 shared subs using a non-durable subscriber.
 1  testproxy_sharedMix_csF_error02 - MQTTv5 Test connect, disconnect, reconnect, and ClientID theft conditions for MQTTv5 shared subs using a durable subscriber.
 1  testproxy_sharedMix_csF_error01 - MQTTv5 Test basic Errors in or MQTTv5 shared subs using a durable subscriber.
 1  testproxy_sharedMix_09 - MQTTv5 New Retained Messages behavior - shared durable should not receive RMs when create sub or on reconnect.
 1  testproxy_sharedMix_07ND - MQTTv5 Busy share test with many subscribes-unsubscribes, nondurable.
 1  testproxy_sharedMix_07D - MQTTv5 Busy share test with many subscribes-unsubscribes, nondurable.
 1  testproxy_sharedMix_06 - MQTTv5 Wildcard subscriptions for share subs.
 1  testproxy_sharedMix_05 - MQTTv5 Redelivery of in-flight msg on client disconnect.
 1  testproxy_sharedMix_04 - MQTTv5 Clients reconnecting and receiving after server restart - bigger test with multiple subs and more messages.
 1  testproxy_sharedMix_03 - MQTTv5 Clients reconnecting and receiving after server restart.
 1  testproxy_sharedMix_02 - MQTTv5 Basic test of mixed-durability sharedsubs - subscribing and messaging.
 1  testproxy_sharedMix_01 - MQTTv5 SharedMix - check different subs on different topics with same subname
 1  testproxy_retain02 - Test MQTT/WebSocket connect with Will topic, message and RETAIN
 1  testproxy_retain01 - Test MQTT/WebSocket connect with Will topicmessage and Qos=1
 1  testproxy_publishV5_06 - Test RETAIN and Message Expiry PAHO
 1  testproxy_publishV5_05 - Test Message Expiry PAHO
 1  testproxy_publishV5_04 - Test RETAIN, Durable Subs receive as NON_RETAIN
 1  testproxy_publishV5_03 - Test RETAIN, receive RETAIN and as NON_RETAIN
 1  testproxy_publishV5_02 - Test RETAIN replaced v5 publisher
 1  testproxy_publishV5_01 - Test RETAIN, simple scenario v5 publisher
 1  testproxy_publishV3_04 - Test RETAIN, Durable Subs receive as NON_RETAIN
 1  testproxy_publishV3_03 - Test RETAIN, receive RETAIN and as NON_RETAIN
 1  testproxy_publishV3_02 - Test RETAIN replaced v3 publisher
 1  testproxy_publishV3_01 - Test RETAIN, simple scenario v3 publisher
 1  testproxy_publish08 - Test RETAIN, if already subscribed/ durable, RETAIN flag should be off  +publish+/+ism-proxy_td-publishScenarios01.sh
 1  testproxy_publish07 - Test RETAIN, if already subscribed, RETAIN flag should be off  +publish+/+ism-proxy_td-publishScenarios01.sh
 1  testproxy_publish06 - Test RETAIN, second message replaces first  +publish+/+ism-proxy_td-publishScenarios01.sh
 1  testproxy_publish05 - Test RETAIN, simple scenario  +publish+/+ism-proxy_td-publishScenarios01.sh
 1  testproxy_mqttv5connect23 - More RETAINed messages tests [ testproxy_mqttv5connect23.xml ]  +mqttv5_connect+/+ism-proxy_td-mqttv5_connect-01.sh
 1  testproxy_mqttv5connect22 - Test that RETAINed messages are available after server fail/restart [ testproxy_mqttv5connect22.xml ]
 1  testproxy_mqttv5connect21 - Test that message in store are available after server fail/restart [ testproxy_mqttv5connect21.xml ]
 1  testproxy_mqttv5connect17 - Test MQTT connect with cleanSession, don*t receive stored msg
 1  testproxy_mqttv5connect16 - Test MQTT connect without cleanSession, receive stored msg
 1  testproxy_mqttv5connect15 - Test MQTT/WebSocket connect will topic longer than 60 characters
 1  testproxy_mqttv5connect14 - Test MQTT/WebSocket connect with Will topic, connect second client same clientId
 1  testproxy_mqttv5connect13 - Test MQTT/WebSocket connect with cleanSession=0
 1  testproxy_mqttv5connect12 - Test MQTT/WebSocket connect with Will topic, message (zero length)
 1  testproxy_mqttv5connect11 - Test MQTT/WebSocket connect with same clientId as already connected client
 1  testproxy_mqttv5connect10 - Test MQTT/WebSocket connect with Will topic, message and RETAIN
 1  testproxy_mqttv5connect09 - Test MQTT/WebSocket connect with Will topicmessage and Qos=2
 1  testproxy_mqttv5connect08 - Test MQTT/WebSocket connect with Will topicmessage and Qos=1
 1  testproxy_mqttv5connect07 - Test MQTT/WebSocket connect with Will topicmessage, publish close normally
 1  testproxy_mqttv5connect03 - Test MQTT/WebSocket connect valid user/password
 1  testproxy_mqttv5connect01 - Test MQTT/WebSocket connect to an IP address and port  +mqttv5_connect+/+ism-proxy_td-mqttv5_connect-01.sh
 1  testproxy_mqttv5_pubsub_03_durableSession - mqttv5 Pub Sub Receive
 1  testproxy_mqttv5_pubsub_02_nonDurable - mqttv5 Pub Sub Receive
 1  testproxy_mqttv5_clientSteal_05_durable - mqttv5 Pub Sub Receive PAHO MQTTv5
 1  testproxy_mqttv5_clientSteal_04_nonDurable - PAHO mqttv5 Pub Sub Receive with ClientId Steal
 1  testproxy_mqttv5_cleanstart_01 - mqttv5 connect cleanStart - ConnAck SessionPresent
 1  testproxy_mqttv5_14_GVT - MQTTv5 publish GVT user properties
 1  testproxy_mqttv5_14 - MQTTv5 publish user properties
 1  testproxy_mqttv5_13 - MQTTv5 publish many messages
 1  testproxy_mqttv5_12 - MQTTv5 Will delay - clientSteals and Clean Session
 1  testproxy_mqttv5_11 - MQTTv5 Will delay - create new connection before delay - no send
 1  testproxy_mqttv5_10 - MQTTv5 session expiry across server restart
 1  testproxy_mqttv5_09b - MQTTv5 Disconnect with rc=4 to publish will msg after delay
 1  testproxy_mqttv5_09 - MQTTv5 Disconnect with rc=4 to publish will msg after delay
 1  testproxy_mqttv5_08 - MQTTv5 Abnormal disconnect to send will message with will delay
 1  testproxy_mqttv5_07 - MQTTv5 Normal disconnect does not send will message with will delay
 1  testproxy_mqttv5_05 - mqttv5 session expiry with connection policy
 1  testproxy_mqttv5_04 - mqttv5 Connect, Disconnect with Expiry
 1  testproxy_mqttv5_02 - mqttv5 publish, subscribe, receive
 1  testproxy_mqttv5_01b - PAHO mqttv5 connect01b
 1  testproxy_mqttv5_01 - WS mqttv5 connect01
 1  testproxy_mqttv4_clientSteal_05_Durable - PAHO mqttv4 Pub Sub Receive with ClientId Steal
 1  testproxy_mqttv4_clientSteal_04_nonDurable - PAHO mqttv4 Pub Sub Receive with ClientId Steal
 1  testproxy_mqttV5_rc144 - Test rc144 TopicFilter
 1  testproxy_mqttV5_rc143 - Test rc143 TopicFilter
 1  testproxy_mqttV5_rc141 - Test rc139 Server Stopping
 1  testproxy_mqttV5_rc139 - Test rc139 Server Stopping
 1  testproxy_mqttV5_rc135 - Test rc135 Not Authorized
 1  testproxy_mqttV5_rc133 - Test rc133 Client Identified not valid
 1  testproxy_mqttV5_rc130 - Test rc130 Protocol Error
 1  testproxy_mqttV5_rc017 - Test rc017 No Subscription Existed
 1  testproxy_mqttV5_rc016 - Test rc016 No matching Subscribers
 1  testproxy_mqttV5_gvt06 - Test ability to connect with GVT characters E3 in user/password [ testproxy_mqttV5_gvt06.xml ]
 1  testproxy_mqttV5_gvt05 - Test ability to connect with GVT characters C4 in user/password [ testproxy_mqttV5_gvt05.xml ]
 1  testproxy_mqttV5_gvt03 - Test ability to connect with GVT characters in user/password [ testproxy_mqttV5_gvt03.xml ]
 1  testproxy_mqttV5_gvt02 - Test ability to connect over an SSL connection [ testproxy_mqttV5_gvt02.xml ]
 1  testproxy_mqttV5_gvt01 - Test ability use GVT characters in topic and ClientID [ testproxy_mqttV5_gvt01.xml ]
 1  testproxy_mqttV3_rc143 - Test rc143 TopicFilter
 1  testproxy_monitor04_MultiProxyConnDisconn - Test rapid connects/disconnects of the same client ID between two proxies
 1  testproxy_monitor03_MultiProxyStealCID - Test steals of the same client ID between two proxies  +monitor+/+ism-proxy_td-monitorScenarios01.sh
 1  testproxy_monitor02 - Connect through tenant requiring user/password, test that no user/password fails, test that tenant name is properly added in topic sent on to MessageSight, test that tenant not in cfg files fails
 1  testproxy_monitor01 - Connect through tenant requiring user/password, test that no user/password fails, test that tenant name is properly added in topic sent on to MessageSight
 1  testproxy_dynamic05 - Test that dynamic authentication can access IP of client
 1  testproxy_dynamic04 - Test that dynamic authentication can fail connect
 1  testproxy_dynamic03 - Test that dynamic authentication with simultaneous requests
 1  testproxy_dynamic02 - Test that dynamic authentication does add to normal
 1  testproxy_dynamic01 - Test that dynamic authentication doesn*t override normal
 1  testproxy_connect23 - More RETAINed messages tests [ testproxy_connect23.xml ]
 1  testproxy_connect22 - Test that RETAINed messages are available after server fail/restart [ testproxy_connect22.xml ]
 1  testproxy_connect21 - Test that message in store are available after server fail/restart [ testproxy_connect21.xml ]
 1  testproxy_connect17 - Test MQTT connect with cleanSession, don*t receive stored msg
 1  testproxy_connect16 - Test MQTT connect without cleanSession, receive stored msg
 1  testproxy_connect15 - Test MQTT/WebSocket connect will topic longer than 60 characters
 1  testproxy_connect14 - Test MQTT/WebSocket connect with Will topic, connect second client same clientId
 1  testproxy_connect13 - Test MQTT/WebSocket connect with cleanSession=0
 1  testproxy_connect12 - Test MQTT/WebSocket connect with Will topic, message (zero length)
 1  testproxy_connect11 - Test MQTT/WebSocket connect with same clientId as already connected client
 1  testproxy_connect10 - Test MQTT/WebSocket connect with Will topic, message and RETAIN
 1  testproxy_connect09 - Test MQTT/WebSocket connect with Will topicmessage and Qos=2
 1  testproxy_connect08 - Test MQTT/WebSocket connect with Will topicmessage and Qos=1
 1  testproxy_connect07 - Test MQTT/WebSocket connect with Will topicmessage, publish close normally
 1  testproxy_connect04 - Test MQTT/WebSocket connect invalid user/password
 1  testproxy_connect03 - Test MQTT/WebSocket connect valid user/password  +connect+/+ism-proxy_td-connectScenarios01.sh
 1  testproxy_connect01 - Test MQTT/WebSocket connect to an IP address and port  +connect+/+ism-proxy_td-connectScenarios01.sh
 1  testproxy_WSmqttv5_clientSteal_05_durable - mqttv5 Pub Sub Receive WebSocket MQTTv5
 1  testproxy_WSmqttv5_clientSteal_04_nonDurable - WEBSOCKET mqttv5 Pub Sub Receive with ClientId Steal
 1  testproxy_WSmqttV5_rc143 - Test rc143 TopicFilter
 1  testproxyV5_MPSwRC - Test MQTTv5 MaxPacketSz exceeded with ReasonCode
 1  testmqtt_NDS_03_MixedQoS - Non-Durable Shared Subscription at QoS=1&2, Busy test with lots of Subscribes and Unsubscribes
 1  testmqtt_HA05 - Test admin objects are properly rolled over [ testmqtt_HA05.xml ]
 1  testWSproxy_publishV5_06 - Test RETAIN and Message Expiry WebSockets
 1  testWSproxy_publishV5_05 - Test Message Expiry WebSockets
 1  proxymqttV5_sharedSub_SubId - Test @SharedSubscriptions (w-w/o WCs) with SubIDs
 1  proxymqttV5_publishV3_SubUpV5 - MQTTv3 SUB upgrade v3 to V5 Sub
 1  proxymqttV5_publishV3_PubUpV5 - MQTTv3 PUB upgrade v3 to V5 Pub
 1  proxy_mqttV5_unsubscribe_UP - Test MQTTv5 Unsubscribe Properties User Property
 1  proxy_mqttV5_subscribe_UP - Test MQTTv5 Subscribe Properties User Property
 1  proxy_mqttV5_subOptions_RetainHandling - Test MQTTv5 Subscribe Options - RetainHandling
 1  proxy_mqttV5_subOptions_RetainAsPub_share - Test MQTTv5 Subscribe Options RetainAsPublish on Shared Subscription
 1  proxy_mqttV5_subOptions_RetainAsPub - Test MQTTv5 Subscribe Options RetainAsPublish
 1  proxy_mqttV5_subOptions_NoLocal - Test MQTTv5 Subscribe Options - No Local
 1  proxy_mqttV5_subOptionsError_RetainHandling - Test MQTTv5 Subscribe Options - RetainHandling Errors
 1  proxy_mqttV5_subOptionsError_NoLocal - Test MQTTv5 Subscribe Options Errors with No Local
 1  proxy_mqttV5_publish_UP - Test MQTTv5 Publish Properties UserProperty
 1  proxy_mqttV5_publish_TA - Test MQTTv5 Publish Properties TopicAlias
 1  proxy_mqttV5_publish_SI - Test MQTTv5 Publish Properties SubscriptionIdentifier
 1  proxy_mqttV5_publish_RT - Test MQTTv5 Publish Properties ResponseTopic
 1  proxy_mqttV5_publish_PFI - Test MQTTv5 Publish Properties Payload Format Indicator
 1  proxy_mqttV5_publish_MEI - Test MQTTv5 Publish Properties Message Expiry Interval
 1  proxy_mqttV5_publish_CT - Test MQTTv5 Publish Properties ContentType
 1  proxy_mqttV5_publish_CD - Test MQTTv5 Publish Properties CorrelationData
 1  proxy_mqttV5_pubPropError_TA - Test MQTTv5 Publish Properties TopicAlias Errors
 1  proxy_mqttV5_pubPropError_SI - Test MQTTv5 Publish Properties SubscriptionIdentifiers Errors
 1  proxy_mqttV5_pubPropError_PFI - Test MQTTv5 Publish Properties Payload Format Indicator
 1  proxy_mqttV5_connect_SEI - Test MQTTv5 CONNECT Properties Session Expiry Interval
 1  proxy_mqttV5_connect_KeepAlive - Test MQTTv5 CONNECT Properties Keep Alive
 1  proxyACL_Undeliverable_mixedQoS - ACLs lost on Reboot, allows Undeliverable QoS:0 msgs to be Acked IoT Tracker ISSUE 1285
 1  proxyACL_Undeliverable.v5 - (MQTTv5) ACLs lost on Reboot, allows Undeliverable msgs to be Queued IoT Tracker ISSUE 1285
 1  proxyACL_Undeliverable - ACLs lost on Reboot, allows Undeliverable msgs to be Queued IoT Tracker ISSUE 1285
 1  proxyACL_Recovery - Test Recovery after Message Sight Restart  +AAAgateway+/+ism-AAAgateway01.sh
 1  proxyACL_InGroup - Test RETAIN, Durable WildCard
 1  proxyACL_ErrorPath - Error Paths of AClfile  +AAAgateway+/+ism-AAAgateway01.sh
 1  mqtt_AdminDynamic_M1_LDAP_cleanup - disable and clean LDAP on M1
 1  mqtt HAScenarios03: Server stopped running during execution.
 1  jca_ha_005 - JCA HA 005
 1  jca_ha_003 - JCA HA 003
 1  jca_ha_002 - JCA HA 002
 1  jca_ha_001 - JCA HA 001
 1  configSetAndGet - Verify proxy config tests passed
 1  cli_GVT_MQTT_AUTO_ID_33 - policy test ID_33
 1  cleanup_confirmDisconnect - Kill the proxy and confirm final retained message is disconnect  +monitor+/+ism-proxy_td-monitorScenarios01.sh
 1  bridge.SimpleA1EventStreams - Test Simple Pub-Fwd-Recv through Bridge  bridge_tests/plain/ism-Bridge-Plain01.sh
 1  MqttXrscadaTest15 - SDP_PROTOCOL_PACKED
 1  MQ_CON_BOUNDARIES_01 - com.ibm.ima.mqcon.boundaries MQTT messages are published to a topic which is associated with a destination mapping rule in order to check that the max messages value is being enforced
 1  MQTTv5 Connect via Proxy and TestDriver: Server stopped running during execution.
 1  JCA Setup Objects - 00: 10.73.131.252 A1:Server may not be running. service/status returned RC=7
 1  JCA Setup Objects - 00: 10.73.131.212 A1:Server may not be running. service/status returned RC=7
 1  JCA HA Tests - 00: Server stopped running during execution.
 1  ISM MQTT via WSTestDriver: Server stopped running during execution.
 1  HA_teardown - Configure HA

==========================================================================================================================================
================================================== Summary of Individual Test Runs =======================================================
==========================================================================================================================================
ismClient           A1TF7cciRHD01g A2TF7cciCOD03g M1TF7fvt13g M2TF7fvt14g                           Passed: 48    Failed: 0
ismClient           A1TF7cciRHD06g A2TF7cciCOD02g M1TF7fvt11g M2TF7fvt12g                           Passed: 169   Failed: 20
  "HA_mqtt_td_tests" FAILED:
      FAILED: Scenario 1 - testmqtt_HA05 - Test admin objects are properly rolled over [ testmqtt_HA05.xml ]
      FAILED: runScenarios - mqtt HAScenarios03: Server stopped running during execution.
  "HA_jca_tests" FAILED:
      FAILED: Scenario 0 - jca_retained_001 - JCA retained 001
      FAILED: Scenario 2 - jca_topic_001 - JCA topic 001
      FAILED: Scenario 3 - jca_topic_002 - JCA topic 002
      FAILED: Scenario 5 - jca_queue_001 - JCA queue 001
      FAILED: Scenario 6 - jca_shared_001 - JCA shared 001 - nondurable shared subscription without a clientid
      FAILED: Scenario 7 - jca_shared_002 - JCA shared 002 - nondurable shared subscription with a clientid
      FAILED: Scenario 8 - jca_shared_003 - JCA shared 003 - durable shared subscription without a clientid
      FAILED: Scenario 9 - jca_shared_004 - JCA shared 004 - durable shared subscription with a clientid
      FAILED: Scenario 10 - jca_jndi_topic - JCA JNDI Topic
      FAILED: Scenario 11 - jca_jndi_queue - JCA JNDI Queue
      FAILED: Scenario 13 - jca_api_001 - JCA api 001 - Test various JMS API*s in the RA environment
      FAILED: Scenario 1 - jca_ha_001 - JCA HA 001
      FAILED: Scenario 2 - jca_ha_002 - JCA HA 002
      FAILED: Scenario 3 - jca_ha_003 - JCA HA 003
      FAILED: Scenario 4 - jca_ha_005 - JCA HA 005
      FAILED: Scenario 5 - mqtt_AdminDynamic_M1_LDAP_cleanup - disable and clean LDAP on M1
      FAILED: Scenario 0 - HA_teardown - Configure HA
      FAILED: runScenarios - JCA HA Tests - 00: Server stopped running during execution.

ismClient           A1TF7cciCOD04g A2TF7cciCOD07g A3TF7cciRHD07g A4TF7cciRHD02g A5TF7cciRHD03g M1TF7fvt15g M2TF7fvt16g Passed: 171   Failed: 0
ismClient           A1TF7cciCOR06g A2TF7cciCOR07g A3TF7cciCOR14g A4TF7cciCOR15g M1TF7fvt25g M2TF7fvt26g B1TF7bridge05g B2TF7bridge06g P1TF7proxy07g P2TF7proxy06g Passed: 147   Failed: 219
  "BRIDGE_bridge_tests" FAILED:
      FAILED: Scenario 1 - bridgePx.SimpleA1A2 - Test Simple Pub-Fwd-Recv through Bridge   bridge_tests/proxy/ism-Bridge-Proxy01.sh
      FAILED: Scenario 3 - bridgePx.MultiFWD_V3Source - Test Multile Forwarders with V3 Source Bridge   bridge_tests/proxy/ism-Bridge-Proxy01.sh
      FAILED: Scenario 5 - bridgePx.MaxFWDTopics - Test Max Forwarder Topics Bridge   bridge_tests/proxy/ism-Bridge-Proxy01.sh
  "BRIDGE_bridge_tests" FAILED:
      FAILED: Scenario 1 - bridgePx.SimpleA1A2 - Test Simple Pub-Fwd-Recv through Bridge   bridge_tests/proxy/ism-Bridge-Proxy01.sh
      FAILED: Scenario 3 - bridgePx.MultiFWD_V3Source - Test Multile Forwarders with V3 Source Bridge   bridge_tests/proxy/ism-Bridge-Proxy01.sh
      FAILED: Scenario 5 - bridgePx.MaxFWDTopics - Test Max Forwarder Topics Bridge   bridge_tests/proxy/ism-Bridge-Proxy01.sh
      FAILED: Scenario 1 - bridge.SimpleA1EventStreams - Test Simple Pub-Fwd-Recv through Bridge  bridge_tests/plain/ism-Bridge-Plain01.sh
  "proxy_tests" FAILED:
      FAILED: Scenario 2 - testproxy_connect01 - Test MQTT/WebSocket connect to an IP address and port  +connect+/+ism-proxy_td-connectScenarios01.sh
      FAILED: Scenario 3 - testproxy_connect03 - Test MQTT/WebSocket connect valid user/password  +connect+/+ism-proxy_td-connectScenarios01.sh
      FAILED: Scenario 4 - testproxy_connect04 - Test MQTT/WebSocket connect invalid user/password
      FAILED: Scenario 5 - testproxy_connect07 - Test MQTT/WebSocket connect with Will topicmessage, publish close normally
      FAILED: Scenario 6 - testproxy_connect08 - Test MQTT/WebSocket connect with Will topicmessage and Qos=1
      FAILED: Scenario 7 - testproxy_connect09 - Test MQTT/WebSocket connect with Will topicmessage and Qos=2
      FAILED: Scenario 8 - testproxy_connect10 - Test MQTT/WebSocket connect with Will topic, message and RETAIN
      FAILED: Scenario 9 - testproxy_connect11 - Test MQTT/WebSocket connect with same clientId as already connected client
      FAILED: Scenario 10 - testproxy_connect12 - Test MQTT/WebSocket connect with Will topic, message (zero length)
      FAILED: Scenario 11 - testproxy_connect13 - Test MQTT/WebSocket connect with cleanSession=0
      FAILED: Scenario 12 - testproxy_connect14 - Test MQTT/WebSocket connect with Will topic, connect second client same clientId
      FAILED: Scenario 13 - testproxy_connect15 - Test MQTT/WebSocket connect will topic longer than 60 characters
      FAILED: Scenario 14 - testproxy_connect16 - Test MQTT connect without cleanSession, receive stored msg
      FAILED: Scenario 15 - testproxy_connect17 - Test MQTT connect with cleanSession, don*t receive stored msg
      FAILED: Scenario 16 - testproxy_connect21 - Test that message in store are available after server fail/restart [ testproxy_connect21.xml ]
      FAILED: Scenario 17 - testproxy_connect22 - Test that RETAINed messages are available after server fail/restart [ testproxy_connect22.xml ]
      FAILED: Scenario 18 - testproxy_connect23 - More RETAINed messages tests [ testproxy_connect23.xml ]
      FAILED: runScenarios - ISM MQTT via WSTestDriver: Server stopped running during execution.
      FAILED: Scenario 1 - testproxy_subscribe01 - Test MQTT/WebSocket subscribe to *#*
      FAILED: Scenario 2 - testproxy_subscribe02 - Test MQTT/WebSocket subscribe to *a/b/c*
      FAILED: Scenario 3 - testproxy_subscribe03 - Test MQTT/WebSocket subscribe to *a/#*
      FAILED: Scenario 4 - testproxy_subscribe04 - Test MQTT/WebSocket subscribe to *a/+/c*
      FAILED: Scenario 5 - testproxy_subscribe05 - Test MQTT/WebSocket subscribe to 50 level topic
      FAILED: Scenario 6 - testproxy_subscribe06 - Test MQTT/WebSocket subscribe to *a/b/c* with QoS=1
      FAILED: Scenario 7 - testproxy_subscribe07 - Test MQTT/WebSocket subscribe to *a/b/c* with QoS=2
      FAILED: Scenario 8 - testproxy_subscribe08 - Test MQTT/WebSocket subscribe to *a/b/c* and *a/b/d*
      FAILED: Scenario 9 - testproxy_subscribe09 - Test MQTT/WebSocket subscribe to *a/b/c* with QoS=1 and *a/b/d* with QoS=0
      FAILED: Scenario 10 - testproxy_subscribe10 - Test MQTT/WebSocket subscribe to *a/b/c* and *a/b/+*, make sure a/b/c messages are not delivered twice
      FAILED: Scenario 11 - testproxy_subscribe11 - Test MQTT/WebSocket subscribe to *a/b/c* QoS=0
      FAILED: Scenario 12 - testproxy_subscribe13 - Test MQTT/WebSocket subscribe to *a/b/c* QoS=0 publish QoS=1 and Qos=2
      FAILED: Scenario 13 - testproxy_subscribe14 - Test MQTT/WebSocket subscribe to long topic (<32767 characters)
      FAILED: Scenario 14 - testproxy_subscribe15 - Test MQTT/WebSocket subscribe to long topic (<32767 characters)
      FAILED: Scenario 15 - testproxy_subscribe16 - Test MQTT/WebSocket subscribe send 1600 messages on each of two topics
      FAILED: Scenario 16 - testproxy_subscribe17 - Test MQTT 1)Subscribe to same specific topic twice, should only receive messages once
      FAILED: Scenario 17 - testproxy_subscribe20 - Test MQTT test subscribe to +
      FAILED: Scenario 18 - testproxy_subscribe21 - Test MQTT test subscribe, close, subscribe
      FAILED: Scenario 19 - testproxy_subscribe22 - Test MQTT test subscribe to /a/c/+
      FAILED: Scenario 20 - testproxy_subscribe23 - Test publish and receive with 0 length message
      FAILED: Scenario 1 - testproxy_publish05 - Test RETAIN, simple scenario  +publish+/+ism-proxy_td-publishScenarios01.sh
      FAILED: Scenario 2 - testproxy_publish06 - Test RETAIN, second message replaces first  +publish+/+ism-proxy_td-publishScenarios01.sh
      FAILED: Scenario 3 - testproxy_publish07 - Test RETAIN, if already subscribed, RETAIN flag should be off  +publish+/+ism-proxy_td-publishScenarios01.sh
      FAILED: Scenario 4 - testproxy_publish08 - Test RETAIN, if already subscribed/ durable, RETAIN flag should be off  +publish+/+ism-proxy_td-publishScenarios01.sh
      FAILED: Scenario 1 - testproxy_monitor01 - Connect through tenant requiring user/password, test that no user/password fails, test that tenant name is properly added in topic sent on to MessageSight
      FAILED: Scenario 2 - testproxy_monitor02 - Connect through tenant requiring user/password, test that no user/password fails, test that tenant name is properly added in topic sent on to MessageSight, test that tenant not in cfg files fails
      FAILED: Scenario 3 - testproxy_monitor03_MultiProxyStealCID - Test steals of the same client ID between two proxies  +monitor+/+ism-proxy_td-monitorScenarios01.sh
      FAILED: Scenario 4 - testproxy_monitor04_MultiProxyConnDisconn - Test rapid connects/disconnects of the same client ID between two proxies
      FAILED: Scenario 5 - cleanup_confirmDisconnect - Kill the proxy and confirm final retained message is disconnect  +monitor+/+ism-proxy_td-monitorScenarios01.sh
      FAILED: Scenario 1 - testproxy_retain01 - Test MQTT/WebSocket connect with Will topicmessage and Qos=1
      FAILED: Scenario 2 - testproxy_retain02 - Test MQTT/WebSocket connect with Will topic, message and RETAIN
      FAILED: Scenario 2 - configSetAndGet - Verify proxy config tests passed
      FAILED: Scenario 2 - testproxy_tenant01-iot2 - Connect a device on IoT2 requiring user/password, test that no user/password fails, test that org name is properly added in topic sent on to MessageSight
      FAILED: Scenario 3 - testproxy_tenant02-iot2 - Connect an application on IoT2 requiring user/password, test that tenant name is properly added in topic sent on to MessageSight, test that tenant not in cfg files fails
      FAILED: Scenario 4 - testproxy_tenant03-quickstart2 - Connect a device on Quickstart2 requiring no user/password, test that tenant name is properly added in topic sent on to MessageSight
      FAILED: Scenario 5 - testproxy_tenant04-quickstart2 - Connect an application on Quickstart2 requiring no user/password, test that tenant name is properly added in topic sent on to MessageSight
      FAILED: Scenario 6 - testproxy_tenant05-quickstart2 - Connect application and device on quickstart2, only device publish and only application subscribe
      FAILED: Scenario 7 - testproxy_tenant06-quickstart2 - Connect application quickstart2, check QuickStart Rules
      FAILED: Scenario 8 - testproxy_tenant07-iot2 - Connect device on iot2, check Registered Org rules
      FAILED: Scenario 1 - testproxy_dynamic01 - Test that dynamic authentication doesn*t override normal
      FAILED: Scenario 2 - testproxy_dynamic02 - Test that dynamic authentication does add to normal
      FAILED: Scenario 3 - testproxy_dynamic03 - Test that dynamic authentication with simultaneous requests
      FAILED: Scenario 4 - testproxy_dynamic04 - Test that dynamic authentication can fail connect
      FAILED: Scenario 5 - testproxy_dynamic05 - Test that dynamic authentication can access IP of client
      FAILED: Scenario 1 - MqttXrscadaTest15 - SDP_PROTOCOL_PACKED
      FAILED: Scenario 3 - proxyACL_InGroup - Test RETAIN, Durable WildCard
      FAILED: Scenario 4 - proxyACL_Recovery - Test Recovery after Message Sight Restart  +AAAgateway+/+ism-AAAgateway01.sh
      FAILED: Scenario 5 - proxyACL_ErrorPath - Error Paths of AClfile  +AAAgateway+/+ism-AAAgateway01.sh
      FAILED: Scenario 6 - proxyACL_Undeliverable - ACLs lost on Reboot, allows Undeliverable msgs to be Queued IoT Tracker ISSUE 1285
      FAILED: Scenario 7 - proxyACL_Undeliverable_mixedQoS - ACLs lost on Reboot, allows Undeliverable QoS:0 msgs to be Acked IoT Tracker ISSUE 1285
      FAILED: Scenario 8 - proxyACL_Undeliverable.v5 - (MQTTv5) ACLs lost on Reboot, allows Undeliverable msgs to be Queued IoT Tracker ISSUE 1285
      FAILED: Scenario 1 - testproxy_tls01_NoStore - Test ability to connect to Proxy TLS port with no store and self signed server cert - conn should fail [ testproxy_tls01_NoStore.xml ]
      FAILED: Scenario 2 - testproxy_tls02_WrongStore - Test ability to connect to Proxy TLS port with wrong cert in store for self signed server cert - conn should fail [ testproxy_tls02_WrongStore.xml ]
      FAILED: Scenario 3 - testproxy_tls03_MqttsEpStore - Test ability to connect to Proxy TLS port [ testproxy_tls03_MqttsEpStore.xml ]
      FAILED: Scenario 4 - testproxy_tls04_MqttsEpStore_WithUser - Test ability to connect to Proxy TLS port with a user [ testproxy_tls04_MqttsEpStore_WithUser.xml ]
      FAILED: Scenario 1 - testproxy_tls01_NoTLS - Test that non-TLS connections succeed for SGEnabled=true configuration [ testproxy_tls01_NoTLS.xml ]
      FAILED: Scenario 3 - testproxy_tls03_MqttsEpStore - Test TLS connections succeed for SGEnabled=true config when client cert store contains mqtts ep cert only [ testproxy_tls03_MqttsEpStore.xml ]
      FAILED: Scenario 5 - testproxy_tls05_ProxyDfltStore_CltCrtNoMatch - Test TLS connections succeed for SGEnabled=true config when client cert store contains dflt proxy cert and non-matching client cert. Also test connections fail when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls05_ProxyDfltStore_CltCrtNoMatch.xml ]
      FAILED: Scenario 6 - testproxy_tls06_ProxyDfltStore_CltCrtPartialMatchd - Test TLS connections succeed for SGEnabled=true config when client cert store contains dflt proxy cert and CN partial matching client cert. Also test connections succeed when partial match betw CN/SAN & clientId is required and fails when exact match is required. [ testproxy_tls06_ProxyDfltStore_CltCrtPartialMatchd.xml ]
      FAILED: Scenario 7 - testproxy_tls07_ProxyDfltStore_CltCrtExactMatchd - Test TLS connections succeed for SGEnabled=true config when client cert store contains dflt proxy cert and SAN exact matching client cert. Also check that connections succeed when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls07_ProxyDfltStore_CltCrtExactMatchd.xml ]
      FAILED: Scenario 8 - testproxy_tls08_ProxyDfltStore_CltCrtPartialMatchg - Test TLS connections succeed for SGEnabled=true config when client cert store contains dflt proxy cert and SAN partial matching client cert. Also check that connections succeed when partial match betw CN/SAN & clientId is required and failes when exact match is required. [ testproxy_tls08_ProxyDfltStore_CltCrtPartialMatchg.xml ]
      FAILED: Scenario 9 - testproxy_tls09_ProxyDfltStore_CltCrtExactMatchg - Test TLS connections succeed for SGEnabled=false config when client cert store contains dflt proxy cert and CN exact matching client cert. Also check that connections succeed when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls09_ProxyDfltStore_CltCrtExactMatchg.xml ]
      FAILED: Scenario 2 - testproxy_tls02s_OrgSrvStore - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert only [ testproxy_tls02s_OrgSrvStore.xml ]
      FAILED: Scenario 3 - testproxy_tls03s_OrgSrvStore_CltCrtNoMatch - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert and non-matching client cert. Also check that connections fail when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls03s_OrgSrvStore_CltCrtNoMatch.xml ]
      FAILED: Scenario 4 - testproxy_tls04s_OrgSrvStore_CltCrtPartialMatchd - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert and client cert CN partially matches client ID. Also check that connection succeeds when partial match betw CN/SAN & clientId is required and fails when exact match is required. [ testproxy_tls04s_OrgSrvStore_CltCrtPartialMatchd.xml ]
      FAILED: Scenario 5 - testproxy_tls05s_OrgSrvStore_CltCrtExactMatchd - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert and client cert SAN exactly matches client ID. Also check that connection succeeds when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls05s_OrgSrvStore_CltCrtExactMatchd.xml ]
      FAILED: Scenario 6 - testproxy_tls06s_OrgSrvStore_CltCrtPartialMatchg - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert and client cert SAN partially matches client ID. Also check that connection succeeds when partial match betw CN/SAN & clientId is required and fails when exact match is required. [ testproxy_tls06s_OrgSrvStore_CltCrtPartialMatchg.xml ]
      FAILED: Scenario 7 - testproxy_tls07s_OrgSrvStore_CltCrtExactMatchg - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert and client cert CN exactly matches client ID. Also check that connection succeeds when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls07s_OrgSrvStore_CltCrtExactMatchg.xml ]
      FAILED: Scenario 6 - testproxy_tls06_ProxyDfltStore_CltCrtPartialMatchd - Test TLS connections succeed for SGEnabled=false config when client cert store contains dflt proxy cert and client cert CN partially matches client ID [ testproxy_tls06_ProxyDfltStore_CltCrtPartialMatchd.xml ]
      FAILED: Scenario 7 - testproxy_tls07_ProxyDfltStore_CltCrtExactMatchd - Test TLS connections succeed for SGEnabled=false config when client cert store contains dflt proxy cert and client cert SAN exactly matches client ID [ testproxy_tls07_ProxyDfltStore_CltCrtExactMatchd.xml ]
      FAILED: Scenario 8 - testproxy_tls08_ProxyDfltStore_CltCrtPartialMatchg - Test TLS connections succeed for SGEnabled=false config when client cert store contains dflt proxy cert and client cert SAN partially matches client ID [ testproxy_tls08_ProxyDfltStore_CltCrtPartialMatchg.xml ]
      FAILED: Scenario 9 - testproxy_tls09_ProxyDfltStore_CltCrtExactMatchg - Test TLS connections succeed for SGEnabled=false config when client cert store contains dflt proxy cert and client cert CN exactly matches client ID [ testproxy_tls09_ProxyDfltStore_CltCrtExactMatchg.xml ]
      FAILED: Scenario 4 - testproxy_tls04s_OrgSrvStore_CltCrtPartialMatchd - Test TLS connections succeed for SGEnabled=false config with org server cert when client cert store contains dflt proxy cert and client cert CN partially matches client ID [ testproxy_tls04s_OrgSrvStore_CltCrtPartialMatchd.xml ]
      FAILED: Scenario 5 - testproxy_tls05s_OrgSrvStore_CltCrtExactMatchd - Test TLS connections succeed for SGEnabled=false config with org server cert when client cert store contains dflt proxy cert and client cert SAN exactly matches client ID [ testproxy_tls05s_OrgSrvStore_CltCrtExactMatchd.xml ]
      FAILED: Scenario 6 - testproxy_tls06s_OrgSrvStore_CltCrtPartialMatchg - Test TLS connections succeed for SGEnabled=false config with org server cert when client cert store contains dflt proxy cert and client cert SAN partially matches client ID [ testproxy_tls06s_OrgSrvStore_CltCrtPartialMatchg.xml ]
      FAILED: Scenario 7 - testproxy_tls07s_OrgSrvStore_CltCrtExactMatchg - Test TLS connections succeed for SGEnabled=false config with org server cert when client cert store contains dflt proxy cert and client cert CN exactly matches client ID [ testproxy_tls07s_OrgSrvStore_CltCrtExactMatchg.xml ]
      FAILED: Scenario 5 - testproxy_tls05b_ClientCertEmptyCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty CRL (cert 2 of 3) [ testproxy_tls05b_ClientCertEmptyCRL.xml ]
      FAILED: Scenario 6 - testproxy_tls05c_ClientCertEmptyCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty CRL (cert 3 of 3) [ testproxy_tls05c_ClientCertEmptyCRL.xml ]
      FAILED: Scenario 7 - testproxy_tls05a_ClientCertEmptyCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty CRL (cert 1 of 3) [ testproxy_tls05a_ClientCertEmptyCRL.xml ]
      FAILED: Scenario 10 - testproxy_tls06c_ClientCert2CrtsInCRL - Test ability to connect to Proxy TLS port using client certificate authentication with CRL and 2 reovoked certs - conn for non-revoked cert should succeed [ testproxy_tls06c_ClientCert2CrtsInCRL.xml ]
      FAILED: Scenario 11 - testproxy_tls07a_ClientCertEmptyDERCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty DER format CRL (cert 1 of 3) [ testproxy_tls07a_ClientCertEmptyDERCRL.xml ]
      FAILED: Scenario 12 - testproxy_tls07b_ClientCertEmptyDERCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty DER format CRL (cert 2 of 3) [ testproxy_tls07b_ClientCertEmptyDERCRL.xml ]
      FAILED: Scenario 13 - testproxy_tls07c_ClientCertEmptyDERCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty DER format CRL (cert 3 of 3) [ testproxy_tls07c_ClientCertEmptyDERCRL.xml ]
      FAILED: Scenario 15 - testproxy_tls08b_ClientCert1CrtInDERCRL - Test ability to connect to Proxy TLS port using client certificate authentication with DER format CRL and 1 reovoked cert - conn should succeed for cert that is not revoked [ testproxy_tls08b_ClientCert1CrtInDERCRL.xml ]
      FAILED: Scenario 16 - testproxy_tls08c_ClientCert1CrtInDERCRL - Test ability to connect to Proxy TLS port using client certificate authentication with DER format CRL and 1 reovoked cert - conn should succeed for cert that is not revoked [ testproxy_tls08c_ClientCert1CrtInDERCRL.xml ]
      FAILED: Scenario 2 - testproxy_mqttv5_01 - WS mqttv5 connect01
      FAILED: Scenario 3 - testproxy_mqttv5_01b - PAHO mqttv5 connect01b
      FAILED: Scenario 4 - testproxy_mqttv5_02 - mqttv5 publish, subscribe, receive
      FAILED: Scenario 5 - testproxy_mqttv5_04 - mqttv5 Connect, Disconnect with Expiry
      FAILED: Scenario 6 - testproxy_mqttv5_05 - mqttv5 session expiry with connection policy
      FAILED: Scenario 7 - testproxy_mqttv5_07 - MQTTv5 Normal disconnect does not send will message with will delay
      FAILED: Scenario 8 - testproxy_mqttv5_08 - MQTTv5 Abnormal disconnect to send will message with will delay
      FAILED: Scenario 9 - testproxy_mqttv5_09 - MQTTv5 Disconnect with rc=4 to publish will msg after delay
      FAILED: Scenario 10 - testproxy_mqttv5_09b - MQTTv5 Disconnect with rc=4 to publish will msg after delay
      FAILED: Scenario 11 - testproxy_mqttv5_10 - MQTTv5 session expiry across server restart
      FAILED: Scenario 12 - testproxy_mqttv5_11 - MQTTv5 Will delay - create new connection before delay - no send
      FAILED: Scenario 13 - testproxy_mqttv5_12 - MQTTv5 Will delay - clientSteals and Clean Session
      FAILED: Scenario 14 - testproxy_mqttv5_13 - MQTTv5 publish many messages
      FAILED: Scenario 15 - testproxy_mqttv5_14 - MQTTv5 publish user properties
      FAILED: Scenario 16 - testproxy_mqttv5_14_GVT - MQTTv5 publish GVT user properties
      FAILED: Scenario 17 - testproxy_mqttV5_gvt01 - Test ability use GVT characters in topic and ClientID [ testproxy_mqttV5_gvt01.xml ]
      FAILED: Scenario 18 - testproxy_mqttV5_gvt02 - Test ability to connect over an SSL connection [ testproxy_mqttV5_gvt02.xml ]
      FAILED: Scenario 20 - testproxy_mqttV5_gvt03 - Test ability to connect with GVT characters in user/password [ testproxy_mqttV5_gvt03.xml ]
      FAILED: Scenario 21 - testproxy_mqttV5_gvt05 - Test ability to connect with GVT characters C4 in user/password [ testproxy_mqttV5_gvt05.xml ]
      FAILED: Scenario 22 - testproxy_mqttV5_gvt06 - Test ability to connect with GVT characters E3 in user/password [ testproxy_mqttV5_gvt06.xml ]
      FAILED: Scenario 1 - testproxy_mqttv5_cleanstart_01 - mqttv5 connect cleanStart - ConnAck SessionPresent
      FAILED: Scenario 2 - testproxy_mqttv5_pubsub_02_nonDurable - mqttv5 Pub Sub Receive 
      FAILED: Scenario 3 - testproxy_mqttv5_pubsub_03_durableSession - mqttv5 Pub Sub Receive 
      FAILED: Scenario 4 - testproxy_mqttv4_clientSteal_04_nonDurable - PAHO mqttv4 Pub Sub Receive with ClientId Steal
      FAILED: Scenario 5 - testproxy_mqttv4_clientSteal_05_Durable - PAHO mqttv4 Pub Sub Receive with ClientId Steal
      FAILED: Scenario 6 - testproxy_WSmqttv5_clientSteal_04_nonDurable - WEBSOCKET mqttv5 Pub Sub Receive with ClientId Steal 
      FAILED: Scenario 7 - testproxy_mqttv5_clientSteal_04_nonDurable - PAHO mqttv5 Pub Sub Receive with ClientId Steal 
      FAILED: Scenario 8 - testproxy_mqttv5_clientSteal_05_durable - mqttv5 Pub Sub Receive PAHO MQTTv5
      FAILED: Scenario 9 - testproxy_WSmqttv5_clientSteal_05_durable - mqttv5 Pub Sub Receive WebSocket MQTTv5
      FAILED: Scenario 2 - testproxy_mqttv5connect01 - Test MQTT/WebSocket connect to an IP address and port  +mqttv5_connect+/+ism-proxy_td-mqttv5_connect-01.sh
      FAILED: Scenario 3 - testproxy_mqttv5connect03 - Test MQTT/WebSocket connect valid user/password
      FAILED: Scenario 5 - testproxy_v5connect_MPS - Test MQTTV5 that we don*t exceed Maximum Packet Size specified by client
      FAILED: Scenario 6 - testproxy_mqttv5connect07 - Test MQTT/WebSocket connect with Will topicmessage, publish close normally
      FAILED: Scenario 7 - testproxy_mqttv5connect08 - Test MQTT/WebSocket connect with Will topicmessage and Qos=1
      FAILED: Scenario 8 - testproxy_mqttv5connect09 - Test MQTT/WebSocket connect with Will topicmessage and Qos=2
      FAILED: Scenario 9 - testproxy_mqttv5connect10 - Test MQTT/WebSocket connect with Will topic, message and RETAIN
      FAILED: Scenario 10 - testproxy_mqttv5connect11 - Test MQTT/WebSocket connect with same clientId as already connected client
      FAILED: Scenario 11 - testproxy_mqttv5connect12 - Test MQTT/WebSocket connect with Will topic, message (zero length)
      FAILED: Scenario 12 - testproxy_mqttv5connect13 - Test MQTT/WebSocket connect with cleanSession=0
      FAILED: Scenario 13 - testproxy_mqttv5connect14 - Test MQTT/WebSocket connect with Will topic, connect second client same clientId
      FAILED: Scenario 14 - testproxy_mqttv5connect15 - Test MQTT/WebSocket connect will topic longer than 60 characters
      FAILED: Scenario 15 - testproxy_mqttv5connect16 - Test MQTT connect without cleanSession, receive stored msg
      FAILED: Scenario 16 - testproxy_mqttv5connect17 - Test MQTT connect with cleanSession, don*t receive stored msg
      FAILED: Scenario 17 - testproxy_mqttv5connect21 - Test that message in store are available after server fail/restart [ testproxy_mqttv5connect21.xml ]
      FAILED: Scenario 18 - testproxy_mqttv5connect22 - Test that RETAINed messages are available after server fail/restart [ testproxy_mqttv5connect22.xml ]
      FAILED: Scenario 19 - testproxy_mqttv5connect23 - More RETAINed messages tests [ testproxy_mqttv5connect23.xml ]  +mqttv5_connect+/+ism-proxy_td-mqttv5_connect-01.sh
      FAILED: runScenarios - MQTTv5 Connect via Proxy and TestDriver: Server stopped running during execution.
      FAILED: Scenario 2 - proxy_mqttV5_connect_KeepAlive - Test MQTTv5 CONNECT Properties Keep Alive
      FAILED: Scenario 3 - proxy_mqttV5_connect_SEI - Test MQTTv5 CONNECT Properties Session Expiry Interval
      FAILED: Scenario 4 - proxy_mqttV5_publish_PFI - Test MQTTv5 Publish Properties Payload Format Indicator
      FAILED: Scenario 5 - proxy_mqttV5_publish_MEI - Test MQTTv5 Publish Properties Message Expiry Interval
      FAILED: Scenario 6 - proxy_mqttV5_publish_TA - Test MQTTv5 Publish Properties TopicAlias
      FAILED: Scenario 7 - proxy_mqttV5_publish_RT - Test MQTTv5 Publish Properties ResponseTopic
      FAILED: Scenario 8 - proxy_mqttV5_publish_CD - Test MQTTv5 Publish Properties CorrelationData
      FAILED: Scenario 9 - proxy_mqttV5_publish_UP - Test MQTTv5 Publish Properties UserProperty
      FAILED: Scenario 10 - proxy_mqttV5_publish_SI - Test MQTTv5 Publish Properties SubscriptionIdentifier
      FAILED: Scenario 11 - proxy_mqttV5_publish_CT - Test MQTTv5 Publish Properties ContentType
      FAILED: Scenario 12 - proxy_mqttV5_pubPropError_PFI - Test MQTTv5 Publish Properties Payload Format Indicator
      FAILED: Scenario 13 - proxy_mqttV5_pubPropError_TA - Test MQTTv5 Publish Properties TopicAlias Errors
      FAILED: Scenario 14 - proxy_mqttV5_pubPropError_SI - Test MQTTv5 Publish Properties SubscriptionIdentifiers Errors
      FAILED: Scenario 15 - proxy_mqttV5_subscribe_UP - Test MQTTv5 Subscribe Properties User Property
      FAILED: Scenario 16 - proxy_mqttV5_unsubscribe_UP - Test MQTTv5 Unsubscribe Properties User Property
      FAILED: Scenario 17 - proxy_mqttV5_subOptions_NoLocal - Test MQTTv5 Subscribe Options - No Local
      FAILED: Scenario 18 - proxy_mqttV5_subOptionsError_NoLocal - Test MQTTv5 Subscribe Options Errors with No Local
      FAILED: Scenario 19 - proxy_mqttV5_subOptions_RetainAsPub - Test MQTTv5 Subscribe Options RetainAsPublish
      FAILED: Scenario 20 - proxy_mqttV5_subOptions_RetainAsPub_share - Test MQTTv5 Subscribe Options RetainAsPublish on Shared Subscription
      FAILED: Scenario 21 - proxy_mqttV5_subOptions_RetainHandling - Test MQTTv5 Subscribe Options - RetainHandling
      FAILED: Scenario 22 - proxy_mqttV5_subOptionsError_RetainHandling - Test MQTTv5 Subscribe Options - RetainHandling Errors
      FAILED: Scenario 1 - testproxy_publishV3_01 - Test RETAIN, simple scenario v3 publisher
      FAILED: Scenario 2 - testproxy_publishV5_01 - Test RETAIN, simple scenario v5 publisher
      FAILED: Scenario 3 - testproxy_publishV3_02 - Test RETAIN replaced v3 publisher
      FAILED: Scenario 4 - testproxy_publishV5_02 - Test RETAIN replaced v5 publisher
      FAILED: Scenario 5 - testproxy_publishV3_03 - Test RETAIN, receive RETAIN and as NON_RETAIN
      FAILED: Scenario 6 - testproxy_publishV5_03 - Test RETAIN, receive RETAIN and as NON_RETAIN
      FAILED: Scenario 7 - testproxy_publishV3_04 - Test RETAIN, Durable Subs receive as NON_RETAIN
      FAILED: Scenario 8 - testproxy_publishV5_04 - Test RETAIN, Durable Subs receive as NON_RETAIN
      FAILED: Scenario 9 - testproxy_publishV5_05 - Test Message Expiry PAHO
      FAILED: Scenario 10 - testWSproxy_publishV5_05 - Test Message Expiry WebSockets
      FAILED: Scenario 11 - testproxy_publishV5_06 - Test RETAIN and Message Expiry PAHO
      FAILED: Scenario 12 - testWSproxy_publishV5_06 - Test RETAIN and Message Expiry WebSockets
      FAILED: Scenario 2 - testproxyV5_MPSwRC - Test MQTTv5 MaxPacketSz exceeded with ReasonCode
      FAILED: Scenario 3 - testproxy_mqttV5_rc016 - Test rc016 No matching Subscribers
      FAILED: Scenario 4 - testproxy_mqttV5_rc017 - Test rc017 No Subscription Existed
      FAILED: Scenario 5 - testproxy_mqttV5_rc130 - Test rc130 Protocol Error
      FAILED: Scenario 6 - testproxy_mqttV5_rc133 - Test rc133 Client Identified not valid
      FAILED: Scenario 7 - testproxy_mqttV5_rc135 - Test rc135 Not Authorized
      FAILED: Scenario 9 - testproxy_mqttV5_rc139 - Test rc139 Server Stopping
      FAILED: Scenario 10 - testproxy_mqttV5_rc141 - Test rc139 Server Stopping
      FAILED: Scenario 11 - testproxy_mqttV5_rc143 - Test rc143 TopicFilter
      FAILED: Scenario 12 - testproxy_mqttV3_rc143 - Test rc143 TopicFilter
      FAILED: Scenario 13 - testproxy_WSmqttV5_rc143 - Test rc143 TopicFilter
      FAILED: Scenario 14 - testproxy_mqttV5_rc144 - Test rc144 TopicFilter
      FAILED: Scenario 2 - proxymqttV5_sharedSub_SubId - Test @SharedSubscriptions (w-w/o WCs) with SubIDs
      FAILED: Scenario 3 - proxymqttV5_publishV3_PubUpV5 - MQTTv3 PUB upgrade v3 to V5 Pub
      FAILED: Scenario 4 - proxymqttV5_publishV3_SubUpV5 - MQTTv3 SUB upgrade v3 to V5 Sub
      FAILED: Scenario 1 - testproxy_sharedMix_csF_error01 - MQTTv5 Test basic Errors in or MQTTv5 shared subs using a durable subscriber. 
      FAILED: Scenario 2 - testproxy_sharedMix_csF_error02 - MQTTv5 Test connect, disconnect, reconnect, and ClientID theft conditions for MQTTv5 shared subs using a durable subscriber. 
      FAILED: Scenario 3 - testproxy_sharedMix_csT_error01 - MQTTv5 Test basic Errors in or MQTTv5 shared subs using a non-durable subscriber. 
      FAILED: Scenario 4 - testproxy_sharedMix_csT_error02 - MQTTv5 Test connect, disconnect,and ClientID theft conditions for MQTTv5 shared subs using a non-durable subscriber. 
      FAILED: Scenario 5 - testproxy_sharedMix_error03 - MQTTv5 Test creation and distruction of MQTTv5  subscriptions using cleansession clients in all different orders 
      FAILED: Scenario 6 - testproxy_sharedMix_01 - MQTTv5 SharedMix - check different subs on different topics with same subname 
      FAILED: Scenario 7 - testproxy_sharedMix_02 - MQTTv5 Basic test of mixed-durability sharedsubs - subscribing and messaging. 
      FAILED: Scenario 8 - testproxy_sharedMix_03 - MQTTv5 Clients reconnecting and receiving after server restart. 
      FAILED: Scenario 9 - testproxy_sharedMix_04 - MQTTv5 Clients reconnecting and receiving after server restart - bigger test with multiple subs and more messages. 
      FAILED: Scenario 10 - testproxy_sharedMix_05 - MQTTv5 Redelivery of in-flight msg on client disconnect. 
      FAILED: Scenario 11 - testproxy_sharedMix_06 - MQTTv5 Wildcard subscriptions for share subs. 
      FAILED: Scenario 12 - testproxy_sharedMix_07ND - MQTTv5 Busy share test with many subscribes-unsubscribes, nondurable. 
      FAILED: Scenario 13 - testproxy_sharedMix_07D - MQTTv5 Busy share test with many subscribes-unsubscribes, nondurable. 
      FAILED: Scenario 14 - testproxy_sharedMix_09 - MQTTv5 New Retained Messages behavior - shared durable should not receive RMs when create sub or on reconnect.

ismClient           A1TF7cciCOD06g M1TF7fvt09g M2TF7fvt10g P1TF7proxy05g                            Passed: 1297  Failed: 231
  "IBMjava80_jms_td_tests" FAILED:
      FAILED: Scenario 18 - jms_oauth_010_truststore - Test 10 - OAuth Test 10 with TrustStore set
  "IBMjava80_mqtt_td_tests" FAILED:
      FAILED: Scenario 1 - testmqtt_gvt01 - Test ability use GVT characters in topic and ClientID [ testmqtt_gvt01.xml ]
      FAILED: Scenario 2 - testmqtt_gvt03 - Test ability to connect with GVT characters in user/password [ testmqtt_gvt03.xml ]
      FAILED: Scenario 4 - testmqtt_gvt06 - Test ability to connect with GVT characters E3 in user/password [ testmqtt_gvt06.xml ]
      FAILED: Scenario 5 - testmqtt_gvt02 - Test ability to connect over an SSL connection [ testmqtt_gvt02.xml ]
      FAILED: Scenario 10 - testmqtt_stat02 - Test that stat MQTTClient shows correct clients
      FAILED: Scenario 2 - ssl/testmqtt_ssl05 - Test MQTT/WebSocket CommonName usage
      FAILED: Scenario 3 - ssl/testmqtt_ssl06 - Test MQTT/WebSocket CommonName usage
      FAILED: Scenario 4 - ssl/testmqtt_ssl07 - Test MQTT/WebSocket CommonName usage
      FAILED: Scenario 5 - ssl/testmqtt_ssl08 - Test MQTT/WebSocket CommonName usage in ClientID on ConnectionPolicy with asterisk character
      FAILED: Scenario 6 - ssl/testmqtt_ssl09a - Test MQTT/WebSocket CommonName usage in ClientID on ConnectionPolicy with asterisk character
      FAILED: Scenario 7 - ssl/testmqtt_ssl09b - Test MQTT/WebSocket CommonName usage in ClientID on ConnectionPolicy with asterisk character
      FAILED: Scenario 0 - deleteAllRetained0 - Delete any RETAINed messages, error if any exist
  "IBMjava80_jms_mqtt_td_tests" FAILED:
      FAILED: Scenario 0 - jms_mqtt_001 JMS to MQTT - Test 1 with Unicode Topic Name and RETAINED. [ jms_mqtt_001.xml ]
      FAILED: Scenario 12 - Clear any retained messages before running JMS Wildcard tests [ mqtt_clearRetained.xml ]
  "mqtt_xrscada" FAILED:
      FAILED: Scenario 17 - mqtt_clearRetained.xml - Clear all retained messages
      FAILED: Scenario 17 - mqtt_clearRetained.xml - Clear all retained messages
      FAILED: Scenario 17 - mqtt_clearRetained.xml - Clear all retained messages with MQTTv5
  "plugin_tests" FAILED:
      FAILED: Scenario 0 - testplugin_subscribe01 - Test MQTT/WebSocket subscribe to *#*
      FAILED: Scenario 12 - testplugin_subscribe14 - Test MQTT/WebSocket subscribe to long topic (<32767 characters)
  "ws_mqtt_js_tests" FAILED:
      FAILED: Scenario 0 - jsclient_connect_1_b - Connect with a single char clientId (IPv6)
      FAILED: Scenario 1 - jsclient_connect_2_b - Connect using a clientId with a space and other chars
      FAILED: Scenario 2 - jsclient_connect_3_b - Connect with a single space as the clientId (IPv6)
      FAILED: Scenario 3 - jsclient_connect_4_b - Connect with multiple clients (synchronized)
      FAILED: Scenario 4 - jsclient_connect_5_b - Connect with a non-unique clientId (synchronized) (IPv6)
      FAILED: Scenario 5 - jsclient_connect_6_b - Connect to a server with a connection policy that only allows the MQTT protocol 
      FAILED: Scenario 7 - jsclient_connect_e10_b - Connect to a server with a connection policy that does not allow the MQTT protocol 
      FAILED: Scenario 8 - jsclient_connect_e11_b - Connect to a server with an Endpoint that does not allow the MQTT protocol 
      FAILED: Scenario 9 - jsclient_connect_e12_b - Create an Endpoint that does not have a ConnectionPolicy -  CLI
      FAILED: Scenario 1 - jsclient_sec_2_b - Connect to ISM server with SSL disabled, using a valid, non-empty username and password (IPv6)
      FAILED: Scenario 2 - jsclient_sec_3_b - Connect to ISM server with an MQTT-only ConnectionPolicy
      FAILED: Scenario 3 - jsclient_sec_4_b - Connect to ISM server with an MQTT-only Endpoint (IPv6)
      FAILED: Scenario 4 - jsclient_sec_5_b - Connect to ISM server with a ConnectionPolicy that authorizes only one user
      FAILED: Scenario 5 - jsclient_sec_6_b - Connect to ISM server using an authorized user (wildcards in ID on ConnectionPolicy) (IPv6)
      FAILED: Scenario 6 - jsclient_sec_e1_b - UserName is not specified (IPv6)
      FAILED: Scenario 7 - jsclient_sec_e2_b - User does not exist (was invalid UTF-8 test)
      FAILED: Scenario 8 - jsclient_sec_e3_b - User does not exist (IPv6)
      FAILED: Scenario 9 - jsclient_sec_e5_b - Incorrect password
      FAILED: Scenario 10 - jsclient_sec_e9_b - User is not authorized (IPv6)
      FAILED: Scenario 11 - jsclient_sec_e10_b - Insecure connection to a secure Endpoint
      FAILED: Scenario 12 - jsclient_sec_e12_b - Protocol is JMS on the ConnectionPolicy
      FAILED: Scenario 13 - jsclient_sec_e13_b - Protocol is JMS on the Endpoint (IPv6)
      FAILED: Scenario 14 - jsclient_sec_e14_b - Empty userName and password
      FAILED: Scenario 16 - jsclient_sec_e16_b - Empty userName and non-empty password
      FAILED: Scenario 2 - jsclient_pubsub_1_b - Basic publish/subscribe for the JavaScript Client
      FAILED: Scenario 3 - jsclient_pubsub_2_b - QoS=1 on publish (IPv6)
      FAILED: Scenario 4 - jsclient_pubsub_3_b - QoS=2 on publish
      FAILED: Scenario 5 - jsclient_pubsub_4_b - Multiple topics, QoS=0 on publish (IPv6)
      FAILED: Scenario 6 - jsclient_pubsub_5_b - Test for case-sensitivity in topic name
      FAILED: Scenario 7 - jsclient_pubsub_8_b - Specify a subscribe complete callback (IPv6)
      FAILED: Scenario 8 - jsclient_pubsub_10_b - Specify various callbacks for onsubscribe (IPv6)
      FAILED: Scenario 9 - jsclient_pubsub_11_b - Wildcard subscriptions
      FAILED: Scenario 10 - jsclient_pubsub_12_b - Mixed QoS on publish, QoS=0 on subscribe (IPv6)
      FAILED: Scenario 11 - jsclient_pubsub_13_b - Mixed QoS on publish, QoS=1 on subscribe
      FAILED: Scenario 12 - jsclient_pubsub_14_b - Mixed QoS on publish, QoS=2 on subscribe (IPv6)
      FAILED: Scenario 13 - jsclient_pubsub_15_b - Mixed QoS topics in one client
      FAILED: Scenario 14 - jsclient_pubsub_16_b - Mixed QoS client with wildcard subscriptions (IPv6)
      FAILED: Scenario 15 - jsclient_pubsub_17_b - Test retained
      FAILED: Scenario 16 - jsclient_pubsub_18_b - Retained message is not the last message
      FAILED: Scenario 17 - jsclient_pubsub_19_b - No unsubscribe before disconnect
      FAILED: Scenario 18 - jsclient_pubsub_22_b - Unsubscribe from the same topic twice
      FAILED: Scenario 19 - jsclient_pubsub_24_b - Test where publisher and subscriber are on different clients (synchronized)
      FAILED: Scenario 20 - jsclient_pubsub_25_b - Connect to an Connection/Messaging Policy that authorizes clients for the MQTT and JMS protocols (IPv6)
      FAILED: Scenario 21 - jsclient_pubsub_26_b - Connect to an Connection/Messaging Policy that authorizes MQTT clients only
      FAILED: Scenario 22 - jsclient_pubsub_27_b - Connect to an Connection/MessagingPolicy that authorizes a specific user/topic (IPv6)
      FAILED: Scenario 23 - jsclient_pubsub_e1_b - Test for invalid topic names on pub
      FAILED: Scenario 24 - jsclient_pubsub_e2_b - Test for invalid QoS values on pub
      FAILED: Scenario 25 - jsclient_pubsub_e3_b - Test for invalid retain value on pub
      FAILED: Scenario 26 - jsclient_pubsub_e4_b - Test for invalid wildcard placements on sub
      FAILED: Scenario 27 - jsclient_pubsub_e6_b - Test for invalid QoS values on sub
      FAILED: Scenario 28 - jsclient_pubsub_e7_b - Specify a non-function for subscribeCompleteCallback
      FAILED: Scenario 29 - jsclient_pubsub_e8_b - Specify a non-function for the onmessage callback for a client
      FAILED: Scenario 30 - jsclient_pubsub_e13_b - Test for unsubscribe with non-function callback
      FAILED: Scenario 31 - jsclient_pubsub_e14_b - Unsubscribe from a topic with invalid wc placement
      FAILED: Scenario 32 - jsclient_pubsub_e15_b - Attempt to publish/subscribe on an unauthorized protocol
      FAILED: Scenario 33 - jsclient_pubsub_e16_b - Attempt to publish/subscribe on an unauthorized topic
      FAILED: Scenario 1 - jsclient_gvt_1_b - GVT: ClientID test
      FAILED: Scenario 2 - jsclient_gvt_2_b - GVT: Topic name test
      FAILED: Scenario 3 - jsclient_gvt_3_b - GVT: userName and password test
      FAILED: Scenario 4 - jsclient_gvt_4_b - GVT: Will Topic and Message test
  "cli_tests" FAILED:
      FAILED: Scenario 0 - cli_GVT_MQTT_AUTO_ID_2 - policy test ID_2
      FAILED: Scenario 4 - cli_GVT_MQTT_AUTO_ID_4 - policy test ID_4
      FAILED: Scenario 16 - cli_GVT_MQTT_AUTO_ID_11 - policy test ID_11
      FAILED: Scenario 18 - cli_GVT_MQTT_AUTO_ID_12 - policy test ID_12
      FAILED: Scenario 20 - cli_GVT_MQTT_AUTO_ID_13 - policy test ID_13
      FAILED: Scenario 22 - cli_GVT_MQTT_AUTO_ID_14 - policy test ID_14
      FAILED: Scenario 24 - cli_GVT_MQTT_AUTO_ID_15 - policy test ID_15
      FAILED: Scenario 26 - cli_GVT_MQTT_AUTO_ID_16 - policy test ID_16
      FAILED: Scenario 28 - cli_GVT_MQTT_AUTO_ID_17 - policy test ID_17
      FAILED: Scenario 30 - cli_GVT_MQTT_AUTO_ID_18 - policy test ID_18
      FAILED: Scenario 34 - cli_GVT_MQTT_AUTO_ID_20 - policy test ID_20
      FAILED: Scenario 42 - cli_GVT_MQTT_AUTO_ID_24 - policy test ID_24
      FAILED: Scenario 44 - cli_GVT_MQTT_AUTO_ID_25 - policy test ID_25
      FAILED: Scenario 46 - cli_GVT_MQTT_AUTO_ID_26 - policy test ID_26
      FAILED: Scenario 52 - cli_GVT_MQTT_AUTO_ID_29 - policy test ID_29
      FAILED: Scenario 54 - cli_GVT_MQTT_AUTO_ID_31 - policy test ID_31
      FAILED: Scenario 60 - cli_GVT_MQTT_AUTO_ID_36 - policy test ID_36
      FAILED: Scenario 62 - cli_GVT_MQTT_AUTO_ID_37 - policy test ID_37
      FAILED: Scenario 64 - cli_GVT_MQTT_AUTO_ID_38 - policy test ID_38
      FAILED: Scenario 66 - cli_GVT_MQTT_AUTO_ID_40 - policy test ID_40
      FAILED: Scenario 72 - cli_GVT_MQTT_AUTO_ID_43 - policy test ID_43
      FAILED: Scenario 76 - cli_GVT_MQTT_AUTO_ID_45 - policy test ID_45
      FAILED: Scenario 2 - cli_security_test_001 - send test data to topic
      FAILED: Scenario 4 - cli_security_test_002 - send test data to topic
      FAILED: Scenario 6 - cli_security_test_003 - send test data to topic
      FAILED: Scenario 10 - cli_security_test_006 - send test data to topic - client auth
      FAILED: Scenario 14 - cli_security_test_008 - send should work
      FAILED: Scenario 19 - cli_security_test_012 - should work after ep gets new security profile
      FAILED: Scenario 7 - cli_stat_topics_test_007 - send test data to topic
      FAILED: Scenario 8 - cli_stat_topics_test_008 - validate stat command.
      FAILED: Scenario 19 - cli_stat_topics_test_016 - validate stat command.
  "MQConnectivity_tests" FAILED:
      FAILED: Scenario 0 - MQ_CON_BOUNDARIES_01 - com.ibm.ima.mqcon.boundaries MQTT messages are published to a topic which is associated with a destination mapping rule in order to check that the max messages value is being enforced
      FAILED: Scenario 3 - MQ_CON_BOUNDARIES_04 - com.ibm.ima.mqcon.boundaries MQTT messages are published to a topic which is associated with a destination mapping rule in order to check that the max messages value is being enforced
  "snmp_tests" FAILED:
      FAILED: Scenario 5 - SNMP_verify_endpoint_info - Verify Endpoint Information
cAppDriverWait  ./ism-SNMP-VerifyMemoryInfo.sh FAILED to start!
      FAILED: Scenario 6 - SNMP_verify_memory_info - Verify Memory Information RC=1
      FAILED: runScenarios - SNMP Tests : Server stopped running during execution.
      FAILED: runScenarios - SNMP Tests : ism-SNMP-tests_Core - A core file was found on A1 after running ism-SNMP-tests.
      FAILED: runScenarios - SNMP Tests : ism-SNMP-tests_Core - A core file was found on A1 after running ism-SNMP-tests.
  "jca_tests" FAILED:
      FAILED: runScenarios - JCA Setup Objects - 00: 10.73.131.252 A1:Server may not be running. service/status returned RC=7
      FAILED: Scenario 0 - jca_retained_001 - JCA retained 001
      FAILED: Scenario 2 - jca_topic_001 - JCA topic 001
      FAILED: Scenario 3 - jca_topic_002 - JCA topic 002
      FAILED: Scenario 5 - jca_queue_001 - JCA queue 001
      FAILED: Scenario 6 - jca_shared_001 - JCA shared 001 - nondurable shared subscription without a clientid
      FAILED: Scenario 7 - jca_shared_002 - JCA shared 002 - nondurable shared subscription with a clientid
      FAILED: Scenario 8 - jca_shared_003 - JCA shared 003 - durable shared subscription without a clientid
      FAILED: Scenario 9 - jca_shared_004 - JCA shared 004 - durable shared subscription with a clientid
      FAILED: Scenario 10 - jca_jndi_topic - JCA JNDI Topic
      FAILED: Scenario 11 - jca_jndi_queue - JCA JNDI Queue
      FAILED: Scenario 13 - jca_api_001 - JCA api 001 - Test various JMS API*s in the RA environment
      FAILED: Scenario 0 - jca_ssltopic_001 - JCA SSL Topic 001
      FAILED: Scenario 1 - jca_sslqueue_001 - JCA SSL Queue 001
      FAILED: Scenario 2 - jca_ssltopic_002 - JCA SSL Topic 002
      FAILED: Scenario 3 - jca_sslqueue_002 - JCA SSL Queue 002 - User authentication on outbound
      FAILED: Scenario 1 - jca_enablerb_001 - enable rollback = true BMT
      FAILED: Scenario 2 - jca_enablerb_002 - enable rollback = true CMTNS
      FAILED: Scenario 3 - jca_enablerb_003 - enable rollback = false BMT
      FAILED: Scenario 4 - jca_enablerb_004 - enable rollback = false CMTNS
      FAILED: Scenario 5 - jca_pause_001 - MDB Pause - this test should not cause the MDB to pause
      FAILED: Scenario 6 - jca_pause_002 - MDB Pause - this test should cause the MDB to pause
      FAILED: Scenario 8 - jca_pause_003 - ignoreFailuresOnStart activation spec property test
      FAILED: Scenario 10 - jca_translevel_001 - transactionLevelSupport = Local with CMTNS MDB and CMTR EJB
      FAILED: Scenario 11 - jca_translevel_002 - transationLevelSupport = Local with BMT MDB and EJB
      FAILED: Scenario 12 - jca_translevel_003 - transationLevelSupport = NoTransaction with CMTR MDB and Supports EJB
      FAILED: Scenario 13 - jca_translevel_004 - transationLevelSupport = NoTransaction with BMTUT MDB
      FAILED: Scenario 0 - jca_bmtut_topic - Stateless Session Bean with Bean Managed Transactions on a topic
      FAILED: Scenario 1 - jca_bmtut_queue - Stateless Session Bean with Bean Managed Transactions on a queue
      FAILED: Scenario 2 - jca_bmtut_rb_nonpersistent - Bean Managed Transactions and rollback with non-persistent messages
      FAILED: Scenario 3 - jca_bmtut_rb_persistent - Bean Managed Transactions and rollback with persistent messages
      FAILED: Scenario 4 - jca_bmtut_rb_queue - Bean Managed Transactions and rollback with a queue
      FAILED: Scenario 0 - jca_cmtr_topic - Stateless Session Bean with Container Managed Transactions - MDB Required
      FAILED: Scenario 1 - jca_cmtr_nodb2_topic - Stateless Session Bean with Container Managed Transactions - MDB Required - no DB2
      FAILED: Scenario 2 - jca_cmtns_topic - Stateless Session Bean with Container Managed Transactions - MDB NotSupported
      FAILED: Scenario 3 - jca_cmtns_nodb2_topic - Stateless Session Bean with Container Managed Transactions - MDB NotSupported - no DB2
      FAILED: Scenario 4 - jca_cmtr_queue - Stateless Session Bean with Container Managed Transactions - MDB Required - Queue
      FAILED: Scenario 5 - jca_cmtns_queue - Stateless Session Bean with Container Managed Transactions - MDB NotSupported - Queue
      FAILED: Scenario 6 - jca_cmt_rb_nonpersistent - Container Managed Transactions with rollback - nonpersistent
      FAILED: Scenario 7 - jca_cmt_rb_persistent - Container Managed Transactions with rollback - persistent
      FAILED: Scenario 8 - jca_cmt_rb_queue - Container Managed Transactions with rollback - queue
      FAILED: Scenario 9 - jca_dest_full - CMTR MDB and max messages
      FAILED: Scenario 0 - jca_xaerror_none_statelessBMTUT - A check to make sure Evil RA works
      FAILED: Scenario 1 - jca_xaerror_prepare_statelessBMTUT - EvilRA throws Error in prepare() in XA
      FAILED: Scenario 2 - jca_xaerror_commit_statelessBMTUT - EvilRA throws Error in commit() in XA
      FAILED: Scenario 3 - jca_xaerror_start_statelessBMTUT - EvilRA throws Error in start() in XA
      FAILED: Scenario 4 - jca_xaerror_end_statelessBMTUT - EvilRA throws Error in end() in XA
      FAILED: Scenario 5 - jca_xaerror_none_statelessCMT - A check to make sure Evil RA works
      FAILED: Scenario 6 - jca_xaerror_prepare_statelessCMT - EvilRA throws Error in prepare() in XA
      FAILED: Scenario 7 - jca_xaerror_commit_statelessCMT - EvilRA throws Error in commit() in XA
      FAILED: Scenario 8 - jca_xaerror_start_statelessCMT - EvilRA throws Error in start() in XA
      FAILED: Scenario 9 - jca_xaerror_end_statelessCMT - EvilRA throws Error in end() in XA
      FAILED: Scenario 0 - jca_reconnect_001 - JCA Reconnect 001
      FAILED: Scenario 1 - jca_reconnect_002 - Durable Shared subscription CMTR MDB, max messages and an imaserver restart
      FAILED: Scenario 0 - heur_commit_cmt - JCA Heuristic XA CMT Commit
      FAILED: Scenario 1 - heur_commit_bmt - JCA Heuristic XA BMT Commit
      FAILED: Scenario 2 - heur_rollback_cmt - JCA Heuristic XA CMT Rollback
      FAILED: Scenario 3 - heur_rollback_bmt - JCA Heuristic XA BMT Rollback
      FAILED: Scenario 4 - heur_prepCommit_cmt - JCA Heuristic XA CMT crash on prepare then commit
      FAILED: Scenario 5 - heur_prepRB_cmt - JCA Heuristic XA CMT crash on prepare then rollback
      FAILED: Scenario 6 - heur_prepCommit_bmt - JCA Heuristic XA BMT crash on prepare then commit
      FAILED: Scenario 7 - heur_prepRB_bmt - JCA Heuristic XA BMT crash on prepare then rollback
  "restapi" FAILED:
      FAILED: Scenario 0 - RESTAPI-00-ResetConfig - RESTAPI for Service Reset Config
      FAILED: Scenario 1 - RESTAPI-01-AdminLog - RESTAPI for AdminLog
      FAILED: Scenario 2 - RESTAPI-02-ConnectionLog - RESTAPI for ConnectionLog
      FAILED: Scenario 3 - RESTAPI-03-LogLevel - RESTAPI for LogLevel
      FAILED: Scenario 4 - RESTAPI-04-SecurityLog - RESTAPI for SecurityLog
      FAILED: Scenario 5 - RESTAPI-05-TraceBackup - RESTAPI for TraceBackup
      FAILED: Scenario 6 - RESTAPI-06-TraceBackupCount - RESTAPI for TraceBackupCount
      FAILED: Scenario 7 - RESTAPI-07-TraceBackupDestination - RESTAPI for TraceBackupDestination
      FAILED: Scenario 8 - RESTAPI-08-TraceConnection - RESTAPI for TraceConnection
      FAILED: Scenario 9 - RESTAPI-09-TraceLevel - RESTAPI for TraceLevel
      FAILED: Scenario 10 - RESTAPI-10-TraceMax - RESTAPI for TraceMax
      FAILED: Scenario 11 - RESTAPI-11-TraceMessageData - RESTAPI for TraceMessageData
      FAILED: Scenario 12 - RESTAPI-12-TraceOptions - RESTAPI for TraceOptions
      FAILED: Scenario 13 - RESTAPI-13-TraceSelected - RESTAPI for TraceSelected
      FAILED: Scenario 15 - RESTAPI-15-Syslog - RESTAPI for Syslog
      FAILED: Scenario 16 - RESTAPI-20-MessageHub - RESTAPI for MessageHub
      FAILED: Scenario 17 - RESTAPI-21-ConnectionPolicy - RESTAPI for ConnectionPolicy
      FAILED: Scenario 18 - RESTAPI-23-Endpoint - RESTAPI for Endpoint
      FAILED: Scenario 19 - RESTAPI-24-Queue - RESTAPI for Queue
      FAILED: Scenario 20 - RESTAPI-26-TopicPolicy - RESTAPI for TopicPolicy
      FAILED: Scenario 21 - RESTAPI-27-QueuePolicy - RESTAPI for QueuePolicy
      FAILED: Scenario 22 - RESTAPI-28-SubscriptionPolicy - RESTAPI for SubscriptionPolicy
      FAILED: Scenario 23 - RESTAPI-29-Plugin - RESTAPI for Plugin
      FAILED: Scenario 24 - RESTAPI-30-PluginDebugPort - RESTAPI for PluginDebugPort
      FAILED: Scenario 25 - RESTAPI-31-PluginDebugServer - RESTAPI for PluginDebugServer
      FAILED: Scenario 26 - RESTAPI-32-PluginMaxHeapSize - RESTAPI for PluginMaxHeapSize
      FAILED: Scenario 27 - RESTAPI-33-PluginPort - RESTAPI for PluginPort
      FAILED: Scenario 28 - RESTAPI-34-PluginServer - RESTAPI for PluginServer
      FAILED: Scenario 29 - RESTAPI-35-PluginVMArgs - RESTAPI for PluginVMArgs
      FAILED: Scenario 30 - RESTAPI-40-AdminEndpoint - RESTAPI for AdminEndpoint
      FAILED: Scenario 31 - RESTAPI-41-CertificateProfile - RESTAPI for CertificateProfile
      FAILED: Scenario 32 - RESTAPI-42-ConfigurationPolicy - RESTAPI for ConfigurationPolicy
      FAILED: Scenario 33 - RESTAPI-43-FIPS - RESTAPI for FIPS
      FAILED: Scenario 34 - RESTAPI-44-LDAP - RESTAPI for LDAP
      FAILED: Scenario 35 - RESTAPI-45-LTPAProfile - RESTAPI for LTPAProfile
      FAILED: Scenario 36 - RESTAPI-46-OAuthProfile - RESTAPI for OAuthProfile
      FAILED: Scenario 37 - RESTAPI-47-SecurityProfile - RESTAPI for SecurityProfile
      FAILED: Scenario 38 - RESTAPI-48-ClientCertificate - RESTAPI for ClientCertificate
      FAILED: Scenario 39 - RESTAPI-49-TrustedCertificate - RESTAPI for TrustedCertificate
      FAILED: Scenario 42 - RESTAPI-61-AdminUserID - RESTAPI for AdminUserID
      FAILED: Scenario 44 - RESTAPI-63-ClusterMembership - RESTAPI for ClusterMembership
      FAILED: Scenario 46 - RESTAPI-65-LicensedUsage - RESTAPI for LicensedUsage
      FAILED: Scenario 50 - RESTAPI-80-ServerName - RESTAPI for ServerName
      FAILED: Scenario 51 - RESTAPI-81-ServerUID - RESTAPI for ServerUID
      FAILED: Scenario 53 - RESTAPI-83-TolerateRecoveryInconsistencies - RESTAPI for TolerateRecoveryInconsistencies
      FAILED: Scenario 54 - RESTAPI-90-DestinationMappingRule - RESTAPI for DestinationMappingRule
      FAILED: Scenario 57 - RESTAPI-93-QueueManagerConnection - RESTAPI for QueueManagerConnection
      FAILED: Scenario 0 - RESTAPI-00-Service - RESTAPI for Service
cAppDriver  /niagara/test/restapi/synopsis.sh FAILED to start!
      FAILED: Scenario 1 - RESTAPI-99-Synopsis - Synopsis of RESTAPI Execution RC=1

(RC!=0 for some tests, check individual results for details)
ismClient           A1TF7cciCOD01g M1TF7fvt01g M2TF7fvt02g                                          Passed: 1296  Failed: 232
  "IBMjava80_jms_td_tests" FAILED:
      FAILED: Scenario 18 - jms_oauth_010_truststore - Test 10 - OAuth Test 10 with TrustStore set
  "IBMjava80_mqtt_td_tests" FAILED:
      FAILED: Scenario 1 - testmqtt_gvt01 - Test ability use GVT characters in topic and ClientID [ testmqtt_gvt01.xml ]
      FAILED: Scenario 2 - testmqtt_gvt03 - Test ability to connect with GVT characters in user/password [ testmqtt_gvt03.xml ]
      FAILED: Scenario 4 - testmqtt_gvt06 - Test ability to connect with GVT characters E3 in user/password [ testmqtt_gvt06.xml ]
      FAILED: Scenario 5 - testmqtt_gvt02 - Test ability to connect over an SSL connection [ testmqtt_gvt02.xml ]
      FAILED: Scenario 10 - testmqtt_stat02 - Test that stat MQTTClient shows correct clients
      FAILED: Scenario 17 - testmqtt_NDS_03_MixedQoS - Non-Durable Shared Subscription at QoS=1&2, Busy test with lots of Subscribes and Unsubscribes 
      FAILED: Scenario 2 - ssl/testmqtt_ssl05 - Test MQTT/WebSocket CommonName usage
      FAILED: Scenario 3 - ssl/testmqtt_ssl06 - Test MQTT/WebSocket CommonName usage
      FAILED: Scenario 4 - ssl/testmqtt_ssl07 - Test MQTT/WebSocket CommonName usage
      FAILED: Scenario 5 - ssl/testmqtt_ssl08 - Test MQTT/WebSocket CommonName usage in ClientID on ConnectionPolicy with asterisk character
      FAILED: Scenario 6 - ssl/testmqtt_ssl09a - Test MQTT/WebSocket CommonName usage in ClientID on ConnectionPolicy with asterisk character
      FAILED: Scenario 7 - ssl/testmqtt_ssl09b - Test MQTT/WebSocket CommonName usage in ClientID on ConnectionPolicy with asterisk character
      FAILED: Scenario 0 - deleteAllRetained0 - Delete any RETAINed messages, error if any exist
  "IBMjava80_jms_mqtt_td_tests" FAILED:
      FAILED: Scenario 0 - jms_mqtt_001 JMS to MQTT - Test 1 with Unicode Topic Name and RETAINED. [ jms_mqtt_001.xml ]
      FAILED: Scenario 12 - Clear any retained messages before running JMS Wildcard tests [ mqtt_clearRetained.xml ]
  "mqtt_xrscada" FAILED:
      FAILED: Scenario 17 - mqtt_clearRetained.xml - Clear all retained messages
      FAILED: Scenario 17 - mqtt_clearRetained.xml - Clear all retained messages
      FAILED: Scenario 17 - mqtt_clearRetained.xml - Clear all retained messages with MQTTv5
  "plugin_tests" FAILED:
      FAILED: Scenario 0 - testplugin_subscribe01 - Test MQTT/WebSocket subscribe to *#*
      FAILED: Scenario 12 - testplugin_subscribe14 - Test MQTT/WebSocket subscribe to long topic (<32767 characters)
  "ws_mqtt_js_tests" FAILED:
      FAILED: Scenario 0 - jsclient_connect_1_b - Connect with a single char clientId (IPv6)
      FAILED: Scenario 1 - jsclient_connect_2_b - Connect using a clientId with a space and other chars
      FAILED: Scenario 2 - jsclient_connect_3_b - Connect with a single space as the clientId (IPv6)
      FAILED: Scenario 3 - jsclient_connect_4_b - Connect with multiple clients (synchronized)
      FAILED: Scenario 4 - jsclient_connect_5_b - Connect with a non-unique clientId (synchronized) (IPv6)
      FAILED: Scenario 5 - jsclient_connect_6_b - Connect to a server with a connection policy that only allows the MQTT protocol 
      FAILED: Scenario 7 - jsclient_connect_e10_b - Connect to a server with a connection policy that does not allow the MQTT protocol 
      FAILED: Scenario 8 - jsclient_connect_e11_b - Connect to a server with an Endpoint that does not allow the MQTT protocol 
      FAILED: Scenario 9 - jsclient_connect_e12_b - Create an Endpoint that does not have a ConnectionPolicy -  CLI
      FAILED: Scenario 1 - jsclient_sec_2_b - Connect to ISM server with SSL disabled, using a valid, non-empty username and password (IPv6)
      FAILED: Scenario 2 - jsclient_sec_3_b - Connect to ISM server with an MQTT-only ConnectionPolicy
      FAILED: Scenario 3 - jsclient_sec_4_b - Connect to ISM server with an MQTT-only Endpoint (IPv6)
      FAILED: Scenario 4 - jsclient_sec_5_b - Connect to ISM server with a ConnectionPolicy that authorizes only one user
      FAILED: Scenario 5 - jsclient_sec_6_b - Connect to ISM server using an authorized user (wildcards in ID on ConnectionPolicy) (IPv6)
      FAILED: Scenario 6 - jsclient_sec_e1_b - UserName is not specified (IPv6)
      FAILED: Scenario 7 - jsclient_sec_e2_b - User does not exist (was invalid UTF-8 test)
      FAILED: Scenario 8 - jsclient_sec_e3_b - User does not exist (IPv6)
      FAILED: Scenario 9 - jsclient_sec_e5_b - Incorrect password
      FAILED: Scenario 10 - jsclient_sec_e9_b - User is not authorized (IPv6)
      FAILED: Scenario 11 - jsclient_sec_e10_b - Insecure connection to a secure Endpoint
      FAILED: Scenario 12 - jsclient_sec_e12_b - Protocol is JMS on the ConnectionPolicy
      FAILED: Scenario 13 - jsclient_sec_e13_b - Protocol is JMS on the Endpoint (IPv6)
      FAILED: Scenario 14 - jsclient_sec_e14_b - Empty userName and password
      FAILED: Scenario 16 - jsclient_sec_e16_b - Empty userName and non-empty password
      FAILED: Scenario 2 - jsclient_pubsub_1_b - Basic publish/subscribe for the JavaScript Client
      FAILED: Scenario 3 - jsclient_pubsub_2_b - QoS=1 on publish (IPv6)
      FAILED: Scenario 4 - jsclient_pubsub_3_b - QoS=2 on publish
      FAILED: Scenario 5 - jsclient_pubsub_4_b - Multiple topics, QoS=0 on publish (IPv6)
      FAILED: Scenario 6 - jsclient_pubsub_5_b - Test for case-sensitivity in topic name
      FAILED: Scenario 7 - jsclient_pubsub_8_b - Specify a subscribe complete callback (IPv6)
      FAILED: Scenario 8 - jsclient_pubsub_10_b - Specify various callbacks for onsubscribe (IPv6)
      FAILED: Scenario 9 - jsclient_pubsub_11_b - Wildcard subscriptions
      FAILED: Scenario 10 - jsclient_pubsub_12_b - Mixed QoS on publish, QoS=0 on subscribe (IPv6)
      FAILED: Scenario 11 - jsclient_pubsub_13_b - Mixed QoS on publish, QoS=1 on subscribe
      FAILED: Scenario 12 - jsclient_pubsub_14_b - Mixed QoS on publish, QoS=2 on subscribe (IPv6)
      FAILED: Scenario 13 - jsclient_pubsub_15_b - Mixed QoS topics in one client
      FAILED: Scenario 14 - jsclient_pubsub_16_b - Mixed QoS client with wildcard subscriptions (IPv6)
      FAILED: Scenario 15 - jsclient_pubsub_17_b - Test retained
      FAILED: Scenario 16 - jsclient_pubsub_18_b - Retained message is not the last message
      FAILED: Scenario 17 - jsclient_pubsub_19_b - No unsubscribe before disconnect
      FAILED: Scenario 18 - jsclient_pubsub_22_b - Unsubscribe from the same topic twice
      FAILED: Scenario 19 - jsclient_pubsub_24_b - Test where publisher and subscriber are on different clients (synchronized)
      FAILED: Scenario 20 - jsclient_pubsub_25_b - Connect to an Connection/Messaging Policy that authorizes clients for the MQTT and JMS protocols (IPv6)
      FAILED: Scenario 21 - jsclient_pubsub_26_b - Connect to an Connection/Messaging Policy that authorizes MQTT clients only
      FAILED: Scenario 22 - jsclient_pubsub_27_b - Connect to an Connection/MessagingPolicy that authorizes a specific user/topic (IPv6)
      FAILED: Scenario 23 - jsclient_pubsub_e1_b - Test for invalid topic names on pub
      FAILED: Scenario 24 - jsclient_pubsub_e2_b - Test for invalid QoS values on pub
      FAILED: Scenario 25 - jsclient_pubsub_e3_b - Test for invalid retain value on pub
      FAILED: Scenario 26 - jsclient_pubsub_e4_b - Test for invalid wildcard placements on sub
      FAILED: Scenario 27 - jsclient_pubsub_e6_b - Test for invalid QoS values on sub
      FAILED: Scenario 28 - jsclient_pubsub_e7_b - Specify a non-function for subscribeCompleteCallback
      FAILED: Scenario 29 - jsclient_pubsub_e8_b - Specify a non-function for the onmessage callback for a client
      FAILED: Scenario 30 - jsclient_pubsub_e13_b - Test for unsubscribe with non-function callback
      FAILED: Scenario 31 - jsclient_pubsub_e14_b - Unsubscribe from a topic with invalid wc placement
      FAILED: Scenario 32 - jsclient_pubsub_e15_b - Attempt to publish/subscribe on an unauthorized protocol
      FAILED: Scenario 33 - jsclient_pubsub_e16_b - Attempt to publish/subscribe on an unauthorized topic
      FAILED: Scenario 1 - jsclient_gvt_1_b - GVT: ClientID test
      FAILED: Scenario 2 - jsclient_gvt_2_b - GVT: Topic name test
      FAILED: Scenario 3 - jsclient_gvt_3_b - GVT: userName and password test
      FAILED: Scenario 4 - jsclient_gvt_4_b - GVT: Will Topic and Message test
  "cli_tests" FAILED:
      FAILED: Scenario 0 - cli_GVT_MQTT_AUTO_ID_2 - policy test ID_2
      FAILED: Scenario 4 - cli_GVT_MQTT_AUTO_ID_4 - policy test ID_4
      FAILED: Scenario 16 - cli_GVT_MQTT_AUTO_ID_11 - policy test ID_11
      FAILED: Scenario 18 - cli_GVT_MQTT_AUTO_ID_12 - policy test ID_12
      FAILED: Scenario 20 - cli_GVT_MQTT_AUTO_ID_13 - policy test ID_13
      FAILED: Scenario 22 - cli_GVT_MQTT_AUTO_ID_14 - policy test ID_14
      FAILED: Scenario 24 - cli_GVT_MQTT_AUTO_ID_15 - policy test ID_15
      FAILED: Scenario 26 - cli_GVT_MQTT_AUTO_ID_16 - policy test ID_16
      FAILED: Scenario 28 - cli_GVT_MQTT_AUTO_ID_17 - policy test ID_17
      FAILED: Scenario 30 - cli_GVT_MQTT_AUTO_ID_18 - policy test ID_18
      FAILED: Scenario 34 - cli_GVT_MQTT_AUTO_ID_20 - policy test ID_20
      FAILED: Scenario 42 - cli_GVT_MQTT_AUTO_ID_24 - policy test ID_24
      FAILED: Scenario 44 - cli_GVT_MQTT_AUTO_ID_25 - policy test ID_25
      FAILED: Scenario 46 - cli_GVT_MQTT_AUTO_ID_26 - policy test ID_26
      FAILED: Scenario 52 - cli_GVT_MQTT_AUTO_ID_29 - policy test ID_29
      FAILED: Scenario 54 - cli_GVT_MQTT_AUTO_ID_31 - policy test ID_31
      FAILED: Scenario 56 - cli_GVT_MQTT_AUTO_ID_33 - policy test ID_33
      FAILED: Scenario 60 - cli_GVT_MQTT_AUTO_ID_36 - policy test ID_36
      FAILED: Scenario 62 - cli_GVT_MQTT_AUTO_ID_37 - policy test ID_37
      FAILED: Scenario 64 - cli_GVT_MQTT_AUTO_ID_38 - policy test ID_38
      FAILED: Scenario 66 - cli_GVT_MQTT_AUTO_ID_40 - policy test ID_40
      FAILED: Scenario 72 - cli_GVT_MQTT_AUTO_ID_43 - policy test ID_43
      FAILED: Scenario 76 - cli_GVT_MQTT_AUTO_ID_45 - policy test ID_45
      FAILED: Scenario 2 - cli_security_test_001 - send test data to topic
      FAILED: Scenario 4 - cli_security_test_002 - send test data to topic
      FAILED: Scenario 6 - cli_security_test_003 - send test data to topic
      FAILED: Scenario 10 - cli_security_test_006 - send test data to topic - client auth
      FAILED: Scenario 14 - cli_security_test_008 - send should work
      FAILED: Scenario 19 - cli_security_test_012 - should work after ep gets new security profile
      FAILED: Scenario 7 - cli_stat_topics_test_007 - send test data to topic
      FAILED: Scenario 8 - cli_stat_topics_test_008 - validate stat command.
      FAILED: Scenario 19 - cli_stat_topics_test_016 - validate stat command.
  "MQConnectivity_tests" FAILED:
      FAILED: Scenario 3 - MQ_CON_BOUNDARIES_04 - com.ibm.ima.mqcon.boundaries MQTT messages are published to a topic which is associated with a destination mapping rule in order to check that the max messages value is being enforced
  "snmp_tests" FAILED:
      FAILED: Scenario 5 - SNMP_verify_endpoint_info - Verify Endpoint Information
cAppDriverWait  ./ism-SNMP-VerifyMemoryInfo.sh FAILED to start!
      FAILED: Scenario 6 - SNMP_verify_memory_info - Verify Memory Information RC=1
      FAILED: runScenarios - SNMP Tests : Server stopped running during execution.
      FAILED: runScenarios - SNMP Tests : ism-SNMP-tests_Core - A core file was found on A1 after running ism-SNMP-tests.
      FAILED: runScenarios - SNMP Tests : ism-SNMP-tests_Core - A core file was found on A1 after running ism-SNMP-tests.
  "jca_tests" FAILED:
      FAILED: runScenarios - JCA Setup Objects - 00: 10.73.131.212 A1:Server may not be running. service/status returned RC=7
      FAILED: Scenario 0 - jca_retained_001 - JCA retained 001
      FAILED: Scenario 2 - jca_topic_001 - JCA topic 001
      FAILED: Scenario 3 - jca_topic_002 - JCA topic 002
      FAILED: Scenario 5 - jca_queue_001 - JCA queue 001
      FAILED: Scenario 6 - jca_shared_001 - JCA shared 001 - nondurable shared subscription without a clientid
      FAILED: Scenario 7 - jca_shared_002 - JCA shared 002 - nondurable shared subscription with a clientid
      FAILED: Scenario 8 - jca_shared_003 - JCA shared 003 - durable shared subscription without a clientid
      FAILED: Scenario 9 - jca_shared_004 - JCA shared 004 - durable shared subscription with a clientid
      FAILED: Scenario 10 - jca_jndi_topic - JCA JNDI Topic
      FAILED: Scenario 11 - jca_jndi_queue - JCA JNDI Queue
      FAILED: Scenario 13 - jca_api_001 - JCA api 001 - Test various JMS API*s in the RA environment
      FAILED: Scenario 0 - jca_ssltopic_001 - JCA SSL Topic 001
      FAILED: Scenario 1 - jca_sslqueue_001 - JCA SSL Queue 001
      FAILED: Scenario 2 - jca_ssltopic_002 - JCA SSL Topic 002
      FAILED: Scenario 3 - jca_sslqueue_002 - JCA SSL Queue 002 - User authentication on outbound
      FAILED: Scenario 1 - jca_enablerb_001 - enable rollback = true BMT
      FAILED: Scenario 2 - jca_enablerb_002 - enable rollback = true CMTNS
      FAILED: Scenario 3 - jca_enablerb_003 - enable rollback = false BMT
      FAILED: Scenario 4 - jca_enablerb_004 - enable rollback = false CMTNS
      FAILED: Scenario 5 - jca_pause_001 - MDB Pause - this test should not cause the MDB to pause
      FAILED: Scenario 6 - jca_pause_002 - MDB Pause - this test should cause the MDB to pause
      FAILED: Scenario 8 - jca_pause_003 - ignoreFailuresOnStart activation spec property test
      FAILED: Scenario 10 - jca_translevel_001 - transactionLevelSupport = Local with CMTNS MDB and CMTR EJB
      FAILED: Scenario 11 - jca_translevel_002 - transationLevelSupport = Local with BMT MDB and EJB
      FAILED: Scenario 12 - jca_translevel_003 - transationLevelSupport = NoTransaction with CMTR MDB and Supports EJB
      FAILED: Scenario 13 - jca_translevel_004 - transationLevelSupport = NoTransaction with BMTUT MDB
      FAILED: Scenario 0 - jca_bmtut_topic - Stateless Session Bean with Bean Managed Transactions on a topic
      FAILED: Scenario 1 - jca_bmtut_queue - Stateless Session Bean with Bean Managed Transactions on a queue
      FAILED: Scenario 2 - jca_bmtut_rb_nonpersistent - Bean Managed Transactions and rollback with non-persistent messages
      FAILED: Scenario 3 - jca_bmtut_rb_persistent - Bean Managed Transactions and rollback with persistent messages
      FAILED: Scenario 4 - jca_bmtut_rb_queue - Bean Managed Transactions and rollback with a queue
      FAILED: Scenario 0 - jca_cmtr_topic - Stateless Session Bean with Container Managed Transactions - MDB Required
      FAILED: Scenario 1 - jca_cmtr_nodb2_topic - Stateless Session Bean with Container Managed Transactions - MDB Required - no DB2
      FAILED: Scenario 2 - jca_cmtns_topic - Stateless Session Bean with Container Managed Transactions - MDB NotSupported
      FAILED: Scenario 3 - jca_cmtns_nodb2_topic - Stateless Session Bean with Container Managed Transactions - MDB NotSupported - no DB2
      FAILED: Scenario 4 - jca_cmtr_queue - Stateless Session Bean with Container Managed Transactions - MDB Required - Queue
      FAILED: Scenario 5 - jca_cmtns_queue - Stateless Session Bean with Container Managed Transactions - MDB NotSupported - Queue
      FAILED: Scenario 6 - jca_cmt_rb_nonpersistent - Container Managed Transactions with rollback - nonpersistent
      FAILED: Scenario 7 - jca_cmt_rb_persistent - Container Managed Transactions with rollback - persistent
      FAILED: Scenario 8 - jca_cmt_rb_queue - Container Managed Transactions with rollback - queue
      FAILED: Scenario 9 - jca_dest_full - CMTR MDB and max messages
      FAILED: Scenario 0 - jca_xaerror_none_statelessBMTUT - A check to make sure Evil RA works
      FAILED: Scenario 1 - jca_xaerror_prepare_statelessBMTUT - EvilRA throws Error in prepare() in XA
      FAILED: Scenario 2 - jca_xaerror_commit_statelessBMTUT - EvilRA throws Error in commit() in XA
      FAILED: Scenario 3 - jca_xaerror_start_statelessBMTUT - EvilRA throws Error in start() in XA
      FAILED: Scenario 4 - jca_xaerror_end_statelessBMTUT - EvilRA throws Error in end() in XA
      FAILED: Scenario 5 - jca_xaerror_none_statelessCMT - A check to make sure Evil RA works
      FAILED: Scenario 6 - jca_xaerror_prepare_statelessCMT - EvilRA throws Error in prepare() in XA
      FAILED: Scenario 7 - jca_xaerror_commit_statelessCMT - EvilRA throws Error in commit() in XA
      FAILED: Scenario 8 - jca_xaerror_start_statelessCMT - EvilRA throws Error in start() in XA
      FAILED: Scenario 9 - jca_xaerror_end_statelessCMT - EvilRA throws Error in end() in XA
      FAILED: Scenario 0 - jca_reconnect_001 - JCA Reconnect 001
      FAILED: Scenario 1 - jca_reconnect_002 - Durable Shared subscription CMTR MDB, max messages and an imaserver restart
      FAILED: Scenario 0 - heur_commit_cmt - JCA Heuristic XA CMT Commit
      FAILED: Scenario 1 - heur_commit_bmt - JCA Heuristic XA BMT Commit
      FAILED: Scenario 2 - heur_rollback_cmt - JCA Heuristic XA CMT Rollback
      FAILED: Scenario 3 - heur_rollback_bmt - JCA Heuristic XA BMT Rollback
      FAILED: Scenario 4 - heur_prepCommit_cmt - JCA Heuristic XA CMT crash on prepare then commit
      FAILED: Scenario 5 - heur_prepRB_cmt - JCA Heuristic XA CMT crash on prepare then rollback
      FAILED: Scenario 6 - heur_prepCommit_bmt - JCA Heuristic XA BMT crash on prepare then commit
      FAILED: Scenario 7 - heur_prepRB_bmt - JCA Heuristic XA BMT crash on prepare then rollback
  "restapi" FAILED:
      FAILED: Scenario 0 - RESTAPI-00-ResetConfig - RESTAPI for Service Reset Config
      FAILED: Scenario 1 - RESTAPI-01-AdminLog - RESTAPI for AdminLog
      FAILED: Scenario 2 - RESTAPI-02-ConnectionLog - RESTAPI for ConnectionLog
      FAILED: Scenario 3 - RESTAPI-03-LogLevel - RESTAPI for LogLevel
      FAILED: Scenario 4 - RESTAPI-04-SecurityLog - RESTAPI for SecurityLog
      FAILED: Scenario 5 - RESTAPI-05-TraceBackup - RESTAPI for TraceBackup
      FAILED: Scenario 6 - RESTAPI-06-TraceBackupCount - RESTAPI for TraceBackupCount
      FAILED: Scenario 7 - RESTAPI-07-TraceBackupDestination - RESTAPI for TraceBackupDestination
      FAILED: Scenario 8 - RESTAPI-08-TraceConnection - RESTAPI for TraceConnection
      FAILED: Scenario 9 - RESTAPI-09-TraceLevel - RESTAPI for TraceLevel
      FAILED: Scenario 10 - RESTAPI-10-TraceMax - RESTAPI for TraceMax
      FAILED: Scenario 11 - RESTAPI-11-TraceMessageData - RESTAPI for TraceMessageData
      FAILED: Scenario 12 - RESTAPI-12-TraceOptions - RESTAPI for TraceOptions
      FAILED: Scenario 13 - RESTAPI-13-TraceSelected - RESTAPI for TraceSelected
      FAILED: Scenario 15 - RESTAPI-15-Syslog - RESTAPI for Syslog
      FAILED: Scenario 16 - RESTAPI-20-MessageHub - RESTAPI for MessageHub
      FAILED: Scenario 17 - RESTAPI-21-ConnectionPolicy - RESTAPI for ConnectionPolicy
      FAILED: Scenario 18 - RESTAPI-23-Endpoint - RESTAPI for Endpoint
      FAILED: Scenario 19 - RESTAPI-24-Queue - RESTAPI for Queue
      FAILED: Scenario 20 - RESTAPI-26-TopicPolicy - RESTAPI for TopicPolicy
      FAILED: Scenario 21 - RESTAPI-27-QueuePolicy - RESTAPI for QueuePolicy
      FAILED: Scenario 22 - RESTAPI-28-SubscriptionPolicy - RESTAPI for SubscriptionPolicy
      FAILED: Scenario 23 - RESTAPI-29-Plugin - RESTAPI for Plugin
      FAILED: Scenario 24 - RESTAPI-30-PluginDebugPort - RESTAPI for PluginDebugPort
      FAILED: Scenario 25 - RESTAPI-31-PluginDebugServer - RESTAPI for PluginDebugServer
      FAILED: Scenario 26 - RESTAPI-32-PluginMaxHeapSize - RESTAPI for PluginMaxHeapSize
      FAILED: Scenario 27 - RESTAPI-33-PluginPort - RESTAPI for PluginPort
      FAILED: Scenario 28 - RESTAPI-34-PluginServer - RESTAPI for PluginServer
      FAILED: Scenario 29 - RESTAPI-35-PluginVMArgs - RESTAPI for PluginVMArgs
      FAILED: Scenario 30 - RESTAPI-40-AdminEndpoint - RESTAPI for AdminEndpoint
      FAILED: Scenario 31 - RESTAPI-41-CertificateProfile - RESTAPI for CertificateProfile
      FAILED: Scenario 32 - RESTAPI-42-ConfigurationPolicy - RESTAPI for ConfigurationPolicy
      FAILED: Scenario 33 - RESTAPI-43-FIPS - RESTAPI for FIPS
      FAILED: Scenario 34 - RESTAPI-44-LDAP - RESTAPI for LDAP
      FAILED: Scenario 35 - RESTAPI-45-LTPAProfile - RESTAPI for LTPAProfile
      FAILED: Scenario 36 - RESTAPI-46-OAuthProfile - RESTAPI for OAuthProfile
      FAILED: Scenario 37 - RESTAPI-47-SecurityProfile - RESTAPI for SecurityProfile
      FAILED: Scenario 38 - RESTAPI-48-ClientCertificate - RESTAPI for ClientCertificate
      FAILED: Scenario 39 - RESTAPI-49-TrustedCertificate - RESTAPI for TrustedCertificate
      FAILED: Scenario 42 - RESTAPI-61-AdminUserID - RESTAPI for AdminUserID
      FAILED: Scenario 44 - RESTAPI-63-ClusterMembership - RESTAPI for ClusterMembership
      FAILED: Scenario 46 - RESTAPI-65-LicensedUsage - RESTAPI for LicensedUsage
      FAILED: Scenario 50 - RESTAPI-80-ServerName - RESTAPI for ServerName
      FAILED: Scenario 51 - RESTAPI-81-ServerUID - RESTAPI for ServerUID
      FAILED: Scenario 53 - RESTAPI-83-TolerateRecoveryInconsistencies - RESTAPI for TolerateRecoveryInconsistencies
      FAILED: Scenario 54 - RESTAPI-90-DestinationMappingRule - RESTAPI for DestinationMappingRule
      FAILED: Scenario 57 - RESTAPI-93-QueueManagerConnection - RESTAPI for QueueManagerConnection
      FAILED: Scenario 0 - RESTAPI-00-Service - RESTAPI for Service
cAppDriver  /niagara/test/restapi/synopsis.sh FAILED to start!
      FAILED: Scenario 1 - RESTAPI-99-Synopsis - Synopsis of RESTAPI Execution RC=1

(RC!=0 for some tests, check individual results for details)

IMA Automated Framework Summary Report
==========================================================================================================================================
Build Type:       production
Server Release:   MGPROD @ 20210519-1726
Proxy Release:    MGPROD @ 20210519-1726
Client Release:   MGPROD @ 20210519-1726
Test Release:     MGPROD @ 20210519-1726
Test Group:       fvt_prod
Total Time:       12:17:12

Total Results:    Passed:  3106   Failed:   727   Success:  81.03%
                  (RC!=0 for some tests, check individual results for details)

Platform Results:
-------------------
CCI_CENTOS_DOCKER:    Passed:  3106   Failed:   727   Success:  81.03%

Individual Results:
-------------------
JMS:                  Passed:   593   Failed:   149   Success:  79.92%
JMS_MQTT:             Passed:    24   Failed:     4   Success:  85.71%
MQTT:                 Passed:   918   Failed:    36   Success:  96.23%
WS:                   Passed:    24   Failed:   120   Success:  16.67%
CLI:                  Passed:   804   Failed:    62   Success:  92.84%
REST_API:             Passed:    29   Failed:    98   Success:  22.83%
PROXY:                Passed:    91   Failed:   212   Success:  30.03%
MQ_CONN:              Passed:   170   Failed:     2   Success:  98.84%
HA:                   Passed:   167   Failed:    22   Success:  88.36%
CLUSTER:              Passed:   219   Failed:     0   Success: 100.00%
SNMP:                 Passed:    11   Failed:    15   Success:  42.31%

==========================================================================================================================================
=========================================== Summary of Failures by Number of Occurrences =================================================
==========================================================================================================================================
 4  mqtt_clearRetained.xml - Clear all retained messages
 3  jca_topic_002 - JCA topic 002
 3  jca_topic_001 - JCA topic 001
 3  jca_shared_004 - JCA shared 004 - durable shared subscription with a clientid
 3  jca_shared_003 - JCA shared 003 - durable shared subscription without a clientid
 3  jca_shared_002 - JCA shared 002 - nondurable shared subscription with a clientid
 3  jca_shared_001 - JCA shared 001 - nondurable shared subscription without a clientid
 3  jca_retained_001 - JCA retained 001
 3  jca_queue_001 - JCA queue 001
 3  jca_jndi_topic - JCA JNDI Topic
 3  jca_jndi_queue - JCA JNDI Queue
 3  jca_api_001 - JCA api 001 - Test various JMS API*s in the RA environment
 3  SNMP Tests : ism-SNMP-tests_Core - A core file was found on A1 after running ism-SNMP-tests.
 2  to start!
 2  testplugin_subscribe14 - Test MQTT/WebSocket subscribe to long topic (<32767 characters)
 2  testplugin_subscribe01 - Test MQTT/WebSocket subscribe to *#*
 2  testmqtt_stat02 - Test that stat MQTTClient shows correct clients
 2  testmqtt_gvt06 - Test ability to connect with GVT characters E3 in user/password [ testmqtt_gvt06.xml ]
 2  testmqtt_gvt03 - Test ability to connect with GVT characters in user/password [ testmqtt_gvt03.xml ]
 2  testmqtt_gvt02 - Test ability to connect over an SSL connection [ testmqtt_gvt02.xml ]
 2  testmqtt_gvt01 - Test ability use GVT characters in topic and ClientID [ testmqtt_gvt01.xml ]
 2  ssl/testmqtt_ssl09b - Test MQTT/WebSocket CommonName usage in ClientID on ConnectionPolicy with asterisk character
 2  ssl/testmqtt_ssl09a - Test MQTT/WebSocket CommonName usage in ClientID on ConnectionPolicy with asterisk character
 2  ssl/testmqtt_ssl08 - Test MQTT/WebSocket CommonName usage in ClientID on ConnectionPolicy with asterisk character
 2  ssl/testmqtt_ssl07 - Test MQTT/WebSocket CommonName usage
 2  ssl/testmqtt_ssl06 - Test MQTT/WebSocket CommonName usage
 2  ssl/testmqtt_ssl05 - Test MQTT/WebSocket CommonName usage
 2  mqtt_clearRetained.xml - Clear all retained messages with MQTTv5
 2  jsclient_sec_e9_b - User is not authorized (IPv6)
 2  jsclient_sec_e5_b - Incorrect password
 2  jsclient_sec_e3_b - User does not exist (IPv6)
 2  jsclient_sec_e2_b - User does not exist (was invalid UTF-8 test)
 2  jsclient_sec_e1_b - UserName is not specified (IPv6)
 2  jsclient_sec_e16_b - Empty userName and non-empty password
 2  jsclient_sec_e14_b - Empty userName and password
 2  jsclient_sec_e13_b - Protocol is JMS on the Endpoint (IPv6)
 2  jsclient_sec_e12_b - Protocol is JMS on the ConnectionPolicy
 2  jsclient_sec_e10_b - Insecure connection to a secure Endpoint
 2  jsclient_sec_6_b - Connect to ISM server using an authorized user (wildcards in ID on ConnectionPolicy) (IPv6)
 2  jsclient_sec_5_b - Connect to ISM server with a ConnectionPolicy that authorizes only one user
 2  jsclient_sec_4_b - Connect to ISM server with an MQTT-only Endpoint (IPv6)
 2  jsclient_sec_3_b - Connect to ISM server with an MQTT-only ConnectionPolicy
 2  jsclient_sec_2_b - Connect to ISM server with SSL disabled, using a valid, non-empty username and password (IPv6)
 2  jsclient_pubsub_e8_b - Specify a non-function for the onmessage callback for a client
 2  jsclient_pubsub_e7_b - Specify a non-function for subscribeCompleteCallback
 2  jsclient_pubsub_e6_b - Test for invalid QoS values on sub
 2  jsclient_pubsub_e4_b - Test for invalid wildcard placements on sub
 2  jsclient_pubsub_e3_b - Test for invalid retain value on pub
 2  jsclient_pubsub_e2_b - Test for invalid QoS values on pub
 2  jsclient_pubsub_e1_b - Test for invalid topic names on pub
 2  jsclient_pubsub_e16_b - Attempt to publish/subscribe on an unauthorized topic
 2  jsclient_pubsub_e15_b - Attempt to publish/subscribe on an unauthorized protocol
 2  jsclient_pubsub_e14_b - Unsubscribe from a topic with invalid wc placement
 2  jsclient_pubsub_e13_b - Test for unsubscribe with non-function callback
 2  jsclient_pubsub_8_b - Specify a subscribe complete callback (IPv6)
 2  jsclient_pubsub_5_b - Test for case-sensitivity in topic name
 2  jsclient_pubsub_4_b - Multiple topics, QoS=0 on publish (IPv6)
 2  jsclient_pubsub_3_b - QoS=2 on publish
 2  jsclient_pubsub_2_b - QoS=1 on publish (IPv6)
 2  jsclient_pubsub_27_b - Connect to an Connection/MessagingPolicy that authorizes a specific user/topic (IPv6)
 2  jsclient_pubsub_26_b - Connect to an Connection/Messaging Policy that authorizes MQTT clients only
 2  jsclient_pubsub_25_b - Connect to an Connection/Messaging Policy that authorizes clients for the MQTT and JMS protocols (IPv6)
 2  jsclient_pubsub_24_b - Test where publisher and subscriber are on different clients (synchronized)
 2  jsclient_pubsub_22_b - Unsubscribe from the same topic twice
 2  jsclient_pubsub_1_b - Basic publish/subscribe for the JavaScript Client
 2  jsclient_pubsub_19_b - No unsubscribe before disconnect
 2  jsclient_pubsub_18_b - Retained message is not the last message
 2  jsclient_pubsub_17_b - Test retained
 2  jsclient_pubsub_16_b - Mixed QoS client with wildcard subscriptions (IPv6)
 2  jsclient_pubsub_15_b - Mixed QoS topics in one client
 2  jsclient_pubsub_14_b - Mixed QoS on publish, QoS=2 on subscribe (IPv6)
 2  jsclient_pubsub_13_b - Mixed QoS on publish, QoS=1 on subscribe
 2  jsclient_pubsub_12_b - Mixed QoS on publish, QoS=0 on subscribe (IPv6)
 2  jsclient_pubsub_11_b - Wildcard subscriptions
 2  jsclient_pubsub_10_b - Specify various callbacks for onsubscribe (IPv6)
 2  jsclient_gvt_4_b - GVT: Will Topic and Message test
 2  jsclient_gvt_3_b - GVT: userName and password test
 2  jsclient_gvt_2_b - GVT: Topic name test
 2  jsclient_gvt_1_b - GVT: ClientID test
 2  jsclient_connect_e12_b - Create an Endpoint that does not have a ConnectionPolicy -  CLI
 2  jsclient_connect_e11_b - Connect to a server with an Endpoint that does not allow the MQTT protocol
 2  jsclient_connect_e10_b - Connect to a server with a connection policy that does not allow the MQTT protocol
 2  jsclient_connect_6_b - Connect to a server with a connection policy that only allows the MQTT protocol
 2  jsclient_connect_5_b - Connect with a non-unique clientId (synchronized) (IPv6)
 2  jsclient_connect_4_b - Connect with multiple clients (synchronized)
 2  jsclient_connect_3_b - Connect with a single space as the clientId (IPv6)
 2  jsclient_connect_2_b - Connect using a clientId with a space and other chars
 2  jsclient_connect_1_b - Connect with a single char clientId (IPv6)
 2  jms_oauth_notls - Test notls - OAuth Test with no TLS
 2  jms_oauth_010_truststore - Test 10 - OAuth Test 10 with TrustStore set
 2  jms_oauth_009_groupinfokey - Test 9 - OAuth Test 9 with GroupInfoKey and
 2  jms_oauth_007_groupinfokey - Test 4 - OAuth Test 7 with GroupInfoKey group list
 2  jms_oauth_006 - Test 6 - OAuth Test 6
 2  jms_oauth_003_groupinfokey - Test 3 - OAuth Test 3 with GroupInfoKey
 2  jms_oauth_003 - Test 3 - OAuth Test 3
 2  jms_oauth_002_sameURL - Test 2 - OAuth Test 2 with GroupInfoKey sameURL
 2  jms_oauth_002_groupinfokey - Test 2 - OAuth Test 2 with GroupInfoKey
 2  jms_oauth_002 - Test 2 - OAuth Test 2
 2  jms_oauth_001_groupinfokey - Test 1 - OAuth Test 1 with GroupInfoKey
 2  jms_oauth_001 - Test 1 - OAuth Test 1
 2  jms_mqtt_001 JMS to MQTT - Test 1 with Unicode Topic Name and RETAINED. [ jms_mqtt_001.xml ]
 2  jca_xaerror_start_statelessCMT - EvilRA throws Error in start() in XA
 2  jca_xaerror_start_statelessBMTUT - EvilRA throws Error in start() in XA
 2  jca_xaerror_prepare_statelessCMT - EvilRA throws Error in prepare() in XA
 2  jca_xaerror_prepare_statelessBMTUT - EvilRA throws Error in prepare() in XA
 2  jca_xaerror_none_statelessCMT - A check to make sure Evil RA works
 2  jca_xaerror_none_statelessBMTUT - A check to make sure Evil RA works
 2  jca_xaerror_end_statelessCMT - EvilRA throws Error in end() in XA
 2  jca_xaerror_end_statelessBMTUT - EvilRA throws Error in end() in XA
 2  jca_xaerror_commit_statelessCMT - EvilRA throws Error in commit() in XA
 2  jca_xaerror_commit_statelessBMTUT - EvilRA throws Error in commit() in XA
 2  jca_translevel_004 - transationLevelSupport = NoTransaction with BMTUT MDB
 2  jca_translevel_003 - transationLevelSupport = NoTransaction with CMTR MDB and Supports EJB
 2  jca_translevel_002 - transationLevelSupport = Local with BMT MDB and EJB
 2  jca_translevel_001 - transactionLevelSupport = Local with CMTNS MDB and CMTR EJB
 2  jca_ssltopic_002 - JCA SSL Topic 002
 2  jca_ssltopic_001 - JCA SSL Topic 001
 2  jca_sslqueue_002 - JCA SSL Queue 002 - User authentication on outbound
 2  jca_sslqueue_001 - JCA SSL Queue 001
 2  jca_reconnect_002 - Durable Shared subscription CMTR MDB, max messages and an imaserver restart
 2  jca_reconnect_001 - JCA Reconnect 001
 2  jca_pause_003 - ignoreFailuresOnStart activation spec property test
 2  jca_pause_002 - MDB Pause - this test should cause the MDB to pause
 2  jca_pause_001 - MDB Pause - this test should not cause the MDB to pause
 2  jca_enablerb_004 - enable rollback = false CMTNS
 2  jca_enablerb_003 - enable rollback = false BMT
 2  jca_enablerb_002 - enable rollback = true CMTNS
 2  jca_enablerb_001 - enable rollback = true BMT
 2  jca_dest_full - CMTR MDB and max messages
 2  jca_cmtr_topic - Stateless Session Bean with Container Managed Transactions - MDB Required
 2  jca_cmtr_queue - Stateless Session Bean with Container Managed Transactions - MDB Required - Queue
 2  jca_cmtr_nodb2_topic - Stateless Session Bean with Container Managed Transactions - MDB Required - no DB2
 2  jca_cmtns_topic - Stateless Session Bean with Container Managed Transactions - MDB NotSupported
 2  jca_cmtns_queue - Stateless Session Bean with Container Managed Transactions - MDB NotSupported - Queue
 2  jca_cmtns_nodb2_topic - Stateless Session Bean with Container Managed Transactions - MDB NotSupported - no DB2
 2  jca_cmt_rb_queue - Container Managed Transactions with rollback - queue
 2  jca_cmt_rb_persistent - Container Managed Transactions with rollback - persistent
 2  jca_cmt_rb_nonpersistent - Container Managed Transactions with rollback - nonpersistent
 2  jca_bmtut_topic - Stateless Session Bean with Bean Managed Transactions on a topic
 2  jca_bmtut_rb_queue - Bean Managed Transactions and rollback with a queue
 2  jca_bmtut_rb_persistent - Bean Managed Transactions and rollback with persistent messages
 2  jca_bmtut_rb_nonpersistent - Bean Managed Transactions and rollback with non-persistent messages
 2  jca_bmtut_queue - Stateless Session Bean with Bean Managed Transactions on a queue
 2  heur_rollback_cmt - JCA Heuristic XA CMT Rollback
 2  heur_rollback_bmt - JCA Heuristic XA BMT Rollback
 2  heur_prepRB_cmt - JCA Heuristic XA CMT crash on prepare then rollback
 2  heur_prepRB_bmt - JCA Heuristic XA BMT crash on prepare then rollback
 2  heur_prepCommit_cmt - JCA Heuristic XA CMT crash on prepare then commit
 2  heur_prepCommit_bmt - JCA Heuristic XA BMT crash on prepare then commit
 2  heur_commit_cmt - JCA Heuristic XA CMT Commit
 2  heur_commit_bmt - JCA Heuristic XA BMT Commit
 2  deleteAllRetained0 - Delete any RETAINed messages, error if any exist
 2  cli_stat_topics_test_016 - validate stat command.
 2  cli_stat_topics_test_008 - validate stat command.
 2  cli_stat_topics_test_007 - send test data to topic
 2  cli_security_test_012 - should work after ep gets new security profile
 2  cli_security_test_008 - send should work
 2  cli_security_test_006 - send test data to topic - client auth
 2  cli_security_test_003 - send test data to topic
 2  cli_security_test_002 - send test data to topic
 2  cli_security_test_001 - send test data to topic
 2  cli_GVT_MQTT_AUTO_ID_45 - policy test ID_45
 2  cli_GVT_MQTT_AUTO_ID_43 - policy test ID_43
 2  cli_GVT_MQTT_AUTO_ID_40 - policy test ID_40
 2  cli_GVT_MQTT_AUTO_ID_4 - policy test ID_4
 2  cli_GVT_MQTT_AUTO_ID_38 - policy test ID_38
 2  cli_GVT_MQTT_AUTO_ID_37 - policy test ID_37
 2  cli_GVT_MQTT_AUTO_ID_36 - policy test ID_36
 2  cli_GVT_MQTT_AUTO_ID_31 - policy test ID_31
 2  cli_GVT_MQTT_AUTO_ID_29 - policy test ID_29
 2  cli_GVT_MQTT_AUTO_ID_26 - policy test ID_26
 2  cli_GVT_MQTT_AUTO_ID_25 - policy test ID_25
 2  cli_GVT_MQTT_AUTO_ID_24 - policy test ID_24
 2  cli_GVT_MQTT_AUTO_ID_20 - policy test ID_20
 2  cli_GVT_MQTT_AUTO_ID_2 - policy test ID_2
 2  cli_GVT_MQTT_AUTO_ID_18 - policy test ID_18
 2  cli_GVT_MQTT_AUTO_ID_17 - policy test ID_17
 2  cli_GVT_MQTT_AUTO_ID_16 - policy test ID_16
 2  cli_GVT_MQTT_AUTO_ID_15 - policy test ID_15
 2  cli_GVT_MQTT_AUTO_ID_14 - policy test ID_14
 2  cli_GVT_MQTT_AUTO_ID_13 - policy test ID_13
 2  cli_GVT_MQTT_AUTO_ID_12 - policy test ID_12
 2  cli_GVT_MQTT_AUTO_ID_11 - policy test ID_11
 2  bridgePx.SimpleA1A2 - Test Simple Pub-Fwd-Recv through Bridge   bridge_tests/proxy/ism-Bridge-Proxy01.sh
 2  bridgePx.MultiFWD_V3Source - Test Multile Forwarders with V3 Source Bridge   bridge_tests/proxy/ism-Bridge-Proxy01.sh
 2  bridgePx.MaxFWDTopics - Test Max Forwarder Topics Bridge   bridge_tests/proxy/ism-Bridge-Proxy01.sh
 2  SNMP_verify_endpoint_info - Verify Endpoint Information
 2  SNMP Tests : Server stopped running during execution.
 2  RESTAPI-93-QueueManagerConnection - RESTAPI for QueueManagerConnection
 2  RESTAPI-90-DestinationMappingRule - RESTAPI for DestinationMappingRule
 2  RESTAPI-83-TolerateRecoveryInconsistencies - RESTAPI for TolerateRecoveryInconsistencies
 2  RESTAPI-81-ServerUID - RESTAPI for ServerUID
 2  RESTAPI-80-ServerName - RESTAPI for ServerName
 2  RESTAPI-65-LicensedUsage - RESTAPI for LicensedUsage
 2  RESTAPI-63-ClusterMembership - RESTAPI for ClusterMembership
 2  RESTAPI-61-AdminUserID - RESTAPI for AdminUserID
 2  RESTAPI-49-TrustedCertificate - RESTAPI for TrustedCertificate
 2  RESTAPI-48-ClientCertificate - RESTAPI for ClientCertificate
 2  RESTAPI-47-SecurityProfile - RESTAPI for SecurityProfile
 2  RESTAPI-46-OAuthProfile - RESTAPI for OAuthProfile
 2  RESTAPI-45-LTPAProfile - RESTAPI for LTPAProfile
 2  RESTAPI-44-LDAP - RESTAPI for LDAP
 2  RESTAPI-43-FIPS - RESTAPI for FIPS
 2  RESTAPI-42-ConfigurationPolicy - RESTAPI for ConfigurationPolicy
 2  RESTAPI-41-CertificateProfile - RESTAPI for CertificateProfile
 2  RESTAPI-40-AdminEndpoint - RESTAPI for AdminEndpoint
 2  RESTAPI-35-PluginVMArgs - RESTAPI for PluginVMArgs
 2  RESTAPI-34-PluginServer - RESTAPI for PluginServer
 2  RESTAPI-33-PluginPort - RESTAPI for PluginPort
 2  RESTAPI-32-PluginMaxHeapSize - RESTAPI for PluginMaxHeapSize
 2  RESTAPI-31-PluginDebugServer - RESTAPI for PluginDebugServer
 2  RESTAPI-30-PluginDebugPort - RESTAPI for PluginDebugPort
 2  RESTAPI-29-Plugin - RESTAPI for Plugin
 2  RESTAPI-28-SubscriptionPolicy - RESTAPI for SubscriptionPolicy
 2  RESTAPI-27-QueuePolicy - RESTAPI for QueuePolicy
 2  RESTAPI-26-TopicPolicy - RESTAPI for TopicPolicy
 2  RESTAPI-24-Queue - RESTAPI for Queue
 2  RESTAPI-23-Endpoint - RESTAPI for Endpoint
 2  RESTAPI-21-ConnectionPolicy - RESTAPI for ConnectionPolicy
 2  RESTAPI-20-MessageHub - RESTAPI for MessageHub
 2  RESTAPI-15-Syslog - RESTAPI for Syslog
 2  RESTAPI-13-TraceSelected - RESTAPI for TraceSelected
 2  RESTAPI-12-TraceOptions - RESTAPI for TraceOptions
 2  RESTAPI-11-TraceMessageData - RESTAPI for TraceMessageData
 2  RESTAPI-10-TraceMax - RESTAPI for TraceMax
 2  RESTAPI-09-TraceLevel - RESTAPI for TraceLevel
 2  RESTAPI-08-TraceConnection - RESTAPI for TraceConnection
 2  RESTAPI-07-TraceBackupDestination - RESTAPI for TraceBackupDestination
 2  RESTAPI-06-TraceBackupCount - RESTAPI for TraceBackupCount
 2  RESTAPI-05-TraceBackup - RESTAPI for TraceBackup
 2  RESTAPI-04-SecurityLog - RESTAPI for SecurityLog
 2  RESTAPI-03-LogLevel - RESTAPI for LogLevel
 2  RESTAPI-02-ConnectionLog - RESTAPI for ConnectionLog
 2  RESTAPI-01-AdminLog - RESTAPI for AdminLog
 2  RESTAPI-00-Service - RESTAPI for Service
 2  RESTAPI-00-ResetConfig - RESTAPI for Service Reset Config
 2  MQ_CON_BOUNDARIES_04 - com.ibm.ima.mqcon.boundaries MQTT messages are published to a topic which is associated with a destination mapping rule in order to check that the max messages value is being enforced
 2  Clear any retained messages before running JMS Wildcard tests [ mqtt_clearRetained.xml ]
 1  testproxy_v5connect_MPS - Test MQTTV5 that we don*t exceed Maximum Packet Size specified by client
 1  testproxy_tls09_ProxyDfltStore_CltCrtExactMatchg - Test TLS connections succeed for SGEnabled=false config when client cert store contains dflt proxy cert and client cert CN exactly matches client ID [ testproxy_tls09_ProxyDfltStore_CltCrtExactMatchg.xml ]
 1  testproxy_tls09_ProxyDfltStore_CltCrtExactMatchg - Test TLS connections succeed for SGEnabled=false config when client cert store contains dflt proxy cert and CN exact matching client cert. Also check that connections succeed when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls09_ProxyDfltStore_CltCrtExactMatchg.xml ]
 1  testproxy_tls08c_ClientCert1CrtInDERCRL - Test ability to connect to Proxy TLS port using client certificate authentication with DER format CRL and 1 reovoked cert - conn should succeed for cert that is not revoked [ testproxy_tls08c_ClientCert1CrtInDERCRL.xml ]
 1  testproxy_tls08b_ClientCert1CrtInDERCRL - Test ability to connect to Proxy TLS port using client certificate authentication with DER format CRL and 1 reovoked cert - conn should succeed for cert that is not revoked [ testproxy_tls08b_ClientCert1CrtInDERCRL.xml ]
 1  testproxy_tls08_ProxyDfltStore_CltCrtPartialMatchg - Test TLS connections succeed for SGEnabled=true config when client cert store contains dflt proxy cert and SAN partial matching client cert. Also check that connections succeed when partial match betw CN/SAN & clientId is required and failes when exact match is required. [ testproxy_tls08_ProxyDfltStore_CltCrtPartialMatchg.xml ]
 1  testproxy_tls08_ProxyDfltStore_CltCrtPartialMatchg - Test TLS connections succeed for SGEnabled=false config when client cert store contains dflt proxy cert and client cert SAN partially matches client ID [ testproxy_tls08_ProxyDfltStore_CltCrtPartialMatchg.xml ]
 1  testproxy_tls07s_OrgSrvStore_CltCrtExactMatchg - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert and client cert CN exactly matches client ID. Also check that connection succeeds when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls07s_OrgSrvStore_CltCrtExactMatchg.xml ]
 1  testproxy_tls07s_OrgSrvStore_CltCrtExactMatchg - Test TLS connections succeed for SGEnabled=false config with org server cert when client cert store contains dflt proxy cert and client cert CN exactly matches client ID [ testproxy_tls07s_OrgSrvStore_CltCrtExactMatchg.xml ]
 1  testproxy_tls07c_ClientCertEmptyDERCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty DER format CRL (cert 3 of 3) [ testproxy_tls07c_ClientCertEmptyDERCRL.xml ]
 1  testproxy_tls07b_ClientCertEmptyDERCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty DER format CRL (cert 2 of 3) [ testproxy_tls07b_ClientCertEmptyDERCRL.xml ]
 1  testproxy_tls07a_ClientCertEmptyDERCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty DER format CRL (cert 1 of 3) [ testproxy_tls07a_ClientCertEmptyDERCRL.xml ]
 1  testproxy_tls07_ProxyDfltStore_CltCrtExactMatchd - Test TLS connections succeed for SGEnabled=true config when client cert store contains dflt proxy cert and SAN exact matching client cert. Also check that connections succeed when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls07_ProxyDfltStore_CltCrtExactMatchd.xml ]
 1  testproxy_tls07_ProxyDfltStore_CltCrtExactMatchd - Test TLS connections succeed for SGEnabled=false config when client cert store contains dflt proxy cert and client cert SAN exactly matches client ID [ testproxy_tls07_ProxyDfltStore_CltCrtExactMatchd.xml ]
 1  testproxy_tls06s_OrgSrvStore_CltCrtPartialMatchg - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert and client cert SAN partially matches client ID. Also check that connection succeeds when partial match betw CN/SAN & clientId is required and fails when exact match is required. [ testproxy_tls06s_OrgSrvStore_CltCrtPartialMatchg.xml ]
 1  testproxy_tls06s_OrgSrvStore_CltCrtPartialMatchg - Test TLS connections succeed for SGEnabled=false config with org server cert when client cert store contains dflt proxy cert and client cert SAN partially matches client ID [ testproxy_tls06s_OrgSrvStore_CltCrtPartialMatchg.xml ]
 1  testproxy_tls06c_ClientCert2CrtsInCRL - Test ability to connect to Proxy TLS port using client certificate authentication with CRL and 2 reovoked certs - conn for non-revoked cert should succeed [ testproxy_tls06c_ClientCert2CrtsInCRL.xml ]
 1  testproxy_tls06_ProxyDfltStore_CltCrtPartialMatchd - Test TLS connections succeed for SGEnabled=true config when client cert store contains dflt proxy cert and CN partial matching client cert. Also test connections succeed when partial match betw CN/SAN & clientId is required and fails when exact match is required. [ testproxy_tls06_ProxyDfltStore_CltCrtPartialMatchd.xml ]
 1  testproxy_tls06_ProxyDfltStore_CltCrtPartialMatchd - Test TLS connections succeed for SGEnabled=false config when client cert store contains dflt proxy cert and client cert CN partially matches client ID [ testproxy_tls06_ProxyDfltStore_CltCrtPartialMatchd.xml ]
 1  testproxy_tls05s_OrgSrvStore_CltCrtExactMatchd - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert and client cert SAN exactly matches client ID. Also check that connection succeeds when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls05s_OrgSrvStore_CltCrtExactMatchd.xml ]
 1  testproxy_tls05s_OrgSrvStore_CltCrtExactMatchd - Test TLS connections succeed for SGEnabled=false config with org server cert when client cert store contains dflt proxy cert and client cert SAN exactly matches client ID [ testproxy_tls05s_OrgSrvStore_CltCrtExactMatchd.xml ]
 1  testproxy_tls05c_ClientCertEmptyCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty CRL (cert 3 of 3) [ testproxy_tls05c_ClientCertEmptyCRL.xml ]
 1  testproxy_tls05b_ClientCertEmptyCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty CRL (cert 2 of 3) [ testproxy_tls05b_ClientCertEmptyCRL.xml ]
 1  testproxy_tls05a_ClientCertEmptyCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty CRL (cert 1 of 3) [ testproxy_tls05a_ClientCertEmptyCRL.xml ]
 1  testproxy_tls05_ProxyDfltStore_CltCrtNoMatch - Test TLS connections succeed for SGEnabled=true config when client cert store contains dflt proxy cert and non-matching client cert. Also test connections fail when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls05_ProxyDfltStore_CltCrtNoMatch.xml ]
 1  testproxy_tls04s_OrgSrvStore_CltCrtPartialMatchd - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert and client cert CN partially matches client ID. Also check that connection succeeds when partial match betw CN/SAN & clientId is required and fails when exact match is required. [ testproxy_tls04s_OrgSrvStore_CltCrtPartialMatchd.xml ]
 1  testproxy_tls04s_OrgSrvStore_CltCrtPartialMatchd - Test TLS connections succeed for SGEnabled=false config with org server cert when client cert store contains dflt proxy cert and client cert CN partially matches client ID [ testproxy_tls04s_OrgSrvStore_CltCrtPartialMatchd.xml ]
 1  testproxy_tls04_MqttsEpStore_WithUser - Test ability to connect to Proxy TLS port with a user [ testproxy_tls04_MqttsEpStore_WithUser.xml ]
 1  testproxy_tls03s_OrgSrvStore_CltCrtNoMatch - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert and non-matching client cert. Also check that connections fail when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls03s_OrgSrvStore_CltCrtNoMatch.xml ]
 1  testproxy_tls03_MqttsEpStore - Test ability to connect to Proxy TLS port [ testproxy_tls03_MqttsEpStore.xml ]
 1  testproxy_tls03_MqttsEpStore - Test TLS connections succeed for SGEnabled=true config when client cert store contains mqtts ep cert only [ testproxy_tls03_MqttsEpStore.xml ]
 1  testproxy_tls02s_OrgSrvStore - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert only [ testproxy_tls02s_OrgSrvStore.xml ]
 1  testproxy_tls02_WrongStore - Test ability to connect to Proxy TLS port with wrong cert in store for self signed server cert - conn should fail [ testproxy_tls02_WrongStore.xml ]
 1  testproxy_tls01_NoTLS - Test that non-TLS connections succeed for SGEnabled=true configuration [ testproxy_tls01_NoTLS.xml ]
 1  testproxy_tls01_NoStore - Test ability to connect to Proxy TLS port with no store and self signed server cert - conn should fail [ testproxy_tls01_NoStore.xml ]
 1  testproxy_tenant07-iot2 - Connect device on iot2, check Registered Org rules
 1  testproxy_tenant06-quickstart2 - Connect application quickstart2, check QuickStart Rules
 1  testproxy_tenant05-quickstart2 - Connect application and device on quickstart2, only device publish and only application subscribe
 1  testproxy_tenant04-quickstart2 - Connect an application on Quickstart2 requiring no user/password, test that tenant name is properly added in topic sent on to MessageSight
 1  testproxy_tenant03-quickstart2 - Connect a device on Quickstart2 requiring no user/password, test that tenant name is properly added in topic sent on to MessageSight
 1  testproxy_tenant02-iot2 - Connect an application on IoT2 requiring user/password, test that tenant name is properly added in topic sent on to MessageSight, test that tenant not in cfg files fails
 1  testproxy_tenant01-iot2 - Connect a device on IoT2 requiring user/password, test that no user/password fails, test that org name is properly added in topic sent on to MessageSight
 1  testproxy_subscribe23 - Test publish and receive with 0 length message
 1  testproxy_subscribe22 - Test MQTT test subscribe to /a/c/+
 1  testproxy_subscribe21 - Test MQTT test subscribe, close, subscribe
 1  testproxy_subscribe20 - Test MQTT test subscribe to +
 1  testproxy_subscribe17 - Test MQTT 1)Subscribe to same specific topic twice, should only receive messages once
 1  testproxy_subscribe16 - Test MQTT/WebSocket subscribe send 1600 messages on each of two topics
 1  testproxy_subscribe15 - Test MQTT/WebSocket subscribe to long topic (<32767 characters)
 1  testproxy_subscribe14 - Test MQTT/WebSocket subscribe to long topic (<32767 characters)
 1  testproxy_subscribe13 - Test MQTT/WebSocket subscribe to *a/b/c* QoS=0 publish QoS=1 and Qos=2
 1  testproxy_subscribe11 - Test MQTT/WebSocket subscribe to *a/b/c* QoS=0
 1  testproxy_subscribe10 - Test MQTT/WebSocket subscribe to *a/b/c* and *a/b/+*, make sure a/b/c messages are not delivered twice
 1  testproxy_subscribe09 - Test MQTT/WebSocket subscribe to *a/b/c* with QoS=1 and *a/b/d* with QoS=0
 1  testproxy_subscribe08 - Test MQTT/WebSocket subscribe to *a/b/c* and *a/b/d*
 1  testproxy_subscribe07 - Test MQTT/WebSocket subscribe to *a/b/c* with QoS=2
 1  testproxy_subscribe06 - Test MQTT/WebSocket subscribe to *a/b/c* with QoS=1
 1  testproxy_subscribe05 - Test MQTT/WebSocket subscribe to 50 level topic
 1  testproxy_subscribe04 - Test MQTT/WebSocket subscribe to *a/+/c*
 1  testproxy_subscribe03 - Test MQTT/WebSocket subscribe to *a/#*
 1  testproxy_subscribe02 - Test MQTT/WebSocket subscribe to *a/b/c*
 1  testproxy_subscribe01 - Test MQTT/WebSocket subscribe to *#*
 1  testproxy_sharedMix_error03 - MQTTv5 Test creation and distruction of MQTTv5  subscriptions using cleansession clients in all different orders
 1  testproxy_sharedMix_csT_error02 - MQTTv5 Test connect, disconnect,and ClientID theft conditions for MQTTv5 shared subs using a non-durable subscriber.
 1  testproxy_sharedMix_csT_error01 - MQTTv5 Test basic Errors in or MQTTv5 shared subs using a non-durable subscriber.
 1  testproxy_sharedMix_csF_error02 - MQTTv5 Test connect, disconnect, reconnect, and ClientID theft conditions for MQTTv5 shared subs using a durable subscriber.
 1  testproxy_sharedMix_csF_error01 - MQTTv5 Test basic Errors in or MQTTv5 shared subs using a durable subscriber.
 1  testproxy_sharedMix_09 - MQTTv5 New Retained Messages behavior - shared durable should not receive RMs when create sub or on reconnect.
 1  testproxy_sharedMix_07ND - MQTTv5 Busy share test with many subscribes-unsubscribes, nondurable.
 1  testproxy_sharedMix_07D - MQTTv5 Busy share test with many subscribes-unsubscribes, nondurable.
 1  testproxy_sharedMix_06 - MQTTv5 Wildcard subscriptions for share subs.
 1  testproxy_sharedMix_05 - MQTTv5 Redelivery of in-flight msg on client disconnect.
 1  testproxy_sharedMix_04 - MQTTv5 Clients reconnecting and receiving after server restart - bigger test with multiple subs and more messages.
 1  testproxy_sharedMix_03 - MQTTv5 Clients reconnecting and receiving after server restart.
 1  testproxy_sharedMix_02 - MQTTv5 Basic test of mixed-durability sharedsubs - subscribing and messaging.
 1  testproxy_sharedMix_01 - MQTTv5 SharedMix - check different subs on different topics with same subname
 1  testproxy_retain02 - Test MQTT/WebSocket connect with Will topic, message and RETAIN
 1  testproxy_retain01 - Test MQTT/WebSocket connect with Will topicmessage and Qos=1
 1  testproxy_publishV5_06 - Test RETAIN and Message Expiry PAHO
 1  testproxy_publishV5_05 - Test Message Expiry PAHO
 1  testproxy_publishV5_04 - Test RETAIN, Durable Subs receive as NON_RETAIN
 1  testproxy_publishV5_03 - Test RETAIN, receive RETAIN and as NON_RETAIN
 1  testproxy_publishV5_02 - Test RETAIN replaced v5 publisher
 1  testproxy_publishV5_01 - Test RETAIN, simple scenario v5 publisher
 1  testproxy_publishV3_04 - Test RETAIN, Durable Subs receive as NON_RETAIN
 1  testproxy_publishV3_03 - Test RETAIN, receive RETAIN and as NON_RETAIN
 1  testproxy_publishV3_02 - Test RETAIN replaced v3 publisher
 1  testproxy_publishV3_01 - Test RETAIN, simple scenario v3 publisher
 1  testproxy_publish08 - Test RETAIN, if already subscribed/ durable, RETAIN flag should be off  +publish+/+ism-proxy_td-publishScenarios01.sh
 1  testproxy_publish07 - Test RETAIN, if already subscribed, RETAIN flag should be off  +publish+/+ism-proxy_td-publishScenarios01.sh
 1  testproxy_publish06 - Test RETAIN, second message replaces first  +publish+/+ism-proxy_td-publishScenarios01.sh
 1  testproxy_publish05 - Test RETAIN, simple scenario  +publish+/+ism-proxy_td-publishScenarios01.sh
 1  testproxy_mqttv5connect23 - More RETAINed messages tests [ testproxy_mqttv5connect23.xml ]  +mqttv5_connect+/+ism-proxy_td-mqttv5_connect-01.sh
 1  testproxy_mqttv5connect22 - Test that RETAINed messages are available after server fail/restart [ testproxy_mqttv5connect22.xml ]
 1  testproxy_mqttv5connect21 - Test that message in store are available after server fail/restart [ testproxy_mqttv5connect21.xml ]
 1  testproxy_mqttv5connect17 - Test MQTT connect with cleanSession, don*t receive stored msg
 1  testproxy_mqttv5connect16 - Test MQTT connect without cleanSession, receive stored msg
 1  testproxy_mqttv5connect15 - Test MQTT/WebSocket connect will topic longer than 60 characters
 1  testproxy_mqttv5connect14 - Test MQTT/WebSocket connect with Will topic, connect second client same clientId
 1  testproxy_mqttv5connect13 - Test MQTT/WebSocket connect with cleanSession=0
 1  testproxy_mqttv5connect12 - Test MQTT/WebSocket connect with Will topic, message (zero length)
 1  testproxy_mqttv5connect11 - Test MQTT/WebSocket connect with same clientId as already connected client
 1  testproxy_mqttv5connect10 - Test MQTT/WebSocket connect with Will topic, message and RETAIN
 1  testproxy_mqttv5connect09 - Test MQTT/WebSocket connect with Will topicmessage and Qos=2
 1  testproxy_mqttv5connect08 - Test MQTT/WebSocket connect with Will topicmessage and Qos=1
 1  testproxy_mqttv5connect07 - Test MQTT/WebSocket connect with Will topicmessage, publish close normally
 1  testproxy_mqttv5connect03 - Test MQTT/WebSocket connect valid user/password
 1  testproxy_mqttv5connect01 - Test MQTT/WebSocket connect to an IP address and port  +mqttv5_connect+/+ism-proxy_td-mqttv5_connect-01.sh
 1  testproxy_mqttv5_pubsub_03_durableSession - mqttv5 Pub Sub Receive
 1  testproxy_mqttv5_pubsub_02_nonDurable - mqttv5 Pub Sub Receive
 1  testproxy_mqttv5_clientSteal_05_durable - mqttv5 Pub Sub Receive PAHO MQTTv5
 1  testproxy_mqttv5_clientSteal_04_nonDurable - PAHO mqttv5 Pub Sub Receive with ClientId Steal
 1  testproxy_mqttv5_cleanstart_01 - mqttv5 connect cleanStart - ConnAck SessionPresent
 1  testproxy_mqttv5_14_GVT - MQTTv5 publish GVT user properties
 1  testproxy_mqttv5_14 - MQTTv5 publish user properties
 1  testproxy_mqttv5_13 - MQTTv5 publish many messages
 1  testproxy_mqttv5_12 - MQTTv5 Will delay - clientSteals and Clean Session
 1  testproxy_mqttv5_11 - MQTTv5 Will delay - create new connection before delay - no send
 1  testproxy_mqttv5_10 - MQTTv5 session expiry across server restart
 1  testproxy_mqttv5_09b - MQTTv5 Disconnect with rc=4 to publish will msg after delay
 1  testproxy_mqttv5_09 - MQTTv5 Disconnect with rc=4 to publish will msg after delay
 1  testproxy_mqttv5_08 - MQTTv5 Abnormal disconnect to send will message with will delay
 1  testproxy_mqttv5_07 - MQTTv5 Normal disconnect does not send will message with will delay
 1  testproxy_mqttv5_05 - mqttv5 session expiry with connection policy
 1  testproxy_mqttv5_04 - mqttv5 Connect, Disconnect with Expiry
 1  testproxy_mqttv5_02 - mqttv5 publish, subscribe, receive
 1  testproxy_mqttv5_01b - PAHO mqttv5 connect01b
 1  testproxy_mqttv5_01 - WS mqttv5 connect01
 1  testproxy_mqttv4_clientSteal_05_Durable - PAHO mqttv4 Pub Sub Receive with ClientId Steal
 1  testproxy_mqttv4_clientSteal_04_nonDurable - PAHO mqttv4 Pub Sub Receive with ClientId Steal
 1  testproxy_mqttV5_rc144 - Test rc144 TopicFilter
 1  testproxy_mqttV5_rc143 - Test rc143 TopicFilter
 1  testproxy_mqttV5_rc141 - Test rc139 Server Stopping
 1  testproxy_mqttV5_rc139 - Test rc139 Server Stopping
 1  testproxy_mqttV5_rc135 - Test rc135 Not Authorized
 1  testproxy_mqttV5_rc133 - Test rc133 Client Identified not valid
 1  testproxy_mqttV5_rc130 - Test rc130 Protocol Error
 1  testproxy_mqttV5_rc017 - Test rc017 No Subscription Existed
 1  testproxy_mqttV5_rc016 - Test rc016 No matching Subscribers
 1  testproxy_mqttV5_gvt06 - Test ability to connect with GVT characters E3 in user/password [ testproxy_mqttV5_gvt06.xml ]
 1  testproxy_mqttV5_gvt05 - Test ability to connect with GVT characters C4 in user/password [ testproxy_mqttV5_gvt05.xml ]
 1  testproxy_mqttV5_gvt03 - Test ability to connect with GVT characters in user/password [ testproxy_mqttV5_gvt03.xml ]
 1  testproxy_mqttV5_gvt02 - Test ability to connect over an SSL connection [ testproxy_mqttV5_gvt02.xml ]
 1  testproxy_mqttV5_gvt01 - Test ability use GVT characters in topic and ClientID [ testproxy_mqttV5_gvt01.xml ]
 1  testproxy_mqttV3_rc143 - Test rc143 TopicFilter
 1  testproxy_monitor04_MultiProxyConnDisconn - Test rapid connects/disconnects of the same client ID between two proxies
 1  testproxy_monitor03_MultiProxyStealCID - Test steals of the same client ID between two proxies  +monitor+/+ism-proxy_td-monitorScenarios01.sh
 1  testproxy_monitor02 - Connect through tenant requiring user/password, test that no user/password fails, test that tenant name is properly added in topic sent on to MessageSight, test that tenant not in cfg files fails
 1  testproxy_monitor01 - Connect through tenant requiring user/password, test that no user/password fails, test that tenant name is properly added in topic sent on to MessageSight
 1  testproxy_dynamic05 - Test that dynamic authentication can access IP of client
 1  testproxy_dynamic04 - Test that dynamic authentication can fail connect
 1  testproxy_dynamic03 - Test that dynamic authentication with simultaneous requests
 1  testproxy_dynamic02 - Test that dynamic authentication does add to normal
 1  testproxy_dynamic01 - Test that dynamic authentication doesn*t override normal
 1  testproxy_connect23 - More RETAINed messages tests [ testproxy_connect23.xml ]
 1  testproxy_connect22 - Test that RETAINed messages are available after server fail/restart [ testproxy_connect22.xml ]
 1  testproxy_connect21 - Test that message in store are available after server fail/restart [ testproxy_connect21.xml ]
 1  testproxy_connect17 - Test MQTT connect with cleanSession, don*t receive stored msg
 1  testproxy_connect16 - Test MQTT connect without cleanSession, receive stored msg
 1  testproxy_connect15 - Test MQTT/WebSocket connect will topic longer than 60 characters
 1  testproxy_connect14 - Test MQTT/WebSocket connect with Will topic, connect second client same clientId
 1  testproxy_connect13 - Test MQTT/WebSocket connect with cleanSession=0
 1  testproxy_connect12 - Test MQTT/WebSocket connect with Will topic, message (zero length)
 1  testproxy_connect11 - Test MQTT/WebSocket connect with same clientId as already connected client
 1  testproxy_connect10 - Test MQTT/WebSocket connect with Will topic, message and RETAIN
 1  testproxy_connect09 - Test MQTT/WebSocket connect with Will topicmessage and Qos=2
 1  testproxy_connect08 - Test MQTT/WebSocket connect with Will topicmessage and Qos=1
 1  testproxy_connect07 - Test MQTT/WebSocket connect with Will topicmessage, publish close normally
 1  testproxy_connect04 - Test MQTT/WebSocket connect invalid user/password
 1  testproxy_connect03 - Test MQTT/WebSocket connect valid user/password  +connect+/+ism-proxy_td-connectScenarios01.sh
 1  testproxy_connect01 - Test MQTT/WebSocket connect to an IP address and port  +connect+/+ism-proxy_td-connectScenarios01.sh
 1  testproxy_WSmqttv5_clientSteal_05_durable - mqttv5 Pub Sub Receive WebSocket MQTTv5
 1  testproxy_WSmqttv5_clientSteal_04_nonDurable - WEBSOCKET mqttv5 Pub Sub Receive with ClientId Steal
 1  testproxy_WSmqttV5_rc143 - Test rc143 TopicFilter
 1  testproxyV5_MPSwRC - Test MQTTv5 MaxPacketSz exceeded with ReasonCode
 1  testmqtt_HA05 - Test admin objects are properly rolled over [ testmqtt_HA05.xml ]
 1  testWSproxy_publishV5_06 - Test RETAIN and Message Expiry WebSockets
 1  testWSproxy_publishV5_05 - Test Message Expiry WebSockets
 1  proxymqttV5_sharedSub_SubId - Test @SharedSubscriptions (w-w/o WCs) with SubIDs
 1  proxymqttV5_publishV3_SubUpV5 - MQTTv3 SUB upgrade v3 to V5 Sub
 1  proxymqttV5_publishV3_PubUpV5 - MQTTv3 PUB upgrade v3 to V5 Pub
 1  proxy_mqttV5_unsubscribe_UP - Test MQTTv5 Unsubscribe Properties User Property
 1  proxy_mqttV5_subscribe_UP - Test MQTTv5 Subscribe Properties User Property
 1  proxy_mqttV5_subOptions_RetainHandling - Test MQTTv5 Subscribe Options - RetainHandling
 1  proxy_mqttV5_subOptions_RetainAsPub_share - Test MQTTv5 Subscribe Options RetainAsPublish on Shared Subscription
 1  proxy_mqttV5_subOptions_RetainAsPub - Test MQTTv5 Subscribe Options RetainAsPublish
 1  proxy_mqttV5_subOptions_NoLocal - Test MQTTv5 Subscribe Options - No Local
 1  proxy_mqttV5_subOptionsError_RetainHandling - Test MQTTv5 Subscribe Options - RetainHandling Errors
 1  proxy_mqttV5_subOptionsError_NoLocal - Test MQTTv5 Subscribe Options Errors with No Local
 1  proxy_mqttV5_publish_UP - Test MQTTv5 Publish Properties UserProperty
 1  proxy_mqttV5_publish_TA - Test MQTTv5 Publish Properties TopicAlias
 1  proxy_mqttV5_publish_SI - Test MQTTv5 Publish Properties SubscriptionIdentifier
 1  proxy_mqttV5_publish_RT - Test MQTTv5 Publish Properties ResponseTopic
 1  proxy_mqttV5_publish_PFI - Test MQTTv5 Publish Properties Payload Format Indicator
 1  proxy_mqttV5_publish_MEI - Test MQTTv5 Publish Properties Message Expiry Interval
 1  proxy_mqttV5_publish_CT - Test MQTTv5 Publish Properties ContentType
 1  proxy_mqttV5_publish_CD - Test MQTTv5 Publish Properties CorrelationData
 1  proxy_mqttV5_pubPropError_TA - Test MQTTv5 Publish Properties TopicAlias Errors
 1  proxy_mqttV5_pubPropError_SI - Test MQTTv5 Publish Properties SubscriptionIdentifiers Errors
 1  proxy_mqttV5_pubPropError_PFI - Test MQTTv5 Publish Properties Payload Format Indicator
 1  proxy_mqttV5_connect_SEI - Test MQTTv5 CONNECT Properties Session Expiry Interval
 1  proxy_mqttV5_connect_KeepAlive - Test MQTTv5 CONNECT Properties Keep Alive
 1  proxyACL_Undeliverable_mixedQoS - ACLs lost on Reboot, allows Undeliverable QoS:0 msgs to be Acked IoT Tracker ISSUE 1285
 1  proxyACL_Undeliverable.v5 - (MQTTv5) ACLs lost on Reboot, allows Undeliverable msgs to be Queued IoT Tracker ISSUE 1285
 1  proxyACL_Undeliverable - ACLs lost on Reboot, allows Undeliverable msgs to be Queued IoT Tracker ISSUE 1285
 1  proxyACL_Recovery - Test Recovery after Message Sight Restart  +AAAgateway+/+ism-AAAgateway01.sh
 1  proxyACL_InGroup - Test RETAIN, Durable WildCard
 1  proxyACL_ErrorPath - Error Paths of AClfile  +AAAgateway+/+ism-AAAgateway01.sh
 1  mqtt_testMixedProtocol_01 - Durable Shared Subscription, Busy test with lots of Subscribers coming going, both JMS/MQTT subscribers
 1  mqtt_AdminDynamic_M1_LDAP_cleanup - disable and clean LDAP on M1
 1  mqttV5_subOptions_RetainAsPub_share - Test MQTTv5 Subscribe Options RetainAsPublish on
 1  mqtt HAScenarios03: Server stopped running during execution.
 1  jms_HA_oauth_002 - HA OAuth 002
 1  jms_HA_oauth_001 - HA OAuth 001
 1  jca_xa_1001 - DB2 sanity check - A simple DB2 local transaction
 1  jca_ha_005 - JCA HA 005
 1  jca_ha_003 - JCA HA 003
 1  jca_ha_002 - JCA HA 002
 1  jca_ha_001 - JCA HA 001
 1  configSetAndGet - Verify proxy config tests passed
 1  cleanup_confirmDisconnect - Kill the proxy and confirm final retained message is disconnect  +monitor+/+ism-proxy_td-monitorScenarios01.sh
 1  bridge.SimpleA1EventStreams - Test Simple Pub-Fwd-Recv through Bridge  bridge_tests/plain/ism-Bridge-Plain01.sh
 1  SNMP_verify_server_info - Verify Server Information
 1  SNMP_verify_memory_info - Verify Memory Information RC=1
 1  SNMP_verify_memory_info - Verify Memory Information
 1  SNMP_verify_harole_info - Verify HARole Information
 1  SNMP_verify_General_info - Verify General Information
 1  SNMP_settest_info - Set SNMP Values
 1  SNMP_Cleanup_001 - Test 1 - Policy Cleanup for IMAServer objects
 1  RESTAPI-99-Synopsis - Synopsis of RESTAPI Execution RC=1
 1  MqttXrscadaTest15 - SDP_PROTOCOL_PACKED
 1  MQTTv5 Connect via Proxy and TestDriver: Server stopped running during execution.
 1  JCA Setup Objects - 00: 10.73.131.248 A1:Server may not be running. service/status returned RC=7
 1  JCA Setup Objects - 00: 10.73.131.204 A1:Server may not be running. service/status returned RC=7
 1  JCA HA Tests - 00: Server stopped running during execution.
 1  ISM MQTT via WSTestDriver: Server stopped running during execution.
 1  HA_teardown - Configure HA

==========================================================================================================================================
================================================== Summary of Individual Test Runs =======================================================
==========================================================================================================================================
ismClient           A1TF7cciRHD01g A2TF7cciCOD03g M1TF7fvt13g M2TF7fvt14g                           Passed: 48    Failed: 0
ismClient           A1TF7cciRHD06g A2TF7cciCOD02g M1TF7fvt11g M2TF7fvt12g                           Passed: 167   Failed: 22
  "HA_jms_td_tests" FAILED:
      FAILED: Scenario 14 - jms_HA_oauth_001 - HA OAuth 001
      FAILED: Scenario 16 - jms_HA_oauth_002 - HA OAuth 002
  "HA_mqtt_td_tests" FAILED:
      FAILED: Scenario 1 - testmqtt_HA05 - Test admin objects are properly rolled over [ testmqtt_HA05.xml ]
      FAILED: runScenarios - mqtt HAScenarios03: Server stopped running during execution.
  "HA_jca_tests" FAILED:
      FAILED: Scenario 0 - jca_retained_001 - JCA retained 001
      FAILED: Scenario 2 - jca_topic_001 - JCA topic 001
      FAILED: Scenario 3 - jca_topic_002 - JCA topic 002
      FAILED: Scenario 5 - jca_queue_001 - JCA queue 001
      FAILED: Scenario 6 - jca_shared_001 - JCA shared 001 - nondurable shared subscription without a clientid
      FAILED: Scenario 7 - jca_shared_002 - JCA shared 002 - nondurable shared subscription with a clientid
      FAILED: Scenario 8 - jca_shared_003 - JCA shared 003 - durable shared subscription without a clientid
      FAILED: Scenario 9 - jca_shared_004 - JCA shared 004 - durable shared subscription with a clientid
      FAILED: Scenario 10 - jca_jndi_topic - JCA JNDI Topic
      FAILED: Scenario 11 - jca_jndi_queue - JCA JNDI Queue
      FAILED: Scenario 13 - jca_api_001 - JCA api 001 - Test various JMS API*s in the RA environment
      FAILED: Scenario 1 - jca_ha_001 - JCA HA 001
      FAILED: Scenario 2 - jca_ha_002 - JCA HA 002
      FAILED: Scenario 3 - jca_ha_003 - JCA HA 003
      FAILED: Scenario 4 - jca_ha_005 - JCA HA 005
      FAILED: Scenario 5 - mqtt_AdminDynamic_M1_LDAP_cleanup - disable and clean LDAP on M1
      FAILED: Scenario 0 - HA_teardown - Configure HA
      FAILED: runScenarios - JCA HA Tests - 00: Server stopped running during execution.

ismClient           A1TF7cciCOD04g A2TF7cciCOD07g A3TF7cciRHD07g A4TF7cciRHD02g A5TF7cciRHD03g M1TF7fvt15g M2TF7fvt16g Passed: 171   Failed: 0
ismClient           A1TF7cciCOR06g A2TF7cciCOR07g A3TF7cciCOR14g A4TF7cciCOR15g M1TF7fvt25g M2TF7fvt26g B1TF7bridge05g B2TF7bridge06g P1TF7proxy07g P2TF7proxy06g Passed: 147   Failed: 219
  "BRIDGE_bridge_tests" FAILED:
      FAILED: Scenario 1 - bridgePx.SimpleA1A2 - Test Simple Pub-Fwd-Recv through Bridge   bridge_tests/proxy/ism-Bridge-Proxy01.sh
      FAILED: Scenario 3 - bridgePx.MultiFWD_V3Source - Test Multile Forwarders with V3 Source Bridge   bridge_tests/proxy/ism-Bridge-Proxy01.sh
      FAILED: Scenario 5 - bridgePx.MaxFWDTopics - Test Max Forwarder Topics Bridge   bridge_tests/proxy/ism-Bridge-Proxy01.sh
  "BRIDGE_bridge_tests" FAILED:
      FAILED: Scenario 1 - bridgePx.SimpleA1A2 - Test Simple Pub-Fwd-Recv through Bridge   bridge_tests/proxy/ism-Bridge-Proxy01.sh
      FAILED: Scenario 3 - bridgePx.MultiFWD_V3Source - Test Multile Forwarders with V3 Source Bridge   bridge_tests/proxy/ism-Bridge-Proxy01.sh
      FAILED: Scenario 5 - bridgePx.MaxFWDTopics - Test Max Forwarder Topics Bridge   bridge_tests/proxy/ism-Bridge-Proxy01.sh
      FAILED: Scenario 1 - bridge.SimpleA1EventStreams - Test Simple Pub-Fwd-Recv through Bridge  bridge_tests/plain/ism-Bridge-Plain01.sh
  "proxy_tests" FAILED:
      FAILED: Scenario 2 - testproxy_connect01 - Test MQTT/WebSocket connect to an IP address and port  +connect+/+ism-proxy_td-connectScenarios01.sh
      FAILED: Scenario 3 - testproxy_connect03 - Test MQTT/WebSocket connect valid user/password  +connect+/+ism-proxy_td-connectScenarios01.sh
      FAILED: Scenario 4 - testproxy_connect04 - Test MQTT/WebSocket connect invalid user/password
      FAILED: Scenario 5 - testproxy_connect07 - Test MQTT/WebSocket connect with Will topicmessage, publish close normally
      FAILED: Scenario 6 - testproxy_connect08 - Test MQTT/WebSocket connect with Will topicmessage and Qos=1
      FAILED: Scenario 7 - testproxy_connect09 - Test MQTT/WebSocket connect with Will topicmessage and Qos=2
      FAILED: Scenario 8 - testproxy_connect10 - Test MQTT/WebSocket connect with Will topic, message and RETAIN
      FAILED: Scenario 9 - testproxy_connect11 - Test MQTT/WebSocket connect with same clientId as already connected client
      FAILED: Scenario 10 - testproxy_connect12 - Test MQTT/WebSocket connect with Will topic, message (zero length)
      FAILED: Scenario 11 - testproxy_connect13 - Test MQTT/WebSocket connect with cleanSession=0
      FAILED: Scenario 12 - testproxy_connect14 - Test MQTT/WebSocket connect with Will topic, connect second client same clientId
      FAILED: Scenario 13 - testproxy_connect15 - Test MQTT/WebSocket connect will topic longer than 60 characters
      FAILED: Scenario 14 - testproxy_connect16 - Test MQTT connect without cleanSession, receive stored msg
      FAILED: Scenario 15 - testproxy_connect17 - Test MQTT connect with cleanSession, don*t receive stored msg
      FAILED: Scenario 16 - testproxy_connect21 - Test that message in store are available after server fail/restart [ testproxy_connect21.xml ]
      FAILED: Scenario 17 - testproxy_connect22 - Test that RETAINed messages are available after server fail/restart [ testproxy_connect22.xml ]
      FAILED: Scenario 18 - testproxy_connect23 - More RETAINed messages tests [ testproxy_connect23.xml ]
      FAILED: runScenarios - ISM MQTT via WSTestDriver: Server stopped running during execution.
      FAILED: Scenario 1 - testproxy_subscribe01 - Test MQTT/WebSocket subscribe to *#*
      FAILED: Scenario 2 - testproxy_subscribe02 - Test MQTT/WebSocket subscribe to *a/b/c*
      FAILED: Scenario 3 - testproxy_subscribe03 - Test MQTT/WebSocket subscribe to *a/#*
      FAILED: Scenario 4 - testproxy_subscribe04 - Test MQTT/WebSocket subscribe to *a/+/c*
      FAILED: Scenario 5 - testproxy_subscribe05 - Test MQTT/WebSocket subscribe to 50 level topic
      FAILED: Scenario 6 - testproxy_subscribe06 - Test MQTT/WebSocket subscribe to *a/b/c* with QoS=1
      FAILED: Scenario 7 - testproxy_subscribe07 - Test MQTT/WebSocket subscribe to *a/b/c* with QoS=2
      FAILED: Scenario 8 - testproxy_subscribe08 - Test MQTT/WebSocket subscribe to *a/b/c* and *a/b/d*
      FAILED: Scenario 9 - testproxy_subscribe09 - Test MQTT/WebSocket subscribe to *a/b/c* with QoS=1 and *a/b/d* with QoS=0
      FAILED: Scenario 10 - testproxy_subscribe10 - Test MQTT/WebSocket subscribe to *a/b/c* and *a/b/+*, make sure a/b/c messages are not delivered twice
      FAILED: Scenario 11 - testproxy_subscribe11 - Test MQTT/WebSocket subscribe to *a/b/c* QoS=0
      FAILED: Scenario 12 - testproxy_subscribe13 - Test MQTT/WebSocket subscribe to *a/b/c* QoS=0 publish QoS=1 and Qos=2
      FAILED: Scenario 13 - testproxy_subscribe14 - Test MQTT/WebSocket subscribe to long topic (<32767 characters)
      FAILED: Scenario 14 - testproxy_subscribe15 - Test MQTT/WebSocket subscribe to long topic (<32767 characters)
      FAILED: Scenario 15 - testproxy_subscribe16 - Test MQTT/WebSocket subscribe send 1600 messages on each of two topics
      FAILED: Scenario 16 - testproxy_subscribe17 - Test MQTT 1)Subscribe to same specific topic twice, should only receive messages once
      FAILED: Scenario 17 - testproxy_subscribe20 - Test MQTT test subscribe to +
      FAILED: Scenario 18 - testproxy_subscribe21 - Test MQTT test subscribe, close, subscribe
      FAILED: Scenario 19 - testproxy_subscribe22 - Test MQTT test subscribe to /a/c/+
      FAILED: Scenario 20 - testproxy_subscribe23 - Test publish and receive with 0 length message
      FAILED: Scenario 1 - testproxy_publish05 - Test RETAIN, simple scenario  +publish+/+ism-proxy_td-publishScenarios01.sh
      FAILED: Scenario 2 - testproxy_publish06 - Test RETAIN, second message replaces first  +publish+/+ism-proxy_td-publishScenarios01.sh
      FAILED: Scenario 3 - testproxy_publish07 - Test RETAIN, if already subscribed, RETAIN flag should be off  +publish+/+ism-proxy_td-publishScenarios01.sh
      FAILED: Scenario 4 - testproxy_publish08 - Test RETAIN, if already subscribed/ durable, RETAIN flag should be off  +publish+/+ism-proxy_td-publishScenarios01.sh
      FAILED: Scenario 1 - testproxy_monitor01 - Connect through tenant requiring user/password, test that no user/password fails, test that tenant name is properly added in topic sent on to MessageSight
      FAILED: Scenario 2 - testproxy_monitor02 - Connect through tenant requiring user/password, test that no user/password fails, test that tenant name is properly added in topic sent on to MessageSight, test that tenant not in cfg files fails
      FAILED: Scenario 3 - testproxy_monitor03_MultiProxyStealCID - Test steals of the same client ID between two proxies  +monitor+/+ism-proxy_td-monitorScenarios01.sh
      FAILED: Scenario 4 - testproxy_monitor04_MultiProxyConnDisconn - Test rapid connects/disconnects of the same client ID between two proxies
      FAILED: Scenario 5 - cleanup_confirmDisconnect - Kill the proxy and confirm final retained message is disconnect  +monitor+/+ism-proxy_td-monitorScenarios01.sh
      FAILED: Scenario 1 - testproxy_retain01 - Test MQTT/WebSocket connect with Will topicmessage and Qos=1
      FAILED: Scenario 2 - testproxy_retain02 - Test MQTT/WebSocket connect with Will topic, message and RETAIN
      FAILED: Scenario 2 - configSetAndGet - Verify proxy config tests passed
      FAILED: Scenario 2 - testproxy_tenant01-iot2 - Connect a device on IoT2 requiring user/password, test that no user/password fails, test that org name is properly added in topic sent on to MessageSight
      FAILED: Scenario 3 - testproxy_tenant02-iot2 - Connect an application on IoT2 requiring user/password, test that tenant name is properly added in topic sent on to MessageSight, test that tenant not in cfg files fails
      FAILED: Scenario 4 - testproxy_tenant03-quickstart2 - Connect a device on Quickstart2 requiring no user/password, test that tenant name is properly added in topic sent on to MessageSight
      FAILED: Scenario 5 - testproxy_tenant04-quickstart2 - Connect an application on Quickstart2 requiring no user/password, test that tenant name is properly added in topic sent on to MessageSight
      FAILED: Scenario 6 - testproxy_tenant05-quickstart2 - Connect application and device on quickstart2, only device publish and only application subscribe
      FAILED: Scenario 7 - testproxy_tenant06-quickstart2 - Connect application quickstart2, check QuickStart Rules
      FAILED: Scenario 8 - testproxy_tenant07-iot2 - Connect device on iot2, check Registered Org rules
      FAILED: Scenario 1 - testproxy_dynamic01 - Test that dynamic authentication doesn*t override normal
      FAILED: Scenario 2 - testproxy_dynamic02 - Test that dynamic authentication does add to normal
      FAILED: Scenario 3 - testproxy_dynamic03 - Test that dynamic authentication with simultaneous requests
      FAILED: Scenario 4 - testproxy_dynamic04 - Test that dynamic authentication can fail connect
      FAILED: Scenario 5 - testproxy_dynamic05 - Test that dynamic authentication can access IP of client
      FAILED: Scenario 1 - MqttXrscadaTest15 - SDP_PROTOCOL_PACKED
      FAILED: Scenario 3 - proxyACL_InGroup - Test RETAIN, Durable WildCard
      FAILED: Scenario 4 - proxyACL_Recovery - Test Recovery after Message Sight Restart  +AAAgateway+/+ism-AAAgateway01.sh
      FAILED: Scenario 5 - proxyACL_ErrorPath - Error Paths of AClfile  +AAAgateway+/+ism-AAAgateway01.sh
      FAILED: Scenario 6 - proxyACL_Undeliverable - ACLs lost on Reboot, allows Undeliverable msgs to be Queued IoT Tracker ISSUE 1285
      FAILED: Scenario 7 - proxyACL_Undeliverable_mixedQoS - ACLs lost on Reboot, allows Undeliverable QoS:0 msgs to be Acked IoT Tracker ISSUE 1285
      FAILED: Scenario 8 - proxyACL_Undeliverable.v5 - (MQTTv5) ACLs lost on Reboot, allows Undeliverable msgs to be Queued IoT Tracker ISSUE 1285
      FAILED: Scenario 1 - testproxy_tls01_NoStore - Test ability to connect to Proxy TLS port with no store and self signed server cert - conn should fail [ testproxy_tls01_NoStore.xml ]
      FAILED: Scenario 2 - testproxy_tls02_WrongStore - Test ability to connect to Proxy TLS port with wrong cert in store for self signed server cert - conn should fail [ testproxy_tls02_WrongStore.xml ]
      FAILED: Scenario 3 - testproxy_tls03_MqttsEpStore - Test ability to connect to Proxy TLS port [ testproxy_tls03_MqttsEpStore.xml ]
      FAILED: Scenario 4 - testproxy_tls04_MqttsEpStore_WithUser - Test ability to connect to Proxy TLS port with a user [ testproxy_tls04_MqttsEpStore_WithUser.xml ]
      FAILED: Scenario 1 - testproxy_tls01_NoTLS - Test that non-TLS connections succeed for SGEnabled=true configuration [ testproxy_tls01_NoTLS.xml ]
      FAILED: Scenario 3 - testproxy_tls03_MqttsEpStore - Test TLS connections succeed for SGEnabled=true config when client cert store contains mqtts ep cert only [ testproxy_tls03_MqttsEpStore.xml ]
      FAILED: Scenario 5 - testproxy_tls05_ProxyDfltStore_CltCrtNoMatch - Test TLS connections succeed for SGEnabled=true config when client cert store contains dflt proxy cert and non-matching client cert. Also test connections fail when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls05_ProxyDfltStore_CltCrtNoMatch.xml ]
      FAILED: Scenario 6 - testproxy_tls06_ProxyDfltStore_CltCrtPartialMatchd - Test TLS connections succeed for SGEnabled=true config when client cert store contains dflt proxy cert and CN partial matching client cert. Also test connections succeed when partial match betw CN/SAN & clientId is required and fails when exact match is required. [ testproxy_tls06_ProxyDfltStore_CltCrtPartialMatchd.xml ]
      FAILED: Scenario 7 - testproxy_tls07_ProxyDfltStore_CltCrtExactMatchd - Test TLS connections succeed for SGEnabled=true config when client cert store contains dflt proxy cert and SAN exact matching client cert. Also check that connections succeed when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls07_ProxyDfltStore_CltCrtExactMatchd.xml ]
      FAILED: Scenario 8 - testproxy_tls08_ProxyDfltStore_CltCrtPartialMatchg - Test TLS connections succeed for SGEnabled=true config when client cert store contains dflt proxy cert and SAN partial matching client cert. Also check that connections succeed when partial match betw CN/SAN & clientId is required and failes when exact match is required. [ testproxy_tls08_ProxyDfltStore_CltCrtPartialMatchg.xml ]
      FAILED: Scenario 9 - testproxy_tls09_ProxyDfltStore_CltCrtExactMatchg - Test TLS connections succeed for SGEnabled=false config when client cert store contains dflt proxy cert and CN exact matching client cert. Also check that connections succeed when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls09_ProxyDfltStore_CltCrtExactMatchg.xml ]
      FAILED: Scenario 2 - testproxy_tls02s_OrgSrvStore - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert only [ testproxy_tls02s_OrgSrvStore.xml ]
      FAILED: Scenario 3 - testproxy_tls03s_OrgSrvStore_CltCrtNoMatch - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert and non-matching client cert. Also check that connections fail when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls03s_OrgSrvStore_CltCrtNoMatch.xml ]
      FAILED: Scenario 4 - testproxy_tls04s_OrgSrvStore_CltCrtPartialMatchd - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert and client cert CN partially matches client ID. Also check that connection succeeds when partial match betw CN/SAN & clientId is required and fails when exact match is required. [ testproxy_tls04s_OrgSrvStore_CltCrtPartialMatchd.xml ]
      FAILED: Scenario 5 - testproxy_tls05s_OrgSrvStore_CltCrtExactMatchd - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert and client cert SAN exactly matches client ID. Also check that connection succeeds when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls05s_OrgSrvStore_CltCrtExactMatchd.xml ]
      FAILED: Scenario 6 - testproxy_tls06s_OrgSrvStore_CltCrtPartialMatchg - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert and client cert SAN partially matches client ID. Also check that connection succeeds when partial match betw CN/SAN & clientId is required and fails when exact match is required. [ testproxy_tls06s_OrgSrvStore_CltCrtPartialMatchg.xml ]
      FAILED: Scenario 7 - testproxy_tls07s_OrgSrvStore_CltCrtExactMatchg - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert and client cert CN exactly matches client ID. Also check that connection succeeds when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls07s_OrgSrvStore_CltCrtExactMatchg.xml ]
      FAILED: Scenario 6 - testproxy_tls06_ProxyDfltStore_CltCrtPartialMatchd - Test TLS connections succeed for SGEnabled=false config when client cert store contains dflt proxy cert and client cert CN partially matches client ID [ testproxy_tls06_ProxyDfltStore_CltCrtPartialMatchd.xml ]
      FAILED: Scenario 7 - testproxy_tls07_ProxyDfltStore_CltCrtExactMatchd - Test TLS connections succeed for SGEnabled=false config when client cert store contains dflt proxy cert and client cert SAN exactly matches client ID [ testproxy_tls07_ProxyDfltStore_CltCrtExactMatchd.xml ]
      FAILED: Scenario 8 - testproxy_tls08_ProxyDfltStore_CltCrtPartialMatchg - Test TLS connections succeed for SGEnabled=false config when client cert store contains dflt proxy cert and client cert SAN partially matches client ID [ testproxy_tls08_ProxyDfltStore_CltCrtPartialMatchg.xml ]
      FAILED: Scenario 9 - testproxy_tls09_ProxyDfltStore_CltCrtExactMatchg - Test TLS connections succeed for SGEnabled=false config when client cert store contains dflt proxy cert and client cert CN exactly matches client ID [ testproxy_tls09_ProxyDfltStore_CltCrtExactMatchg.xml ]
      FAILED: Scenario 4 - testproxy_tls04s_OrgSrvStore_CltCrtPartialMatchd - Test TLS connections succeed for SGEnabled=false config with org server cert when client cert store contains dflt proxy cert and client cert CN partially matches client ID [ testproxy_tls04s_OrgSrvStore_CltCrtPartialMatchd.xml ]
      FAILED: Scenario 5 - testproxy_tls05s_OrgSrvStore_CltCrtExactMatchd - Test TLS connections succeed for SGEnabled=false config with org server cert when client cert store contains dflt proxy cert and client cert SAN exactly matches client ID [ testproxy_tls05s_OrgSrvStore_CltCrtExactMatchd.xml ]
      FAILED: Scenario 6 - testproxy_tls06s_OrgSrvStore_CltCrtPartialMatchg - Test TLS connections succeed for SGEnabled=false config with org server cert when client cert store contains dflt proxy cert and client cert SAN partially matches client ID [ testproxy_tls06s_OrgSrvStore_CltCrtPartialMatchg.xml ]
      FAILED: Scenario 7 - testproxy_tls07s_OrgSrvStore_CltCrtExactMatchg - Test TLS connections succeed for SGEnabled=false config with org server cert when client cert store contains dflt proxy cert and client cert CN exactly matches client ID [ testproxy_tls07s_OrgSrvStore_CltCrtExactMatchg.xml ]
      FAILED: Scenario 5 - testproxy_tls05b_ClientCertEmptyCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty CRL (cert 2 of 3) [ testproxy_tls05b_ClientCertEmptyCRL.xml ]
      FAILED: Scenario 6 - testproxy_tls05c_ClientCertEmptyCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty CRL (cert 3 of 3) [ testproxy_tls05c_ClientCertEmptyCRL.xml ]
      FAILED: Scenario 7 - testproxy_tls05a_ClientCertEmptyCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty CRL (cert 1 of 3) [ testproxy_tls05a_ClientCertEmptyCRL.xml ]
      FAILED: Scenario 10 - testproxy_tls06c_ClientCert2CrtsInCRL - Test ability to connect to Proxy TLS port using client certificate authentication with CRL and 2 reovoked certs - conn for non-revoked cert should succeed [ testproxy_tls06c_ClientCert2CrtsInCRL.xml ]
      FAILED: Scenario 11 - testproxy_tls07a_ClientCertEmptyDERCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty DER format CRL (cert 1 of 3) [ testproxy_tls07a_ClientCertEmptyDERCRL.xml ]
      FAILED: Scenario 12 - testproxy_tls07b_ClientCertEmptyDERCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty DER format CRL (cert 2 of 3) [ testproxy_tls07b_ClientCertEmptyDERCRL.xml ]
      FAILED: Scenario 13 - testproxy_tls07c_ClientCertEmptyDERCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty DER format CRL (cert 3 of 3) [ testproxy_tls07c_ClientCertEmptyDERCRL.xml ]
      FAILED: Scenario 15 - testproxy_tls08b_ClientCert1CrtInDERCRL - Test ability to connect to Proxy TLS port using client certificate authentication with DER format CRL and 1 reovoked cert - conn should succeed for cert that is not revoked [ testproxy_tls08b_ClientCert1CrtInDERCRL.xml ]
      FAILED: Scenario 16 - testproxy_tls08c_ClientCert1CrtInDERCRL - Test ability to connect to Proxy TLS port using client certificate authentication with DER format CRL and 1 reovoked cert - conn should succeed for cert that is not revoked [ testproxy_tls08c_ClientCert1CrtInDERCRL.xml ]
      FAILED: Scenario 2 - testproxy_mqttv5_01 - WS mqttv5 connect01
      FAILED: Scenario 3 - testproxy_mqttv5_01b - PAHO mqttv5 connect01b
      FAILED: Scenario 4 - testproxy_mqttv5_02 - mqttv5 publish, subscribe, receive
      FAILED: Scenario 5 - testproxy_mqttv5_04 - mqttv5 Connect, Disconnect with Expiry
      FAILED: Scenario 6 - testproxy_mqttv5_05 - mqttv5 session expiry with connection policy
      FAILED: Scenario 7 - testproxy_mqttv5_07 - MQTTv5 Normal disconnect does not send will message with will delay
      FAILED: Scenario 8 - testproxy_mqttv5_08 - MQTTv5 Abnormal disconnect to send will message with will delay
      FAILED: Scenario 9 - testproxy_mqttv5_09 - MQTTv5 Disconnect with rc=4 to publish will msg after delay
      FAILED: Scenario 10 - testproxy_mqttv5_09b - MQTTv5 Disconnect with rc=4 to publish will msg after delay
      FAILED: Scenario 11 - testproxy_mqttv5_10 - MQTTv5 session expiry across server restart
      FAILED: Scenario 12 - testproxy_mqttv5_11 - MQTTv5 Will delay - create new connection before delay - no send
      FAILED: Scenario 13 - testproxy_mqttv5_12 - MQTTv5 Will delay - clientSteals and Clean Session
      FAILED: Scenario 14 - testproxy_mqttv5_13 - MQTTv5 publish many messages
      FAILED: Scenario 15 - testproxy_mqttv5_14 - MQTTv5 publish user properties
      FAILED: Scenario 16 - testproxy_mqttv5_14_GVT - MQTTv5 publish GVT user properties
      FAILED: Scenario 17 - testproxy_mqttV5_gvt01 - Test ability use GVT characters in topic and ClientID [ testproxy_mqttV5_gvt01.xml ]
      FAILED: Scenario 18 - testproxy_mqttV5_gvt02 - Test ability to connect over an SSL connection [ testproxy_mqttV5_gvt02.xml ]
      FAILED: Scenario 20 - testproxy_mqttV5_gvt03 - Test ability to connect with GVT characters in user/password [ testproxy_mqttV5_gvt03.xml ]
      FAILED: Scenario 21 - testproxy_mqttV5_gvt05 - Test ability to connect with GVT characters C4 in user/password [ testproxy_mqttV5_gvt05.xml ]
      FAILED: Scenario 22 - testproxy_mqttV5_gvt06 - Test ability to connect with GVT characters E3 in user/password [ testproxy_mqttV5_gvt06.xml ]
      FAILED: Scenario 1 - testproxy_mqttv5_cleanstart_01 - mqttv5 connect cleanStart - ConnAck SessionPresent
      FAILED: Scenario 2 - testproxy_mqttv5_pubsub_02_nonDurable - mqttv5 Pub Sub Receive 
      FAILED: Scenario 3 - testproxy_mqttv5_pubsub_03_durableSession - mqttv5 Pub Sub Receive 
      FAILED: Scenario 4 - testproxy_mqttv4_clientSteal_04_nonDurable - PAHO mqttv4 Pub Sub Receive with ClientId Steal
      FAILED: Scenario 5 - testproxy_mqttv4_clientSteal_05_Durable - PAHO mqttv4 Pub Sub Receive with ClientId Steal
      FAILED: Scenario 6 - testproxy_WSmqttv5_clientSteal_04_nonDurable - WEBSOCKET mqttv5 Pub Sub Receive with ClientId Steal 
      FAILED: Scenario 7 - testproxy_mqttv5_clientSteal_04_nonDurable - PAHO mqttv5 Pub Sub Receive with ClientId Steal 
      FAILED: Scenario 8 - testproxy_mqttv5_clientSteal_05_durable - mqttv5 Pub Sub Receive PAHO MQTTv5
      FAILED: Scenario 9 - testproxy_WSmqttv5_clientSteal_05_durable - mqttv5 Pub Sub Receive WebSocket MQTTv5
      FAILED: Scenario 2 - testproxy_mqttv5connect01 - Test MQTT/WebSocket connect to an IP address and port  +mqttv5_connect+/+ism-proxy_td-mqttv5_connect-01.sh
      FAILED: Scenario 3 - testproxy_mqttv5connect03 - Test MQTT/WebSocket connect valid user/password
      FAILED: Scenario 5 - testproxy_v5connect_MPS - Test MQTTV5 that we don*t exceed Maximum Packet Size specified by client
      FAILED: Scenario 6 - testproxy_mqttv5connect07 - Test MQTT/WebSocket connect with Will topicmessage, publish close normally
      FAILED: Scenario 7 - testproxy_mqttv5connect08 - Test MQTT/WebSocket connect with Will topicmessage and Qos=1
      FAILED: Scenario 8 - testproxy_mqttv5connect09 - Test MQTT/WebSocket connect with Will topicmessage and Qos=2
      FAILED: Scenario 9 - testproxy_mqttv5connect10 - Test MQTT/WebSocket connect with Will topic, message and RETAIN
      FAILED: Scenario 10 - testproxy_mqttv5connect11 - Test MQTT/WebSocket connect with same clientId as already connected client
      FAILED: Scenario 11 - testproxy_mqttv5connect12 - Test MQTT/WebSocket connect with Will topic, message (zero length)
      FAILED: Scenario 12 - testproxy_mqttv5connect13 - Test MQTT/WebSocket connect with cleanSession=0
      FAILED: Scenario 13 - testproxy_mqttv5connect14 - Test MQTT/WebSocket connect with Will topic, connect second client same clientId
      FAILED: Scenario 14 - testproxy_mqttv5connect15 - Test MQTT/WebSocket connect will topic longer than 60 characters
      FAILED: Scenario 15 - testproxy_mqttv5connect16 - Test MQTT connect without cleanSession, receive stored msg
      FAILED: Scenario 16 - testproxy_mqttv5connect17 - Test MQTT connect with cleanSession, don*t receive stored msg
      FAILED: Scenario 17 - testproxy_mqttv5connect21 - Test that message in store are available after server fail/restart [ testproxy_mqttv5connect21.xml ]
      FAILED: Scenario 18 - testproxy_mqttv5connect22 - Test that RETAINed messages are available after server fail/restart [ testproxy_mqttv5connect22.xml ]
      FAILED: Scenario 19 - testproxy_mqttv5connect23 - More RETAINed messages tests [ testproxy_mqttv5connect23.xml ]  +mqttv5_connect+/+ism-proxy_td-mqttv5_connect-01.sh
      FAILED: runScenarios - MQTTv5 Connect via Proxy and TestDriver: Server stopped running during execution.
      FAILED: Scenario 2 - proxy_mqttV5_connect_KeepAlive - Test MQTTv5 CONNECT Properties Keep Alive
      FAILED: Scenario 3 - proxy_mqttV5_connect_SEI - Test MQTTv5 CONNECT Properties Session Expiry Interval
      FAILED: Scenario 4 - proxy_mqttV5_publish_PFI - Test MQTTv5 Publish Properties Payload Format Indicator
      FAILED: Scenario 5 - proxy_mqttV5_publish_MEI - Test MQTTv5 Publish Properties Message Expiry Interval
      FAILED: Scenario 6 - proxy_mqttV5_publish_TA - Test MQTTv5 Publish Properties TopicAlias
      FAILED: Scenario 7 - proxy_mqttV5_publish_RT - Test MQTTv5 Publish Properties ResponseTopic
      FAILED: Scenario 8 - proxy_mqttV5_publish_CD - Test MQTTv5 Publish Properties CorrelationData
      FAILED: Scenario 9 - proxy_mqttV5_publish_UP - Test MQTTv5 Publish Properties UserProperty
      FAILED: Scenario 10 - proxy_mqttV5_publish_SI - Test MQTTv5 Publish Properties SubscriptionIdentifier
      FAILED: Scenario 11 - proxy_mqttV5_publish_CT - Test MQTTv5 Publish Properties ContentType
      FAILED: Scenario 12 - proxy_mqttV5_pubPropError_PFI - Test MQTTv5 Publish Properties Payload Format Indicator
      FAILED: Scenario 13 - proxy_mqttV5_pubPropError_TA - Test MQTTv5 Publish Properties TopicAlias Errors
      FAILED: Scenario 14 - proxy_mqttV5_pubPropError_SI - Test MQTTv5 Publish Properties SubscriptionIdentifiers Errors
      FAILED: Scenario 15 - proxy_mqttV5_subscribe_UP - Test MQTTv5 Subscribe Properties User Property
      FAILED: Scenario 16 - proxy_mqttV5_unsubscribe_UP - Test MQTTv5 Unsubscribe Properties User Property
      FAILED: Scenario 17 - proxy_mqttV5_subOptions_NoLocal - Test MQTTv5 Subscribe Options - No Local
      FAILED: Scenario 18 - proxy_mqttV5_subOptionsError_NoLocal - Test MQTTv5 Subscribe Options Errors with No Local
      FAILED: Scenario 19 - proxy_mqttV5_subOptions_RetainAsPub - Test MQTTv5 Subscribe Options RetainAsPublish
      FAILED: Scenario 20 - proxy_mqttV5_subOptions_RetainAsPub_share - Test MQTTv5 Subscribe Options RetainAsPublish on Shared Subscription
      FAILED: Scenario 21 - proxy_mqttV5_subOptions_RetainHandling - Test MQTTv5 Subscribe Options - RetainHandling
      FAILED: Scenario 22 - proxy_mqttV5_subOptionsError_RetainHandling - Test MQTTv5 Subscribe Options - RetainHandling Errors
      FAILED: Scenario 1 - testproxy_publishV3_01 - Test RETAIN, simple scenario v3 publisher
      FAILED: Scenario 2 - testproxy_publishV5_01 - Test RETAIN, simple scenario v5 publisher
      FAILED: Scenario 3 - testproxy_publishV3_02 - Test RETAIN replaced v3 publisher
      FAILED: Scenario 4 - testproxy_publishV5_02 - Test RETAIN replaced v5 publisher
      FAILED: Scenario 5 - testproxy_publishV3_03 - Test RETAIN, receive RETAIN and as NON_RETAIN
      FAILED: Scenario 6 - testproxy_publishV5_03 - Test RETAIN, receive RETAIN and as NON_RETAIN
      FAILED: Scenario 7 - testproxy_publishV3_04 - Test RETAIN, Durable Subs receive as NON_RETAIN
      FAILED: Scenario 8 - testproxy_publishV5_04 - Test RETAIN, Durable Subs receive as NON_RETAIN
      FAILED: Scenario 9 - testproxy_publishV5_05 - Test Message Expiry PAHO
      FAILED: Scenario 10 - testWSproxy_publishV5_05 - Test Message Expiry WebSockets
      FAILED: Scenario 11 - testproxy_publishV5_06 - Test RETAIN and Message Expiry PAHO
      FAILED: Scenario 12 - testWSproxy_publishV5_06 - Test RETAIN and Message Expiry WebSockets
      FAILED: Scenario 2 - testproxyV5_MPSwRC - Test MQTTv5 MaxPacketSz exceeded with ReasonCode
      FAILED: Scenario 3 - testproxy_mqttV5_rc016 - Test rc016 No matching Subscribers
      FAILED: Scenario 4 - testproxy_mqttV5_rc017 - Test rc017 No Subscription Existed
      FAILED: Scenario 5 - testproxy_mqttV5_rc130 - Test rc130 Protocol Error
      FAILED: Scenario 6 - testproxy_mqttV5_rc133 - Test rc133 Client Identified not valid
      FAILED: Scenario 7 - testproxy_mqttV5_rc135 - Test rc135 Not Authorized
      FAILED: Scenario 9 - testproxy_mqttV5_rc139 - Test rc139 Server Stopping
      FAILED: Scenario 10 - testproxy_mqttV5_rc141 - Test rc139 Server Stopping
      FAILED: Scenario 11 - testproxy_mqttV5_rc143 - Test rc143 TopicFilter
      FAILED: Scenario 12 - testproxy_mqttV3_rc143 - Test rc143 TopicFilter
      FAILED: Scenario 13 - testproxy_WSmqttV5_rc143 - Test rc143 TopicFilter
      FAILED: Scenario 14 - testproxy_mqttV5_rc144 - Test rc144 TopicFilter
      FAILED: Scenario 2 - proxymqttV5_sharedSub_SubId - Test @SharedSubscriptions (w-w/o WCs) with SubIDs
      FAILED: Scenario 3 - proxymqttV5_publishV3_PubUpV5 - MQTTv3 PUB upgrade v3 to V5 Pub
      FAILED: Scenario 4 - proxymqttV5_publishV3_SubUpV5 - MQTTv3 SUB upgrade v3 to V5 Sub
      FAILED: Scenario 1 - testproxy_sharedMix_csF_error01 - MQTTv5 Test basic Errors in or MQTTv5 shared subs using a durable subscriber. 
      FAILED: Scenario 2 - testproxy_sharedMix_csF_error02 - MQTTv5 Test connect, disconnect, reconnect, and ClientID theft conditions for MQTTv5 shared subs using a durable subscriber. 
      FAILED: Scenario 3 - testproxy_sharedMix_csT_error01 - MQTTv5 Test basic Errors in or MQTTv5 shared subs using a non-durable subscriber. 
      FAILED: Scenario 4 - testproxy_sharedMix_csT_error02 - MQTTv5 Test connect, disconnect,and ClientID theft conditions for MQTTv5 shared subs using a non-durable subscriber. 
      FAILED: Scenario 5 - testproxy_sharedMix_error03 - MQTTv5 Test creation and distruction of MQTTv5  subscriptions using cleansession clients in all different orders 
      FAILED: Scenario 6 - testproxy_sharedMix_01 - MQTTv5 SharedMix - check different subs on different topics with same subname 
      FAILED: Scenario 7 - testproxy_sharedMix_02 - MQTTv5 Basic test of mixed-durability sharedsubs - subscribing and messaging. 
      FAILED: Scenario 8 - testproxy_sharedMix_03 - MQTTv5 Clients reconnecting and receiving after server restart. 
      FAILED: Scenario 9 - testproxy_sharedMix_04 - MQTTv5 Clients reconnecting and receiving after server restart - bigger test with multiple subs and more messages. 
      FAILED: Scenario 10 - testproxy_sharedMix_05 - MQTTv5 Redelivery of in-flight msg on client disconnect. 
      FAILED: Scenario 11 - testproxy_sharedMix_06 - MQTTv5 Wildcard subscriptions for share subs. 
      FAILED: Scenario 12 - testproxy_sharedMix_07ND - MQTTv5 Busy share test with many subscribes-unsubscribes, nondurable. 
      FAILED: Scenario 13 - testproxy_sharedMix_07D - MQTTv5 Busy share test with many subscribes-unsubscribes, nondurable. 
      FAILED: Scenario 14 - testproxy_sharedMix_09 - MQTTv5 New Retained Messages behavior - shared durable should not receive RMs when create sub or on reconnect.

ismClient           A1TF7cciCOD06g M1TF7fvt09g M2TF7fvt10g P1TF7proxy05g                            Passed: 1286  Failed: 245
  "IBMjava80_jms_td_tests" FAILED:
      FAILED: Scenario 1 - jms_oauth_001 - Test 1 - OAuth Test 1
      FAILED: Scenario 2 - jms_oauth_002 - Test 2 - OAuth Test 2
      FAILED: Scenario 3 - jms_oauth_003 - Test 3 - OAuth Test 3
      FAILED: Scenario 6 - jms_oauth_006 - Test 6 - OAuth Test 6
      FAILED: Scenario 7 - jms_oauth_notls - Test notls - OAuth Test with no TLS
      FAILED: Scenario 9 - jms_oauth_001_groupinfokey - Test 1 - OAuth Test 1 with GroupInfoKey
      FAILED: Scenario 10 - jms_oauth_002_groupinfokey - Test 2 - OAuth Test 2 with GroupInfoKey
      FAILED: Scenario 11 - jms_oauth_003_groupinfokey - Test 3 - OAuth Test 3 with GroupInfoKey
      FAILED: Scenario 12 - jms_oauth_007_groupinfokey - Test 4 - OAuth Test 7 with GroupInfoKey group list
      FAILED: Scenario 15 - jms_oauth_002_sameURL - Test 2 - OAuth Test 2 with GroupInfoKey sameURL
      FAILED: Scenario 17 - jms_oauth_009_groupinfokey - Test 9 - OAuth Test 9 with GroupInfoKey and 
      FAILED: Scenario 18 - jms_oauth_010_truststore - Test 10 - OAuth Test 10 with TrustStore set
  "IBMjava80_mqtt_td_tests" FAILED:
      FAILED: Scenario 1 - testmqtt_gvt01 - Test ability use GVT characters in topic and ClientID [ testmqtt_gvt01.xml ]
      FAILED: Scenario 2 - testmqtt_gvt03 - Test ability to connect with GVT characters in user/password [ testmqtt_gvt03.xml ]
      FAILED: Scenario 4 - testmqtt_gvt06 - Test ability to connect with GVT characters E3 in user/password [ testmqtt_gvt06.xml ]
      FAILED: Scenario 5 - testmqtt_gvt02 - Test ability to connect over an SSL connection [ testmqtt_gvt02.xml ]
      FAILED: Scenario 10 - testmqtt_stat02 - Test that stat MQTTClient shows correct clients
      FAILED: Scenario 21 - mqtt_testMixedProtocol_01 - Durable Shared Subscription, Busy test with lots of Subscribers coming going, both JMS/MQTT subscribers 
      FAILED: Scenario 2 - ssl/testmqtt_ssl05 - Test MQTT/WebSocket CommonName usage
      FAILED: Scenario 3 - ssl/testmqtt_ssl06 - Test MQTT/WebSocket CommonName usage
      FAILED: Scenario 4 - ssl/testmqtt_ssl07 - Test MQTT/WebSocket CommonName usage
      FAILED: Scenario 5 - ssl/testmqtt_ssl08 - Test MQTT/WebSocket CommonName usage in ClientID on ConnectionPolicy with asterisk character
      FAILED: Scenario 6 - ssl/testmqtt_ssl09a - Test MQTT/WebSocket CommonName usage in ClientID on ConnectionPolicy with asterisk character
      FAILED: Scenario 7 - ssl/testmqtt_ssl09b - Test MQTT/WebSocket CommonName usage in ClientID on ConnectionPolicy with asterisk character
      FAILED: Scenario 0 - deleteAllRetained0 - Delete any RETAINed messages, error if any exist
      FAILED: Scenario 20 - mqttV5_subOptions_RetainAsPub_share - Test MQTTv5 Subscribe Options RetainAsPublish on 
  "IBMjava80_jms_mqtt_td_tests" FAILED:
      FAILED: Scenario 0 - jms_mqtt_001 JMS to MQTT - Test 1 with Unicode Topic Name and RETAINED. [ jms_mqtt_001.xml ]
      FAILED: Scenario 12 - Clear any retained messages before running JMS Wildcard tests [ mqtt_clearRetained.xml ]
  "mqtt_xrscada" FAILED:
      FAILED: Scenario 17 - mqtt_clearRetained.xml - Clear all retained messages
      FAILED: Scenario 17 - mqtt_clearRetained.xml - Clear all retained messages
      FAILED: Scenario 17 - mqtt_clearRetained.xml - Clear all retained messages with MQTTv5
  "plugin_tests" FAILED:
      FAILED: Scenario 0 - testplugin_subscribe01 - Test MQTT/WebSocket subscribe to *#*
      FAILED: Scenario 12 - testplugin_subscribe14 - Test MQTT/WebSocket subscribe to long topic (<32767 characters)
  "ws_mqtt_js_tests" FAILED:
      FAILED: Scenario 0 - jsclient_connect_1_b - Connect with a single char clientId (IPv6)
      FAILED: Scenario 1 - jsclient_connect_2_b - Connect using a clientId with a space and other chars
      FAILED: Scenario 2 - jsclient_connect_3_b - Connect with a single space as the clientId (IPv6)
      FAILED: Scenario 3 - jsclient_connect_4_b - Connect with multiple clients (synchronized)
      FAILED: Scenario 4 - jsclient_connect_5_b - Connect with a non-unique clientId (synchronized) (IPv6)
      FAILED: Scenario 5 - jsclient_connect_6_b - Connect to a server with a connection policy that only allows the MQTT protocol 
      FAILED: Scenario 7 - jsclient_connect_e10_b - Connect to a server with a connection policy that does not allow the MQTT protocol 
      FAILED: Scenario 8 - jsclient_connect_e11_b - Connect to a server with an Endpoint that does not allow the MQTT protocol 
      FAILED: Scenario 9 - jsclient_connect_e12_b - Create an Endpoint that does not have a ConnectionPolicy -  CLI
      FAILED: Scenario 1 - jsclient_sec_2_b - Connect to ISM server with SSL disabled, using a valid, non-empty username and password (IPv6)
      FAILED: Scenario 2 - jsclient_sec_3_b - Connect to ISM server with an MQTT-only ConnectionPolicy
      FAILED: Scenario 3 - jsclient_sec_4_b - Connect to ISM server with an MQTT-only Endpoint (IPv6)
      FAILED: Scenario 4 - jsclient_sec_5_b - Connect to ISM server with a ConnectionPolicy that authorizes only one user
      FAILED: Scenario 5 - jsclient_sec_6_b - Connect to ISM server using an authorized user (wildcards in ID on ConnectionPolicy) (IPv6)
      FAILED: Scenario 6 - jsclient_sec_e1_b - UserName is not specified (IPv6)
      FAILED: Scenario 7 - jsclient_sec_e2_b - User does not exist (was invalid UTF-8 test)
      FAILED: Scenario 8 - jsclient_sec_e3_b - User does not exist (IPv6)
      FAILED: Scenario 9 - jsclient_sec_e5_b - Incorrect password
      FAILED: Scenario 10 - jsclient_sec_e9_b - User is not authorized (IPv6)
      FAILED: Scenario 11 - jsclient_sec_e10_b - Insecure connection to a secure Endpoint
      FAILED: Scenario 12 - jsclient_sec_e12_b - Protocol is JMS on the ConnectionPolicy
      FAILED: Scenario 13 - jsclient_sec_e13_b - Protocol is JMS on the Endpoint (IPv6)
      FAILED: Scenario 14 - jsclient_sec_e14_b - Empty userName and password
      FAILED: Scenario 16 - jsclient_sec_e16_b - Empty userName and non-empty password
      FAILED: Scenario 2 - jsclient_pubsub_1_b - Basic publish/subscribe for the JavaScript Client
      FAILED: Scenario 3 - jsclient_pubsub_2_b - QoS=1 on publish (IPv6)
      FAILED: Scenario 4 - jsclient_pubsub_3_b - QoS=2 on publish
      FAILED: Scenario 5 - jsclient_pubsub_4_b - Multiple topics, QoS=0 on publish (IPv6)
      FAILED: Scenario 6 - jsclient_pubsub_5_b - Test for case-sensitivity in topic name
      FAILED: Scenario 7 - jsclient_pubsub_8_b - Specify a subscribe complete callback (IPv6)
      FAILED: Scenario 8 - jsclient_pubsub_10_b - Specify various callbacks for onsubscribe (IPv6)
      FAILED: Scenario 9 - jsclient_pubsub_11_b - Wildcard subscriptions
      FAILED: Scenario 10 - jsclient_pubsub_12_b - Mixed QoS on publish, QoS=0 on subscribe (IPv6)
      FAILED: Scenario 11 - jsclient_pubsub_13_b - Mixed QoS on publish, QoS=1 on subscribe
      FAILED: Scenario 12 - jsclient_pubsub_14_b - Mixed QoS on publish, QoS=2 on subscribe (IPv6)
      FAILED: Scenario 13 - jsclient_pubsub_15_b - Mixed QoS topics in one client
      FAILED: Scenario 14 - jsclient_pubsub_16_b - Mixed QoS client with wildcard subscriptions (IPv6)
      FAILED: Scenario 15 - jsclient_pubsub_17_b - Test retained
      FAILED: Scenario 16 - jsclient_pubsub_18_b - Retained message is not the last message
      FAILED: Scenario 17 - jsclient_pubsub_19_b - No unsubscribe before disconnect
      FAILED: Scenario 18 - jsclient_pubsub_22_b - Unsubscribe from the same topic twice
      FAILED: Scenario 19 - jsclient_pubsub_24_b - Test where publisher and subscriber are on different clients (synchronized)
      FAILED: Scenario 20 - jsclient_pubsub_25_b - Connect to an Connection/Messaging Policy that authorizes clients for the MQTT and JMS protocols (IPv6)
      FAILED: Scenario 21 - jsclient_pubsub_26_b - Connect to an Connection/Messaging Policy that authorizes MQTT clients only
      FAILED: Scenario 22 - jsclient_pubsub_27_b - Connect to an Connection/MessagingPolicy that authorizes a specific user/topic (IPv6)
      FAILED: Scenario 23 - jsclient_pubsub_e1_b - Test for invalid topic names on pub
      FAILED: Scenario 24 - jsclient_pubsub_e2_b - Test for invalid QoS values on pub
      FAILED: Scenario 25 - jsclient_pubsub_e3_b - Test for invalid retain value on pub
      FAILED: Scenario 26 - jsclient_pubsub_e4_b - Test for invalid wildcard placements on sub
      FAILED: Scenario 27 - jsclient_pubsub_e6_b - Test for invalid QoS values on sub
      FAILED: Scenario 28 - jsclient_pubsub_e7_b - Specify a non-function for subscribeCompleteCallback
      FAILED: Scenario 29 - jsclient_pubsub_e8_b - Specify a non-function for the onmessage callback for a client
      FAILED: Scenario 30 - jsclient_pubsub_e13_b - Test for unsubscribe with non-function callback
      FAILED: Scenario 31 - jsclient_pubsub_e14_b - Unsubscribe from a topic with invalid wc placement
      FAILED: Scenario 32 - jsclient_pubsub_e15_b - Attempt to publish/subscribe on an unauthorized protocol
      FAILED: Scenario 33 - jsclient_pubsub_e16_b - Attempt to publish/subscribe on an unauthorized topic
      FAILED: Scenario 1 - jsclient_gvt_1_b - GVT: ClientID test
      FAILED: Scenario 2 - jsclient_gvt_2_b - GVT: Topic name test
      FAILED: Scenario 3 - jsclient_gvt_3_b - GVT: userName and password test
      FAILED: Scenario 4 - jsclient_gvt_4_b - GVT: Will Topic and Message test
  "cli_tests" FAILED:
      FAILED: Scenario 0 - cli_GVT_MQTT_AUTO_ID_2 - policy test ID_2
      FAILED: Scenario 4 - cli_GVT_MQTT_AUTO_ID_4 - policy test ID_4
      FAILED: Scenario 16 - cli_GVT_MQTT_AUTO_ID_11 - policy test ID_11
      FAILED: Scenario 18 - cli_GVT_MQTT_AUTO_ID_12 - policy test ID_12
      FAILED: Scenario 20 - cli_GVT_MQTT_AUTO_ID_13 - policy test ID_13
      FAILED: Scenario 22 - cli_GVT_MQTT_AUTO_ID_14 - policy test ID_14
      FAILED: Scenario 24 - cli_GVT_MQTT_AUTO_ID_15 - policy test ID_15
      FAILED: Scenario 26 - cli_GVT_MQTT_AUTO_ID_16 - policy test ID_16
      FAILED: Scenario 28 - cli_GVT_MQTT_AUTO_ID_17 - policy test ID_17
      FAILED: Scenario 30 - cli_GVT_MQTT_AUTO_ID_18 - policy test ID_18
      FAILED: Scenario 34 - cli_GVT_MQTT_AUTO_ID_20 - policy test ID_20
      FAILED: Scenario 42 - cli_GVT_MQTT_AUTO_ID_24 - policy test ID_24
      FAILED: Scenario 44 - cli_GVT_MQTT_AUTO_ID_25 - policy test ID_25
      FAILED: Scenario 46 - cli_GVT_MQTT_AUTO_ID_26 - policy test ID_26
      FAILED: Scenario 52 - cli_GVT_MQTT_AUTO_ID_29 - policy test ID_29
      FAILED: Scenario 54 - cli_GVT_MQTT_AUTO_ID_31 - policy test ID_31
      FAILED: Scenario 60 - cli_GVT_MQTT_AUTO_ID_36 - policy test ID_36
      FAILED: Scenario 62 - cli_GVT_MQTT_AUTO_ID_37 - policy test ID_37
      FAILED: Scenario 64 - cli_GVT_MQTT_AUTO_ID_38 - policy test ID_38
      FAILED: Scenario 66 - cli_GVT_MQTT_AUTO_ID_40 - policy test ID_40
      FAILED: Scenario 72 - cli_GVT_MQTT_AUTO_ID_43 - policy test ID_43
      FAILED: Scenario 76 - cli_GVT_MQTT_AUTO_ID_45 - policy test ID_45
      FAILED: Scenario 2 - cli_security_test_001 - send test data to topic
      FAILED: Scenario 4 - cli_security_test_002 - send test data to topic
      FAILED: Scenario 6 - cli_security_test_003 - send test data to topic
      FAILED: Scenario 10 - cli_security_test_006 - send test data to topic - client auth
      FAILED: Scenario 14 - cli_security_test_008 - send should work
      FAILED: Scenario 19 - cli_security_test_012 - should work after ep gets new security profile
      FAILED: Scenario 7 - cli_stat_topics_test_007 - send test data to topic
      FAILED: Scenario 8 - cli_stat_topics_test_008 - validate stat command.
      FAILED: Scenario 19 - cli_stat_topics_test_016 - validate stat command.
  "MQConnectivity_tests" FAILED:
      FAILED: Scenario 3 - MQ_CON_BOUNDARIES_04 - com.ibm.ima.mqcon.boundaries MQTT messages are published to a topic which is associated with a destination mapping rule in order to check that the max messages value is being enforced
  "snmp_tests" FAILED:
      FAILED: Scenario 5 - SNMP_verify_endpoint_info - Verify Endpoint Information
      FAILED: Scenario 6 - SNMP_verify_memory_info - Verify Memory Information
      FAILED: Scenario 7 - SNMP_verify_server_info - Verify Server Information
      FAILED: Scenario 8 - SNMP_verify_harole_info - Verify HARole Information
      FAILED: Scenario 9 - SNMP_verify_General_info - Verify General Information
      FAILED: Scenario 10 - SNMP_settest_info - Set SNMP Values
      FAILED: Scenario 11 - SNMP_Cleanup_001 - Test 1 - Policy Cleanup for IMAServer objects
      FAILED: runScenarios - SNMP Tests : Server stopped running during execution.
      FAILED: runScenarios - SNMP Tests : ism-SNMP-tests_Core - A core file was found on A1 after running ism-SNMP-tests.
  "jca_tests" FAILED:
      FAILED: runScenarios - JCA Setup Objects - 00: 10.73.131.204 A1:Server may not be running. service/status returned RC=7
      FAILED: Scenario 0 - jca_retained_001 - JCA retained 001
      FAILED: Scenario 2 - jca_topic_001 - JCA topic 001
      FAILED: Scenario 3 - jca_topic_002 - JCA topic 002
      FAILED: Scenario 5 - jca_queue_001 - JCA queue 001
      FAILED: Scenario 6 - jca_shared_001 - JCA shared 001 - nondurable shared subscription without a clientid
      FAILED: Scenario 7 - jca_shared_002 - JCA shared 002 - nondurable shared subscription with a clientid
      FAILED: Scenario 8 - jca_shared_003 - JCA shared 003 - durable shared subscription without a clientid
      FAILED: Scenario 9 - jca_shared_004 - JCA shared 004 - durable shared subscription with a clientid
      FAILED: Scenario 10 - jca_jndi_topic - JCA JNDI Topic
      FAILED: Scenario 11 - jca_jndi_queue - JCA JNDI Queue
      FAILED: Scenario 13 - jca_api_001 - JCA api 001 - Test various JMS API*s in the RA environment
      FAILED: Scenario 0 - jca_ssltopic_001 - JCA SSL Topic 001
      FAILED: Scenario 1 - jca_sslqueue_001 - JCA SSL Queue 001
      FAILED: Scenario 2 - jca_ssltopic_002 - JCA SSL Topic 002
      FAILED: Scenario 3 - jca_sslqueue_002 - JCA SSL Queue 002 - User authentication on outbound
      FAILED: Scenario 0 - jca_xa_1001 - DB2 sanity check - A simple DB2 local transaction
      FAILED: Scenario 1 - jca_enablerb_001 - enable rollback = true BMT
      FAILED: Scenario 2 - jca_enablerb_002 - enable rollback = true CMTNS
      FAILED: Scenario 3 - jca_enablerb_003 - enable rollback = false BMT
      FAILED: Scenario 4 - jca_enablerb_004 - enable rollback = false CMTNS
      FAILED: Scenario 5 - jca_pause_001 - MDB Pause - this test should not cause the MDB to pause
      FAILED: Scenario 6 - jca_pause_002 - MDB Pause - this test should cause the MDB to pause
      FAILED: Scenario 8 - jca_pause_003 - ignoreFailuresOnStart activation spec property test
      FAILED: Scenario 10 - jca_translevel_001 - transactionLevelSupport = Local with CMTNS MDB and CMTR EJB
      FAILED: Scenario 11 - jca_translevel_002 - transationLevelSupport = Local with BMT MDB and EJB
      FAILED: Scenario 12 - jca_translevel_003 - transationLevelSupport = NoTransaction with CMTR MDB and Supports EJB
      FAILED: Scenario 13 - jca_translevel_004 - transationLevelSupport = NoTransaction with BMTUT MDB
      FAILED: Scenario 0 - jca_bmtut_topic - Stateless Session Bean with Bean Managed Transactions on a topic
      FAILED: Scenario 1 - jca_bmtut_queue - Stateless Session Bean with Bean Managed Transactions on a queue
      FAILED: Scenario 2 - jca_bmtut_rb_nonpersistent - Bean Managed Transactions and rollback with non-persistent messages
      FAILED: Scenario 3 - jca_bmtut_rb_persistent - Bean Managed Transactions and rollback with persistent messages
      FAILED: Scenario 4 - jca_bmtut_rb_queue - Bean Managed Transactions and rollback with a queue
      FAILED: Scenario 0 - jca_cmtr_topic - Stateless Session Bean with Container Managed Transactions - MDB Required
      FAILED: Scenario 1 - jca_cmtr_nodb2_topic - Stateless Session Bean with Container Managed Transactions - MDB Required - no DB2
      FAILED: Scenario 2 - jca_cmtns_topic - Stateless Session Bean with Container Managed Transactions - MDB NotSupported
      FAILED: Scenario 3 - jca_cmtns_nodb2_topic - Stateless Session Bean with Container Managed Transactions - MDB NotSupported - no DB2
      FAILED: Scenario 4 - jca_cmtr_queue - Stateless Session Bean with Container Managed Transactions - MDB Required - Queue
      FAILED: Scenario 5 - jca_cmtns_queue - Stateless Session Bean with Container Managed Transactions - MDB NotSupported - Queue
      FAILED: Scenario 6 - jca_cmt_rb_nonpersistent - Container Managed Transactions with rollback - nonpersistent
      FAILED: Scenario 7 - jca_cmt_rb_persistent - Container Managed Transactions with rollback - persistent
      FAILED: Scenario 8 - jca_cmt_rb_queue - Container Managed Transactions with rollback - queue
      FAILED: Scenario 9 - jca_dest_full - CMTR MDB and max messages
      FAILED: Scenario 0 - jca_xaerror_none_statelessBMTUT - A check to make sure Evil RA works
      FAILED: Scenario 1 - jca_xaerror_prepare_statelessBMTUT - EvilRA throws Error in prepare() in XA
      FAILED: Scenario 2 - jca_xaerror_commit_statelessBMTUT - EvilRA throws Error in commit() in XA
      FAILED: Scenario 3 - jca_xaerror_start_statelessBMTUT - EvilRA throws Error in start() in XA
      FAILED: Scenario 4 - jca_xaerror_end_statelessBMTUT - EvilRA throws Error in end() in XA
      FAILED: Scenario 5 - jca_xaerror_none_statelessCMT - A check to make sure Evil RA works
      FAILED: Scenario 6 - jca_xaerror_prepare_statelessCMT - EvilRA throws Error in prepare() in XA
      FAILED: Scenario 7 - jca_xaerror_commit_statelessCMT - EvilRA throws Error in commit() in XA
      FAILED: Scenario 8 - jca_xaerror_start_statelessCMT - EvilRA throws Error in start() in XA
      FAILED: Scenario 9 - jca_xaerror_end_statelessCMT - EvilRA throws Error in end() in XA
      FAILED: Scenario 0 - jca_reconnect_001 - JCA Reconnect 001
      FAILED: Scenario 1 - jca_reconnect_002 - Durable Shared subscription CMTR MDB, max messages and an imaserver restart
      FAILED: Scenario 0 - heur_commit_cmt - JCA Heuristic XA CMT Commit
      FAILED: Scenario 1 - heur_commit_bmt - JCA Heuristic XA BMT Commit
      FAILED: Scenario 2 - heur_rollback_cmt - JCA Heuristic XA CMT Rollback
      FAILED: Scenario 3 - heur_rollback_bmt - JCA Heuristic XA BMT Rollback
      FAILED: Scenario 4 - heur_prepCommit_cmt - JCA Heuristic XA CMT crash on prepare then commit
      FAILED: Scenario 5 - heur_prepRB_cmt - JCA Heuristic XA CMT crash on prepare then rollback
      FAILED: Scenario 6 - heur_prepCommit_bmt - JCA Heuristic XA BMT crash on prepare then commit
      FAILED: Scenario 7 - heur_prepRB_bmt - JCA Heuristic XA BMT crash on prepare then rollback
  "restapi" FAILED:
      FAILED: Scenario 0 - RESTAPI-00-ResetConfig - RESTAPI for Service Reset Config
      FAILED: Scenario 1 - RESTAPI-01-AdminLog - RESTAPI for AdminLog
      FAILED: Scenario 2 - RESTAPI-02-ConnectionLog - RESTAPI for ConnectionLog
      FAILED: Scenario 3 - RESTAPI-03-LogLevel - RESTAPI for LogLevel
      FAILED: Scenario 4 - RESTAPI-04-SecurityLog - RESTAPI for SecurityLog
      FAILED: Scenario 5 - RESTAPI-05-TraceBackup - RESTAPI for TraceBackup
      FAILED: Scenario 6 - RESTAPI-06-TraceBackupCount - RESTAPI for TraceBackupCount
      FAILED: Scenario 7 - RESTAPI-07-TraceBackupDestination - RESTAPI for TraceBackupDestination
      FAILED: Scenario 8 - RESTAPI-08-TraceConnection - RESTAPI for TraceConnection
      FAILED: Scenario 9 - RESTAPI-09-TraceLevel - RESTAPI for TraceLevel
      FAILED: Scenario 10 - RESTAPI-10-TraceMax - RESTAPI for TraceMax
      FAILED: Scenario 11 - RESTAPI-11-TraceMessageData - RESTAPI for TraceMessageData
      FAILED: Scenario 12 - RESTAPI-12-TraceOptions - RESTAPI for TraceOptions
      FAILED: Scenario 13 - RESTAPI-13-TraceSelected - RESTAPI for TraceSelected
      FAILED: Scenario 15 - RESTAPI-15-Syslog - RESTAPI for Syslog
      FAILED: Scenario 16 - RESTAPI-20-MessageHub - RESTAPI for MessageHub
      FAILED: Scenario 17 - RESTAPI-21-ConnectionPolicy - RESTAPI for ConnectionPolicy
      FAILED: Scenario 18 - RESTAPI-23-Endpoint - RESTAPI for Endpoint
      FAILED: Scenario 19 - RESTAPI-24-Queue - RESTAPI for Queue
      FAILED: Scenario 20 - RESTAPI-26-TopicPolicy - RESTAPI for TopicPolicy
      FAILED: Scenario 21 - RESTAPI-27-QueuePolicy - RESTAPI for QueuePolicy
      FAILED: Scenario 22 - RESTAPI-28-SubscriptionPolicy - RESTAPI for SubscriptionPolicy
      FAILED: Scenario 23 - RESTAPI-29-Plugin - RESTAPI for Plugin
      FAILED: Scenario 24 - RESTAPI-30-PluginDebugPort - RESTAPI for PluginDebugPort
      FAILED: Scenario 25 - RESTAPI-31-PluginDebugServer - RESTAPI for PluginDebugServer
      FAILED: Scenario 26 - RESTAPI-32-PluginMaxHeapSize - RESTAPI for PluginMaxHeapSize
      FAILED: Scenario 27 - RESTAPI-33-PluginPort - RESTAPI for PluginPort
      FAILED: Scenario 28 - RESTAPI-34-PluginServer - RESTAPI for PluginServer
      FAILED: Scenario 29 - RESTAPI-35-PluginVMArgs - RESTAPI for PluginVMArgs
      FAILED: Scenario 30 - RESTAPI-40-AdminEndpoint - RESTAPI for AdminEndpoint
      FAILED: Scenario 31 - RESTAPI-41-CertificateProfile - RESTAPI for CertificateProfile
      FAILED: Scenario 32 - RESTAPI-42-ConfigurationPolicy - RESTAPI for ConfigurationPolicy
      FAILED: Scenario 33 - RESTAPI-43-FIPS - RESTAPI for FIPS
      FAILED: Scenario 34 - RESTAPI-44-LDAP - RESTAPI for LDAP
      FAILED: Scenario 35 - RESTAPI-45-LTPAProfile - RESTAPI for LTPAProfile
      FAILED: Scenario 36 - RESTAPI-46-OAuthProfile - RESTAPI for OAuthProfile
      FAILED: Scenario 37 - RESTAPI-47-SecurityProfile - RESTAPI for SecurityProfile
      FAILED: Scenario 38 - RESTAPI-48-ClientCertificate - RESTAPI for ClientCertificate
      FAILED: Scenario 39 - RESTAPI-49-TrustedCertificate - RESTAPI for TrustedCertificate
      FAILED: Scenario 42 - RESTAPI-61-AdminUserID - RESTAPI for AdminUserID
      FAILED: Scenario 44 - RESTAPI-63-ClusterMembership - RESTAPI for ClusterMembership
      FAILED: Scenario 46 - RESTAPI-65-LicensedUsage - RESTAPI for LicensedUsage
      FAILED: Scenario 50 - RESTAPI-80-ServerName - RESTAPI for ServerName
      FAILED: Scenario 51 - RESTAPI-81-ServerUID - RESTAPI for ServerUID
      FAILED: Scenario 53 - RESTAPI-83-TolerateRecoveryInconsistencies - RESTAPI for TolerateRecoveryInconsistencies
      FAILED: Scenario 54 - RESTAPI-90-DestinationMappingRule - RESTAPI for DestinationMappingRule
      FAILED: Scenario 57 - RESTAPI-93-QueueManagerConnection - RESTAPI for QueueManagerConnection
      FAILED: Scenario 0 - RESTAPI-00-Service - RESTAPI for Service

ismClient           A1TF7cciCOD01g M1TF7fvt01g M2TF7fvt02g                                          Passed: 1287  Failed: 241
  "IBMjava80_jms_td_tests" FAILED:
      FAILED: Scenario 1 - jms_oauth_001 - Test 1 - OAuth Test 1
      FAILED: Scenario 2 - jms_oauth_002 - Test 2 - OAuth Test 2
      FAILED: Scenario 3 - jms_oauth_003 - Test 3 - OAuth Test 3
      FAILED: Scenario 6 - jms_oauth_006 - Test 6 - OAuth Test 6
      FAILED: Scenario 7 - jms_oauth_notls - Test notls - OAuth Test with no TLS
      FAILED: Scenario 9 - jms_oauth_001_groupinfokey - Test 1 - OAuth Test 1 with GroupInfoKey
      FAILED: Scenario 10 - jms_oauth_002_groupinfokey - Test 2 - OAuth Test 2 with GroupInfoKey
      FAILED: Scenario 11 - jms_oauth_003_groupinfokey - Test 3 - OAuth Test 3 with GroupInfoKey
      FAILED: Scenario 12 - jms_oauth_007_groupinfokey - Test 4 - OAuth Test 7 with GroupInfoKey group list
      FAILED: Scenario 15 - jms_oauth_002_sameURL - Test 2 - OAuth Test 2 with GroupInfoKey sameURL
      FAILED: Scenario 17 - jms_oauth_009_groupinfokey - Test 9 - OAuth Test 9 with GroupInfoKey and 
      FAILED: Scenario 18 - jms_oauth_010_truststore - Test 10 - OAuth Test 10 with TrustStore set
  "IBMjava80_mqtt_td_tests" FAILED:
      FAILED: Scenario 1 - testmqtt_gvt01 - Test ability use GVT characters in topic and ClientID [ testmqtt_gvt01.xml ]
      FAILED: Scenario 2 - testmqtt_gvt03 - Test ability to connect with GVT characters in user/password [ testmqtt_gvt03.xml ]
      FAILED: Scenario 4 - testmqtt_gvt06 - Test ability to connect with GVT characters E3 in user/password [ testmqtt_gvt06.xml ]
      FAILED: Scenario 5 - testmqtt_gvt02 - Test ability to connect over an SSL connection [ testmqtt_gvt02.xml ]
      FAILED: Scenario 10 - testmqtt_stat02 - Test that stat MQTTClient shows correct clients
      FAILED: Scenario 2 - ssl/testmqtt_ssl05 - Test MQTT/WebSocket CommonName usage
      FAILED: Scenario 3 - ssl/testmqtt_ssl06 - Test MQTT/WebSocket CommonName usage
      FAILED: Scenario 4 - ssl/testmqtt_ssl07 - Test MQTT/WebSocket CommonName usage
      FAILED: Scenario 5 - ssl/testmqtt_ssl08 - Test MQTT/WebSocket CommonName usage in ClientID on ConnectionPolicy with asterisk character
      FAILED: Scenario 6 - ssl/testmqtt_ssl09a - Test MQTT/WebSocket CommonName usage in ClientID on ConnectionPolicy with asterisk character
      FAILED: Scenario 7 - ssl/testmqtt_ssl09b - Test MQTT/WebSocket CommonName usage in ClientID on ConnectionPolicy with asterisk character
      FAILED: Scenario 0 - deleteAllRetained0 - Delete any RETAINed messages, error if any exist
  "IBMjava80_jms_mqtt_td_tests" FAILED:
      FAILED: Scenario 0 - jms_mqtt_001 JMS to MQTT - Test 1 with Unicode Topic Name and RETAINED. [ jms_mqtt_001.xml ]
      FAILED: Scenario 12 - Clear any retained messages before running JMS Wildcard tests [ mqtt_clearRetained.xml ]
  "mqtt_xrscada" FAILED:
      FAILED: Scenario 17 - mqtt_clearRetained.xml - Clear all retained messages
      FAILED: Scenario 17 - mqtt_clearRetained.xml - Clear all retained messages
      FAILED: Scenario 17 - mqtt_clearRetained.xml - Clear all retained messages with MQTTv5
  "plugin_tests" FAILED:
      FAILED: Scenario 0 - testplugin_subscribe01 - Test MQTT/WebSocket subscribe to *#*
      FAILED: Scenario 12 - testplugin_subscribe14 - Test MQTT/WebSocket subscribe to long topic (<32767 characters)
  "ws_mqtt_js_tests" FAILED:
      FAILED: Scenario 0 - jsclient_connect_1_b - Connect with a single char clientId (IPv6)
      FAILED: Scenario 1 - jsclient_connect_2_b - Connect using a clientId with a space and other chars
      FAILED: Scenario 2 - jsclient_connect_3_b - Connect with a single space as the clientId (IPv6)
      FAILED: Scenario 3 - jsclient_connect_4_b - Connect with multiple clients (synchronized)
      FAILED: Scenario 4 - jsclient_connect_5_b - Connect with a non-unique clientId (synchronized) (IPv6)
      FAILED: Scenario 5 - jsclient_connect_6_b - Connect to a server with a connection policy that only allows the MQTT protocol 
      FAILED: Scenario 7 - jsclient_connect_e10_b - Connect to a server with a connection policy that does not allow the MQTT protocol 
      FAILED: Scenario 8 - jsclient_connect_e11_b - Connect to a server with an Endpoint that does not allow the MQTT protocol 
      FAILED: Scenario 9 - jsclient_connect_e12_b - Create an Endpoint that does not have a ConnectionPolicy -  CLI
      FAILED: Scenario 1 - jsclient_sec_2_b - Connect to ISM server with SSL disabled, using a valid, non-empty username and password (IPv6)
      FAILED: Scenario 2 - jsclient_sec_3_b - Connect to ISM server with an MQTT-only ConnectionPolicy
      FAILED: Scenario 3 - jsclient_sec_4_b - Connect to ISM server with an MQTT-only Endpoint (IPv6)
      FAILED: Scenario 4 - jsclient_sec_5_b - Connect to ISM server with a ConnectionPolicy that authorizes only one user
      FAILED: Scenario 5 - jsclient_sec_6_b - Connect to ISM server using an authorized user (wildcards in ID on ConnectionPolicy) (IPv6)
      FAILED: Scenario 6 - jsclient_sec_e1_b - UserName is not specified (IPv6)
      FAILED: Scenario 7 - jsclient_sec_e2_b - User does not exist (was invalid UTF-8 test)
      FAILED: Scenario 8 - jsclient_sec_e3_b - User does not exist (IPv6)
      FAILED: Scenario 9 - jsclient_sec_e5_b - Incorrect password
      FAILED: Scenario 10 - jsclient_sec_e9_b - User is not authorized (IPv6)
      FAILED: Scenario 11 - jsclient_sec_e10_b - Insecure connection to a secure Endpoint
      FAILED: Scenario 12 - jsclient_sec_e12_b - Protocol is JMS on the ConnectionPolicy
      FAILED: Scenario 13 - jsclient_sec_e13_b - Protocol is JMS on the Endpoint (IPv6)
      FAILED: Scenario 14 - jsclient_sec_e14_b - Empty userName and password
      FAILED: Scenario 16 - jsclient_sec_e16_b - Empty userName and non-empty password
      FAILED: Scenario 2 - jsclient_pubsub_1_b - Basic publish/subscribe for the JavaScript Client
      FAILED: Scenario 3 - jsclient_pubsub_2_b - QoS=1 on publish (IPv6)
      FAILED: Scenario 4 - jsclient_pubsub_3_b - QoS=2 on publish
      FAILED: Scenario 5 - jsclient_pubsub_4_b - Multiple topics, QoS=0 on publish (IPv6)
      FAILED: Scenario 6 - jsclient_pubsub_5_b - Test for case-sensitivity in topic name
      FAILED: Scenario 7 - jsclient_pubsub_8_b - Specify a subscribe complete callback (IPv6)
      FAILED: Scenario 8 - jsclient_pubsub_10_b - Specify various callbacks for onsubscribe (IPv6)
      FAILED: Scenario 9 - jsclient_pubsub_11_b - Wildcard subscriptions
      FAILED: Scenario 10 - jsclient_pubsub_12_b - Mixed QoS on publish, QoS=0 on subscribe (IPv6)
      FAILED: Scenario 11 - jsclient_pubsub_13_b - Mixed QoS on publish, QoS=1 on subscribe
      FAILED: Scenario 12 - jsclient_pubsub_14_b - Mixed QoS on publish, QoS=2 on subscribe (IPv6)
      FAILED: Scenario 13 - jsclient_pubsub_15_b - Mixed QoS topics in one client
      FAILED: Scenario 14 - jsclient_pubsub_16_b - Mixed QoS client with wildcard subscriptions (IPv6)
      FAILED: Scenario 15 - jsclient_pubsub_17_b - Test retained
      FAILED: Scenario 16 - jsclient_pubsub_18_b - Retained message is not the last message
      FAILED: Scenario 17 - jsclient_pubsub_19_b - No unsubscribe before disconnect
      FAILED: Scenario 18 - jsclient_pubsub_22_b - Unsubscribe from the same topic twice
      FAILED: Scenario 19 - jsclient_pubsub_24_b - Test where publisher and subscriber are on different clients (synchronized)
      FAILED: Scenario 20 - jsclient_pubsub_25_b - Connect to an Connection/Messaging Policy that authorizes clients for the MQTT and JMS protocols (IPv6)
      FAILED: Scenario 21 - jsclient_pubsub_26_b - Connect to an Connection/Messaging Policy that authorizes MQTT clients only
      FAILED: Scenario 22 - jsclient_pubsub_27_b - Connect to an Connection/MessagingPolicy that authorizes a specific user/topic (IPv6)
      FAILED: Scenario 23 - jsclient_pubsub_e1_b - Test for invalid topic names on pub
      FAILED: Scenario 24 - jsclient_pubsub_e2_b - Test for invalid QoS values on pub
      FAILED: Scenario 25 - jsclient_pubsub_e3_b - Test for invalid retain value on pub
      FAILED: Scenario 26 - jsclient_pubsub_e4_b - Test for invalid wildcard placements on sub
      FAILED: Scenario 27 - jsclient_pubsub_e6_b - Test for invalid QoS values on sub
      FAILED: Scenario 28 - jsclient_pubsub_e7_b - Specify a non-function for subscribeCompleteCallback
      FAILED: Scenario 29 - jsclient_pubsub_e8_b - Specify a non-function for the onmessage callback for a client
      FAILED: Scenario 30 - jsclient_pubsub_e13_b - Test for unsubscribe with non-function callback
      FAILED: Scenario 31 - jsclient_pubsub_e14_b - Unsubscribe from a topic with invalid wc placement
      FAILED: Scenario 32 - jsclient_pubsub_e15_b - Attempt to publish/subscribe on an unauthorized protocol
      FAILED: Scenario 33 - jsclient_pubsub_e16_b - Attempt to publish/subscribe on an unauthorized topic
      FAILED: Scenario 1 - jsclient_gvt_1_b - GVT: ClientID test
      FAILED: Scenario 2 - jsclient_gvt_2_b - GVT: Topic name test
      FAILED: Scenario 3 - jsclient_gvt_3_b - GVT: userName and password test
      FAILED: Scenario 4 - jsclient_gvt_4_b - GVT: Will Topic and Message test
  "cli_tests" FAILED:
      FAILED: Scenario 0 - cli_GVT_MQTT_AUTO_ID_2 - policy test ID_2
      FAILED: Scenario 4 - cli_GVT_MQTT_AUTO_ID_4 - policy test ID_4
      FAILED: Scenario 16 - cli_GVT_MQTT_AUTO_ID_11 - policy test ID_11
      FAILED: Scenario 18 - cli_GVT_MQTT_AUTO_ID_12 - policy test ID_12
      FAILED: Scenario 20 - cli_GVT_MQTT_AUTO_ID_13 - policy test ID_13
      FAILED: Scenario 22 - cli_GVT_MQTT_AUTO_ID_14 - policy test ID_14
      FAILED: Scenario 24 - cli_GVT_MQTT_AUTO_ID_15 - policy test ID_15
      FAILED: Scenario 26 - cli_GVT_MQTT_AUTO_ID_16 - policy test ID_16
      FAILED: Scenario 28 - cli_GVT_MQTT_AUTO_ID_17 - policy test ID_17
      FAILED: Scenario 30 - cli_GVT_MQTT_AUTO_ID_18 - policy test ID_18
      FAILED: Scenario 34 - cli_GVT_MQTT_AUTO_ID_20 - policy test ID_20
      FAILED: Scenario 42 - cli_GVT_MQTT_AUTO_ID_24 - policy test ID_24
      FAILED: Scenario 44 - cli_GVT_MQTT_AUTO_ID_25 - policy test ID_25
      FAILED: Scenario 46 - cli_GVT_MQTT_AUTO_ID_26 - policy test ID_26
      FAILED: Scenario 52 - cli_GVT_MQTT_AUTO_ID_29 - policy test ID_29
      FAILED: Scenario 54 - cli_GVT_MQTT_AUTO_ID_31 - policy test ID_31
      FAILED: Scenario 60 - cli_GVT_MQTT_AUTO_ID_36 - policy test ID_36
      FAILED: Scenario 62 - cli_GVT_MQTT_AUTO_ID_37 - policy test ID_37
      FAILED: Scenario 64 - cli_GVT_MQTT_AUTO_ID_38 - policy test ID_38
      FAILED: Scenario 66 - cli_GVT_MQTT_AUTO_ID_40 - policy test ID_40
      FAILED: Scenario 72 - cli_GVT_MQTT_AUTO_ID_43 - policy test ID_43
      FAILED: Scenario 76 - cli_GVT_MQTT_AUTO_ID_45 - policy test ID_45
      FAILED: Scenario 2 - cli_security_test_001 - send test data to topic
      FAILED: Scenario 4 - cli_security_test_002 - send test data to topic
      FAILED: Scenario 6 - cli_security_test_003 - send test data to topic
      FAILED: Scenario 10 - cli_security_test_006 - send test data to topic - client auth
      FAILED: Scenario 14 - cli_security_test_008 - send should work
      FAILED: Scenario 19 - cli_security_test_012 - should work after ep gets new security profile
      FAILED: Scenario 7 - cli_stat_topics_test_007 - send test data to topic
      FAILED: Scenario 8 - cli_stat_topics_test_008 - validate stat command.
      FAILED: Scenario 19 - cli_stat_topics_test_016 - validate stat command.
  "MQConnectivity_tests" FAILED:
      FAILED: Scenario 3 - MQ_CON_BOUNDARIES_04 - com.ibm.ima.mqcon.boundaries MQTT messages are published to a topic which is associated with a destination mapping rule in order to check that the max messages value is being enforced
  "snmp_tests" FAILED:
      FAILED: Scenario 5 - SNMP_verify_endpoint_info - Verify Endpoint Information
cAppDriverWait  ./ism-SNMP-VerifyMemoryInfo.sh FAILED to start!
      FAILED: Scenario 6 - SNMP_verify_memory_info - Verify Memory Information RC=1
      FAILED: runScenarios - SNMP Tests : Server stopped running during execution.
      FAILED: runScenarios - SNMP Tests : ism-SNMP-tests_Core - A core file was found on A1 after running ism-SNMP-tests.
      FAILED: runScenarios - SNMP Tests : ism-SNMP-tests_Core - A core file was found on A1 after running ism-SNMP-tests.
  "jca_tests" FAILED:
      FAILED: runScenarios - JCA Setup Objects - 00: 10.73.131.248 A1:Server may not be running. service/status returned RC=7
      FAILED: Scenario 0 - jca_retained_001 - JCA retained 001
      FAILED: Scenario 2 - jca_topic_001 - JCA topic 001
      FAILED: Scenario 3 - jca_topic_002 - JCA topic 002
      FAILED: Scenario 5 - jca_queue_001 - JCA queue 001
      FAILED: Scenario 6 - jca_shared_001 - JCA shared 001 - nondurable shared subscription without a clientid
      FAILED: Scenario 7 - jca_shared_002 - JCA shared 002 - nondurable shared subscription with a clientid
      FAILED: Scenario 8 - jca_shared_003 - JCA shared 003 - durable shared subscription without a clientid
      FAILED: Scenario 9 - jca_shared_004 - JCA shared 004 - durable shared subscription with a clientid
      FAILED: Scenario 10 - jca_jndi_topic - JCA JNDI Topic
      FAILED: Scenario 11 - jca_jndi_queue - JCA JNDI Queue
      FAILED: Scenario 13 - jca_api_001 - JCA api 001 - Test various JMS API*s in the RA environment
      FAILED: Scenario 0 - jca_ssltopic_001 - JCA SSL Topic 001
      FAILED: Scenario 1 - jca_sslqueue_001 - JCA SSL Queue 001
      FAILED: Scenario 2 - jca_ssltopic_002 - JCA SSL Topic 002
      FAILED: Scenario 3 - jca_sslqueue_002 - JCA SSL Queue 002 - User authentication on outbound
      FAILED: Scenario 1 - jca_enablerb_001 - enable rollback = true BMT
      FAILED: Scenario 2 - jca_enablerb_002 - enable rollback = true CMTNS
      FAILED: Scenario 3 - jca_enablerb_003 - enable rollback = false BMT
      FAILED: Scenario 4 - jca_enablerb_004 - enable rollback = false CMTNS
      FAILED: Scenario 5 - jca_pause_001 - MDB Pause - this test should not cause the MDB to pause
      FAILED: Scenario 6 - jca_pause_002 - MDB Pause - this test should cause the MDB to pause
      FAILED: Scenario 8 - jca_pause_003 - ignoreFailuresOnStart activation spec property test
      FAILED: Scenario 10 - jca_translevel_001 - transactionLevelSupport = Local with CMTNS MDB and CMTR EJB
      FAILED: Scenario 11 - jca_translevel_002 - transationLevelSupport = Local with BMT MDB and EJB
      FAILED: Scenario 12 - jca_translevel_003 - transationLevelSupport = NoTransaction with CMTR MDB and Supports EJB
      FAILED: Scenario 13 - jca_translevel_004 - transationLevelSupport = NoTransaction with BMTUT MDB
      FAILED: Scenario 0 - jca_bmtut_topic - Stateless Session Bean with Bean Managed Transactions on a topic
      FAILED: Scenario 1 - jca_bmtut_queue - Stateless Session Bean with Bean Managed Transactions on a queue
      FAILED: Scenario 2 - jca_bmtut_rb_nonpersistent - Bean Managed Transactions and rollback with non-persistent messages
      FAILED: Scenario 3 - jca_bmtut_rb_persistent - Bean Managed Transactions and rollback with persistent messages
      FAILED: Scenario 4 - jca_bmtut_rb_queue - Bean Managed Transactions and rollback with a queue
      FAILED: Scenario 0 - jca_cmtr_topic - Stateless Session Bean with Container Managed Transactions - MDB Required
      FAILED: Scenario 1 - jca_cmtr_nodb2_topic - Stateless Session Bean with Container Managed Transactions - MDB Required - no DB2
      FAILED: Scenario 2 - jca_cmtns_topic - Stateless Session Bean with Container Managed Transactions - MDB NotSupported
      FAILED: Scenario 3 - jca_cmtns_nodb2_topic - Stateless Session Bean with Container Managed Transactions - MDB NotSupported - no DB2
      FAILED: Scenario 4 - jca_cmtr_queue - Stateless Session Bean with Container Managed Transactions - MDB Required - Queue
      FAILED: Scenario 5 - jca_cmtns_queue - Stateless Session Bean with Container Managed Transactions - MDB NotSupported - Queue
      FAILED: Scenario 6 - jca_cmt_rb_nonpersistent - Container Managed Transactions with rollback - nonpersistent
      FAILED: Scenario 7 - jca_cmt_rb_persistent - Container Managed Transactions with rollback - persistent
      FAILED: Scenario 8 - jca_cmt_rb_queue - Container Managed Transactions with rollback - queue
      FAILED: Scenario 9 - jca_dest_full - CMTR MDB and max messages
      FAILED: Scenario 0 - jca_xaerror_none_statelessBMTUT - A check to make sure Evil RA works
      FAILED: Scenario 1 - jca_xaerror_prepare_statelessBMTUT - EvilRA throws Error in prepare() in XA
      FAILED: Scenario 2 - jca_xaerror_commit_statelessBMTUT - EvilRA throws Error in commit() in XA
      FAILED: Scenario 3 - jca_xaerror_start_statelessBMTUT - EvilRA throws Error in start() in XA
      FAILED: Scenario 4 - jca_xaerror_end_statelessBMTUT - EvilRA throws Error in end() in XA
      FAILED: Scenario 5 - jca_xaerror_none_statelessCMT - A check to make sure Evil RA works
      FAILED: Scenario 6 - jca_xaerror_prepare_statelessCMT - EvilRA throws Error in prepare() in XA
      FAILED: Scenario 7 - jca_xaerror_commit_statelessCMT - EvilRA throws Error in commit() in XA
      FAILED: Scenario 8 - jca_xaerror_start_statelessCMT - EvilRA throws Error in start() in XA
      FAILED: Scenario 9 - jca_xaerror_end_statelessCMT - EvilRA throws Error in end() in XA
      FAILED: Scenario 0 - jca_reconnect_001 - JCA Reconnect 001
      FAILED: Scenario 1 - jca_reconnect_002 - Durable Shared subscription CMTR MDB, max messages and an imaserver restart
      FAILED: Scenario 0 - heur_commit_cmt - JCA Heuristic XA CMT Commit
      FAILED: Scenario 1 - heur_commit_bmt - JCA Heuristic XA BMT Commit
      FAILED: Scenario 2 - heur_rollback_cmt - JCA Heuristic XA CMT Rollback
      FAILED: Scenario 3 - heur_rollback_bmt - JCA Heuristic XA BMT Rollback
      FAILED: Scenario 4 - heur_prepCommit_cmt - JCA Heuristic XA CMT crash on prepare then commit
      FAILED: Scenario 5 - heur_prepRB_cmt - JCA Heuristic XA CMT crash on prepare then rollback
      FAILED: Scenario 6 - heur_prepCommit_bmt - JCA Heuristic XA BMT crash on prepare then commit
      FAILED: Scenario 7 - heur_prepRB_bmt - JCA Heuristic XA BMT crash on prepare then rollback
  "restapi" FAILED:
      FAILED: Scenario 0 - RESTAPI-00-ResetConfig - RESTAPI for Service Reset Config
      FAILED: Scenario 1 - RESTAPI-01-AdminLog - RESTAPI for AdminLog
      FAILED: Scenario 2 - RESTAPI-02-ConnectionLog - RESTAPI for ConnectionLog
      FAILED: Scenario 3 - RESTAPI-03-LogLevel - RESTAPI for LogLevel
      FAILED: Scenario 4 - RESTAPI-04-SecurityLog - RESTAPI for SecurityLog
      FAILED: Scenario 5 - RESTAPI-05-TraceBackup - RESTAPI for TraceBackup
      FAILED: Scenario 6 - RESTAPI-06-TraceBackupCount - RESTAPI for TraceBackupCount
      FAILED: Scenario 7 - RESTAPI-07-TraceBackupDestination - RESTAPI for TraceBackupDestination
      FAILED: Scenario 8 - RESTAPI-08-TraceConnection - RESTAPI for TraceConnection
      FAILED: Scenario 9 - RESTAPI-09-TraceLevel - RESTAPI for TraceLevel
      FAILED: Scenario 10 - RESTAPI-10-TraceMax - RESTAPI for TraceMax
      FAILED: Scenario 11 - RESTAPI-11-TraceMessageData - RESTAPI for TraceMessageData
      FAILED: Scenario 12 - RESTAPI-12-TraceOptions - RESTAPI for TraceOptions
      FAILED: Scenario 13 - RESTAPI-13-TraceSelected - RESTAPI for TraceSelected
      FAILED: Scenario 15 - RESTAPI-15-Syslog - RESTAPI for Syslog
      FAILED: Scenario 16 - RESTAPI-20-MessageHub - RESTAPI for MessageHub
      FAILED: Scenario 17 - RESTAPI-21-ConnectionPolicy - RESTAPI for ConnectionPolicy
      FAILED: Scenario 18 - RESTAPI-23-Endpoint - RESTAPI for Endpoint
      FAILED: Scenario 19 - RESTAPI-24-Queue - RESTAPI for Queue
      FAILED: Scenario 20 - RESTAPI-26-TopicPolicy - RESTAPI for TopicPolicy
      FAILED: Scenario 21 - RESTAPI-27-QueuePolicy - RESTAPI for QueuePolicy
      FAILED: Scenario 22 - RESTAPI-28-SubscriptionPolicy - RESTAPI for SubscriptionPolicy
      FAILED: Scenario 23 - RESTAPI-29-Plugin - RESTAPI for Plugin
      FAILED: Scenario 24 - RESTAPI-30-PluginDebugPort - RESTAPI for PluginDebugPort
      FAILED: Scenario 25 - RESTAPI-31-PluginDebugServer - RESTAPI for PluginDebugServer
      FAILED: Scenario 26 - RESTAPI-32-PluginMaxHeapSize - RESTAPI for PluginMaxHeapSize
      FAILED: Scenario 27 - RESTAPI-33-PluginPort - RESTAPI for PluginPort
      FAILED: Scenario 28 - RESTAPI-34-PluginServer - RESTAPI for PluginServer
      FAILED: Scenario 29 - RESTAPI-35-PluginVMArgs - RESTAPI for PluginVMArgs
      FAILED: Scenario 30 - RESTAPI-40-AdminEndpoint - RESTAPI for AdminEndpoint
      FAILED: Scenario 31 - RESTAPI-41-CertificateProfile - RESTAPI for CertificateProfile
      FAILED: Scenario 32 - RESTAPI-42-ConfigurationPolicy - RESTAPI for ConfigurationPolicy
      FAILED: Scenario 33 - RESTAPI-43-FIPS - RESTAPI for FIPS
      FAILED: Scenario 34 - RESTAPI-44-LDAP - RESTAPI for LDAP
      FAILED: Scenario 35 - RESTAPI-45-LTPAProfile - RESTAPI for LTPAProfile
      FAILED: Scenario 36 - RESTAPI-46-OAuthProfile - RESTAPI for OAuthProfile
      FAILED: Scenario 37 - RESTAPI-47-SecurityProfile - RESTAPI for SecurityProfile
      FAILED: Scenario 38 - RESTAPI-48-ClientCertificate - RESTAPI for ClientCertificate
      FAILED: Scenario 39 - RESTAPI-49-TrustedCertificate - RESTAPI for TrustedCertificate
      FAILED: Scenario 42 - RESTAPI-61-AdminUserID - RESTAPI for AdminUserID
      FAILED: Scenario 44 - RESTAPI-63-ClusterMembership - RESTAPI for ClusterMembership
      FAILED: Scenario 46 - RESTAPI-65-LicensedUsage - RESTAPI for LicensedUsage
      FAILED: Scenario 50 - RESTAPI-80-ServerName - RESTAPI for ServerName
      FAILED: Scenario 51 - RESTAPI-81-ServerUID - RESTAPI for ServerUID
      FAILED: Scenario 53 - RESTAPI-83-TolerateRecoveryInconsistencies - RESTAPI for TolerateRecoveryInconsistencies
      FAILED: Scenario 54 - RESTAPI-90-DestinationMappingRule - RESTAPI for DestinationMappingRule
      FAILED: Scenario 57 - RESTAPI-93-QueueManagerConnection - RESTAPI for QueueManagerConnection
      FAILED: Scenario 0 - RESTAPI-00-Service - RESTAPI for Service
cAppDriver  /niagara/test/restapi/synopsis.sh FAILED to start!
      FAILED: Scenario 1 - RESTAPI-99-Synopsis - Synopsis of RESTAPI Execution RC=1

(RC!=0 for some tests, check individual results for details)

IMA Automated Framework Summary Report
==========================================================================================================================================
Build Type:       production
Server Release:   MGPROD @ 20210520-1419
Proxy Release:    MGPROD @ 20210520-1419
Client Release:   MGPROD @ 20210520-1419
Test Release:     MGPROD @ 20210520-1419
Test Group:       fvt_prod
Total Time:       10:55:54

Total Results:    Passed:  3101   Failed:   735   Success:  80.84%
                  (RC!=0 for some tests, check individual results for details)

Platform Results:
-------------------
CCI_CENTOS_DOCKER:    Passed:  3101   Failed:   735   Success:  80.84%

Individual Results:
-------------------
JMS:                  Passed:   593   Failed:   149   Success:  79.92%
JMS_MQTT:             Passed:    24   Failed:     4   Success:  85.71%
MQTT:                 Passed:   917   Failed:    37   Success:  96.12%
WS:                   Passed:    24   Failed:   120   Success:  16.67%
CLI:                  Passed:   804   Failed:    62   Success:  92.84%
REST_API:             Passed:    28   Failed:   100   Success:  21.88%
PROXY:                Passed:    91   Failed:   212   Success:  30.03%
MQ_CONN:              Passed:   170   Failed:     2   Success:  98.84%
HA:                   Passed:   167   Failed:    22   Success:  88.36%
CLUSTER:              Passed:   218   Failed:     1   Success:  99.54%
SNMP:                 Passed:    11   Failed:    17   Success:  39.29%

==========================================================================================================================================
=========================================== Summary of Failures by Number of Occurrences =================================================
==========================================================================================================================================
 4  mqtt_clearRetained.xml - Clear all retained messages
 3  to start!
 3  jca_topic_002 - JCA topic 002
 3  jca_topic_001 - JCA topic 001
 3  jca_shared_004 - JCA shared 004 - durable shared subscription with a clientid
 3  jca_shared_003 - JCA shared 003 - durable shared subscription without a clientid
 3  jca_shared_002 - JCA shared 002 - nondurable shared subscription with a clientid
 3  jca_shared_001 - JCA shared 001 - nondurable shared subscription without a clientid
 3  jca_retained_001 - JCA retained 001
 3  jca_queue_001 - JCA queue 001
 3  jca_jndi_topic - JCA JNDI Topic
 3  jca_jndi_queue - JCA JNDI Queue
 3  jca_api_001 - JCA api 001 - Test various JMS API*s in the RA environment
 3  SNMP Tests : ism-SNMP-tests_Core - A core file was found on A1 after running ism-SNMP-tests.
 2  testplugin_subscribe14 - Test MQTT/WebSocket subscribe to long topic (<32767 characters)
 2  testplugin_subscribe01 - Test MQTT/WebSocket subscribe to *#*
 2  testmqtt_stat02 - Test that stat MQTTClient shows correct clients
 2  testmqtt_gvt06 - Test ability to connect with GVT characters E3 in user/password [ testmqtt_gvt06.xml ]
 2  testmqtt_gvt03 - Test ability to connect with GVT characters in user/password [ testmqtt_gvt03.xml ]
 2  testmqtt_gvt02 - Test ability to connect over an SSL connection [ testmqtt_gvt02.xml ]
 2  testmqtt_gvt01 - Test ability use GVT characters in topic and ClientID [ testmqtt_gvt01.xml ]
 2  ssl/testmqtt_ssl09b - Test MQTT/WebSocket CommonName usage in ClientID on ConnectionPolicy with asterisk character
 2  ssl/testmqtt_ssl09a - Test MQTT/WebSocket CommonName usage in ClientID on ConnectionPolicy with asterisk character
 2  ssl/testmqtt_ssl08 - Test MQTT/WebSocket CommonName usage in ClientID on ConnectionPolicy with asterisk character
 2  ssl/testmqtt_ssl07 - Test MQTT/WebSocket CommonName usage
 2  ssl/testmqtt_ssl06 - Test MQTT/WebSocket CommonName usage
 2  ssl/testmqtt_ssl05 - Test MQTT/WebSocket CommonName usage
 2  mqtt_clearRetained.xml - Clear all retained messages with MQTTv5
 2  jsclient_sec_e9_b - User is not authorized (IPv6)
 2  jsclient_sec_e5_b - Incorrect password
 2  jsclient_sec_e3_b - User does not exist (IPv6)
 2  jsclient_sec_e2_b - User does not exist (was invalid UTF-8 test)
 2  jsclient_sec_e1_b - UserName is not specified (IPv6)
 2  jsclient_sec_e16_b - Empty userName and non-empty password
 2  jsclient_sec_e14_b - Empty userName and password
 2  jsclient_sec_e13_b - Protocol is JMS on the Endpoint (IPv6)
 2  jsclient_sec_e12_b - Protocol is JMS on the ConnectionPolicy
 2  jsclient_sec_e10_b - Insecure connection to a secure Endpoint
 2  jsclient_sec_6_b - Connect to ISM server using an authorized user (wildcards in ID on ConnectionPolicy) (IPv6)
 2  jsclient_sec_5_b - Connect to ISM server with a ConnectionPolicy that authorizes only one user
 2  jsclient_sec_4_b - Connect to ISM server with an MQTT-only Endpoint (IPv6)
 2  jsclient_sec_3_b - Connect to ISM server with an MQTT-only ConnectionPolicy
 2  jsclient_sec_2_b - Connect to ISM server with SSL disabled, using a valid, non-empty username and password (IPv6)
 2  jsclient_pubsub_e8_b - Specify a non-function for the onmessage callback for a client
 2  jsclient_pubsub_e7_b - Specify a non-function for subscribeCompleteCallback
 2  jsclient_pubsub_e6_b - Test for invalid QoS values on sub
 2  jsclient_pubsub_e4_b - Test for invalid wildcard placements on sub
 2  jsclient_pubsub_e3_b - Test for invalid retain value on pub
 2  jsclient_pubsub_e2_b - Test for invalid QoS values on pub
 2  jsclient_pubsub_e1_b - Test for invalid topic names on pub
 2  jsclient_pubsub_e16_b - Attempt to publish/subscribe on an unauthorized topic
 2  jsclient_pubsub_e15_b - Attempt to publish/subscribe on an unauthorized protocol
 2  jsclient_pubsub_e14_b - Unsubscribe from a topic with invalid wc placement
 2  jsclient_pubsub_e13_b - Test for unsubscribe with non-function callback
 2  jsclient_pubsub_8_b - Specify a subscribe complete callback (IPv6)
 2  jsclient_pubsub_5_b - Test for case-sensitivity in topic name
 2  jsclient_pubsub_4_b - Multiple topics, QoS=0 on publish (IPv6)
 2  jsclient_pubsub_3_b - QoS=2 on publish
 2  jsclient_pubsub_2_b - QoS=1 on publish (IPv6)
 2  jsclient_pubsub_27_b - Connect to an Connection/MessagingPolicy that authorizes a specific user/topic (IPv6)
 2  jsclient_pubsub_26_b - Connect to an Connection/Messaging Policy that authorizes MQTT clients only
 2  jsclient_pubsub_25_b - Connect to an Connection/Messaging Policy that authorizes clients for the MQTT and JMS protocols (IPv6)
 2  jsclient_pubsub_24_b - Test where publisher and subscriber are on different clients (synchronized)
 2  jsclient_pubsub_22_b - Unsubscribe from the same topic twice
 2  jsclient_pubsub_1_b - Basic publish/subscribe for the JavaScript Client
 2  jsclient_pubsub_19_b - No unsubscribe before disconnect
 2  jsclient_pubsub_18_b - Retained message is not the last message
 2  jsclient_pubsub_17_b - Test retained
 2  jsclient_pubsub_16_b - Mixed QoS client with wildcard subscriptions (IPv6)
 2  jsclient_pubsub_15_b - Mixed QoS topics in one client
 2  jsclient_pubsub_14_b - Mixed QoS on publish, QoS=2 on subscribe (IPv6)
 2  jsclient_pubsub_13_b - Mixed QoS on publish, QoS=1 on subscribe
 2  jsclient_pubsub_12_b - Mixed QoS on publish, QoS=0 on subscribe (IPv6)
 2  jsclient_pubsub_11_b - Wildcard subscriptions
 2  jsclient_pubsub_10_b - Specify various callbacks for onsubscribe (IPv6)
 2  jsclient_gvt_4_b - GVT: Will Topic and Message test
 2  jsclient_gvt_3_b - GVT: userName and password test
 2  jsclient_gvt_2_b - GVT: Topic name test
 2  jsclient_gvt_1_b - GVT: ClientID test
 2  jsclient_connect_e12_b - Create an Endpoint that does not have a ConnectionPolicy -  CLI
 2  jsclient_connect_e11_b - Connect to a server with an Endpoint that does not allow the MQTT protocol
 2  jsclient_connect_e10_b - Connect to a server with a connection policy that does not allow the MQTT protocol
 2  jsclient_connect_6_b - Connect to a server with a connection policy that only allows the MQTT protocol
 2  jsclient_connect_5_b - Connect with a non-unique clientId (synchronized) (IPv6)
 2  jsclient_connect_4_b - Connect with multiple clients (synchronized)
 2  jsclient_connect_3_b - Connect with a single space as the clientId (IPv6)
 2  jsclient_connect_2_b - Connect using a clientId with a space and other chars
 2  jsclient_connect_1_b - Connect with a single char clientId (IPv6)
 2  jms_oauth_notls - Test notls - OAuth Test with no TLS
 2  jms_oauth_010_truststore - Test 10 - OAuth Test 10 with TrustStore set
 2  jms_oauth_009_groupinfokey - Test 9 - OAuth Test 9 with GroupInfoKey and
 2  jms_oauth_007_groupinfokey - Test 4 - OAuth Test 7 with GroupInfoKey group list
 2  jms_oauth_006 - Test 6 - OAuth Test 6
 2  jms_oauth_003_groupinfokey - Test 3 - OAuth Test 3 with GroupInfoKey
 2  jms_oauth_003 - Test 3 - OAuth Test 3
 2  jms_oauth_002_sameURL - Test 2 - OAuth Test 2 with GroupInfoKey sameURL
 2  jms_oauth_002_groupinfokey - Test 2 - OAuth Test 2 with GroupInfoKey
 2  jms_oauth_002 - Test 2 - OAuth Test 2
 2  jms_oauth_001_groupinfokey - Test 1 - OAuth Test 1 with GroupInfoKey
 2  jms_oauth_001 - Test 1 - OAuth Test 1
 2  jms_mqtt_001 JMS to MQTT - Test 1 with Unicode Topic Name and RETAINED. [ jms_mqtt_001.xml ]
 2  jca_xaerror_start_statelessCMT - EvilRA throws Error in start() in XA
 2  jca_xaerror_start_statelessBMTUT - EvilRA throws Error in start() in XA
 2  jca_xaerror_prepare_statelessCMT - EvilRA throws Error in prepare() in XA
 2  jca_xaerror_prepare_statelessBMTUT - EvilRA throws Error in prepare() in XA
 2  jca_xaerror_none_statelessCMT - A check to make sure Evil RA works
 2  jca_xaerror_none_statelessBMTUT - A check to make sure Evil RA works
 2  jca_xaerror_end_statelessCMT - EvilRA throws Error in end() in XA
 2  jca_xaerror_end_statelessBMTUT - EvilRA throws Error in end() in XA
 2  jca_xaerror_commit_statelessCMT - EvilRA throws Error in commit() in XA
 2  jca_xaerror_commit_statelessBMTUT - EvilRA throws Error in commit() in XA
 2  jca_translevel_004 - transationLevelSupport = NoTransaction with BMTUT MDB
 2  jca_translevel_003 - transationLevelSupport = NoTransaction with CMTR MDB and Supports EJB
 2  jca_translevel_002 - transationLevelSupport = Local with BMT MDB and EJB
 2  jca_translevel_001 - transactionLevelSupport = Local with CMTNS MDB and CMTR EJB
 2  jca_ssltopic_002 - JCA SSL Topic 002
 2  jca_ssltopic_001 - JCA SSL Topic 001
 2  jca_sslqueue_002 - JCA SSL Queue 002 - User authentication on outbound
 2  jca_sslqueue_001 - JCA SSL Queue 001
 2  jca_reconnect_002 - Durable Shared subscription CMTR MDB, max messages and an imaserver restart
 2  jca_reconnect_001 - JCA Reconnect 001
 2  jca_pause_003 - ignoreFailuresOnStart activation spec property test
 2  jca_pause_002 - MDB Pause - this test should cause the MDB to pause
 2  jca_pause_001 - MDB Pause - this test should not cause the MDB to pause
 2  jca_enablerb_004 - enable rollback = false CMTNS
 2  jca_enablerb_003 - enable rollback = false BMT
 2  jca_enablerb_002 - enable rollback = true CMTNS
 2  jca_enablerb_001 - enable rollback = true BMT
 2  jca_dest_full - CMTR MDB and max messages
 2  jca_cmtr_topic - Stateless Session Bean with Container Managed Transactions - MDB Required
 2  jca_cmtr_queue - Stateless Session Bean with Container Managed Transactions - MDB Required - Queue
 2  jca_cmtr_nodb2_topic - Stateless Session Bean with Container Managed Transactions - MDB Required - no DB2
 2  jca_cmtns_topic - Stateless Session Bean with Container Managed Transactions - MDB NotSupported
 2  jca_cmtns_queue - Stateless Session Bean with Container Managed Transactions - MDB NotSupported - Queue
 2  jca_cmtns_nodb2_topic - Stateless Session Bean with Container Managed Transactions - MDB NotSupported - no DB2
 2  jca_cmt_rb_queue - Container Managed Transactions with rollback - queue
 2  jca_cmt_rb_persistent - Container Managed Transactions with rollback - persistent
 2  jca_cmt_rb_nonpersistent - Container Managed Transactions with rollback - nonpersistent
 2  jca_bmtut_topic - Stateless Session Bean with Bean Managed Transactions on a topic
 2  jca_bmtut_rb_queue - Bean Managed Transactions and rollback with a queue
 2  jca_bmtut_rb_persistent - Bean Managed Transactions and rollback with persistent messages
 2  jca_bmtut_rb_nonpersistent - Bean Managed Transactions and rollback with non-persistent messages
 2  jca_bmtut_queue - Stateless Session Bean with Bean Managed Transactions on a queue
 2  heur_rollback_cmt - JCA Heuristic XA CMT Rollback
 2  heur_rollback_bmt - JCA Heuristic XA BMT Rollback
 2  heur_prepRB_cmt - JCA Heuristic XA CMT crash on prepare then rollback
 2  heur_prepRB_bmt - JCA Heuristic XA BMT crash on prepare then rollback
 2  heur_prepCommit_cmt - JCA Heuristic XA CMT crash on prepare then commit
 2  heur_prepCommit_bmt - JCA Heuristic XA BMT crash on prepare then commit
 2  heur_commit_cmt - JCA Heuristic XA CMT Commit
 2  heur_commit_bmt - JCA Heuristic XA BMT Commit
 2  deleteAllRetained0 - Delete any RETAINed messages, error if any exist
 2  cli_stat_topics_test_016 - validate stat command.
 2  cli_stat_topics_test_008 - validate stat command.
 2  cli_stat_topics_test_007 - send test data to topic
 2  cli_security_test_012 - should work after ep gets new security profile
 2  cli_security_test_008 - send should work
 2  cli_security_test_006 - send test data to topic - client auth
 2  cli_security_test_003 - send test data to topic
 2  cli_security_test_002 - send test data to topic
 2  cli_security_test_001 - send test data to topic
 2  cli_GVT_MQTT_AUTO_ID_45 - policy test ID_45
 2  cli_GVT_MQTT_AUTO_ID_43 - policy test ID_43
 2  cli_GVT_MQTT_AUTO_ID_40 - policy test ID_40
 2  cli_GVT_MQTT_AUTO_ID_4 - policy test ID_4
 2  cli_GVT_MQTT_AUTO_ID_38 - policy test ID_38
 2  cli_GVT_MQTT_AUTO_ID_37 - policy test ID_37
 2  cli_GVT_MQTT_AUTO_ID_36 - policy test ID_36
 2  cli_GVT_MQTT_AUTO_ID_31 - policy test ID_31
 2  cli_GVT_MQTT_AUTO_ID_29 - policy test ID_29
 2  cli_GVT_MQTT_AUTO_ID_26 - policy test ID_26
 2  cli_GVT_MQTT_AUTO_ID_25 - policy test ID_25
 2  cli_GVT_MQTT_AUTO_ID_24 - policy test ID_24
 2  cli_GVT_MQTT_AUTO_ID_20 - policy test ID_20
 2  cli_GVT_MQTT_AUTO_ID_2 - policy test ID_2
 2  cli_GVT_MQTT_AUTO_ID_18 - policy test ID_18
 2  cli_GVT_MQTT_AUTO_ID_17 - policy test ID_17
 2  cli_GVT_MQTT_AUTO_ID_16 - policy test ID_16
 2  cli_GVT_MQTT_AUTO_ID_15 - policy test ID_15
 2  cli_GVT_MQTT_AUTO_ID_14 - policy test ID_14
 2  cli_GVT_MQTT_AUTO_ID_13 - policy test ID_13
 2  cli_GVT_MQTT_AUTO_ID_12 - policy test ID_12
 2  cli_GVT_MQTT_AUTO_ID_11 - policy test ID_11
 2  bridgePx.SimpleA1A2 - Test Simple Pub-Fwd-Recv through Bridge   bridge_tests/proxy/ism-Bridge-Proxy01.sh
 2  bridgePx.MultiFWD_V3Source - Test Multile Forwarders with V3 Source Bridge   bridge_tests/proxy/ism-Bridge-Proxy01.sh
 2  bridgePx.MaxFWDTopics - Test Max Forwarder Topics Bridge   bridge_tests/proxy/ism-Bridge-Proxy01.sh
 2  bridge.SimpleA1A2 - Test Simple Pub-Fwd-Recv through Bridge  bridge_tests/plain/ism-Bridge-Plain01.sh
 2  SNMP_verify_server_info - Verify Server Information
 2  SNMP_verify_memory_info - Verify Memory Information
 2  SNMP_verify_endpoint_info - Verify Endpoint Information
 2  SNMP Tests : Server stopped running during execution.
 2  RESTAPI-99-Synopsis - Synopsis of RESTAPI Execution RC=1
 2  RESTAPI-93-QueueManagerConnection - RESTAPI for QueueManagerConnection
 2  RESTAPI-90-DestinationMappingRule - RESTAPI for DestinationMappingRule
 2  RESTAPI-83-TolerateRecoveryInconsistencies - RESTAPI for TolerateRecoveryInconsistencies
 2  RESTAPI-81-ServerUID - RESTAPI for ServerUID
 2  RESTAPI-80-ServerName - RESTAPI for ServerName
 2  RESTAPI-65-LicensedUsage - RESTAPI for LicensedUsage
 2  RESTAPI-63-ClusterMembership - RESTAPI for ClusterMembership
 2  RESTAPI-61-AdminUserID - RESTAPI for AdminUserID
 2  RESTAPI-49-TrustedCertificate - RESTAPI for TrustedCertificate
 2  RESTAPI-48-ClientCertificate - RESTAPI for ClientCertificate
 2  RESTAPI-47-SecurityProfile - RESTAPI for SecurityProfile
 2  RESTAPI-46-OAuthProfile - RESTAPI for OAuthProfile
 2  RESTAPI-45-LTPAProfile - RESTAPI for LTPAProfile
 2  RESTAPI-44-LDAP - RESTAPI for LDAP
 2  RESTAPI-43-FIPS - RESTAPI for FIPS
 2  RESTAPI-42-ConfigurationPolicy - RESTAPI for ConfigurationPolicy
 2  RESTAPI-41-CertificateProfile - RESTAPI for CertificateProfile
 2  RESTAPI-40-AdminEndpoint - RESTAPI for AdminEndpoint
 2  RESTAPI-35-PluginVMArgs - RESTAPI for PluginVMArgs
 2  RESTAPI-34-PluginServer - RESTAPI for PluginServer
 2  RESTAPI-33-PluginPort - RESTAPI for PluginPort
 2  RESTAPI-32-PluginMaxHeapSize - RESTAPI for PluginMaxHeapSize
 2  RESTAPI-31-PluginDebugServer - RESTAPI for PluginDebugServer
 2  RESTAPI-30-PluginDebugPort - RESTAPI for PluginDebugPort
 2  RESTAPI-29-Plugin - RESTAPI for Plugin
 2  RESTAPI-28-SubscriptionPolicy - RESTAPI for SubscriptionPolicy
 2  RESTAPI-27-QueuePolicy - RESTAPI for QueuePolicy
 2  RESTAPI-26-TopicPolicy - RESTAPI for TopicPolicy
 2  RESTAPI-24-Queue - RESTAPI for Queue
 2  RESTAPI-23-Endpoint - RESTAPI for Endpoint
 2  RESTAPI-21-ConnectionPolicy - RESTAPI for ConnectionPolicy
 2  RESTAPI-20-MessageHub - RESTAPI for MessageHub
 2  RESTAPI-15-Syslog - RESTAPI for Syslog
 2  RESTAPI-13-TraceSelected - RESTAPI for TraceSelected
 2  RESTAPI-12-TraceOptions - RESTAPI for TraceOptions
 2  RESTAPI-11-TraceMessageData - RESTAPI for TraceMessageData
 2  RESTAPI-10-TraceMax - RESTAPI for TraceMax
 2  RESTAPI-09-TraceLevel - RESTAPI for TraceLevel
 2  RESTAPI-08-TraceConnection - RESTAPI for TraceConnection
 2  RESTAPI-07-TraceBackupDestination - RESTAPI for TraceBackupDestination
 2  RESTAPI-06-TraceBackupCount - RESTAPI for TraceBackupCount
 2  RESTAPI-05-TraceBackup - RESTAPI for TraceBackup
 2  RESTAPI-04-SecurityLog - RESTAPI for SecurityLog
 2  RESTAPI-03-LogLevel - RESTAPI for LogLevel
 2  RESTAPI-02-ConnectionLog - RESTAPI for ConnectionLog
 2  RESTAPI-01-AdminLog - RESTAPI for AdminLog
 2  RESTAPI-00-Service - RESTAPI for Service
 2  RESTAPI-00-ResetConfig - RESTAPI for Service Reset Config
 2  Clear any retained messages before running JMS Wildcard tests [ mqtt_clearRetained.xml ]
 1  testproxy_v5connect_MPS - Test MQTTV5 that we don*t exceed Maximum Packet Size specified by client
 1  testproxy_tls09_ProxyDfltStore_CltCrtExactMatchg - Test TLS connections succeed for SGEnabled=false config when client cert store contains dflt proxy cert and client cert CN exactly matches client ID [ testproxy_tls09_ProxyDfltStore_CltCrtExactMatchg.xml ]
 1  testproxy_tls09_ProxyDfltStore_CltCrtExactMatchg - Test TLS connections succeed for SGEnabled=false config when client cert store contains dflt proxy cert and CN exact matching client cert. Also check that connections succeed when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls09_ProxyDfltStore_CltCrtExactMatchg.xml ]
 1  testproxy_tls08c_ClientCert1CrtInDERCRL - Test ability to connect to Proxy TLS port using client certificate authentication with DER format CRL and 1 reovoked cert - conn should succeed for cert that is not revoked [ testproxy_tls08c_ClientCert1CrtInDERCRL.xml ]
 1  testproxy_tls08b_ClientCert1CrtInDERCRL - Test ability to connect to Proxy TLS port using client certificate authentication with DER format CRL and 1 reovoked cert - conn should succeed for cert that is not revoked [ testproxy_tls08b_ClientCert1CrtInDERCRL.xml ]
 1  testproxy_tls08_ProxyDfltStore_CltCrtPartialMatchg - Test TLS connections succeed for SGEnabled=true config when client cert store contains dflt proxy cert and SAN partial matching client cert. Also check that connections succeed when partial match betw CN/SAN & clientId is required and failes when exact match is required. [ testproxy_tls08_ProxyDfltStore_CltCrtPartialMatchg.xml ]
 1  testproxy_tls08_ProxyDfltStore_CltCrtPartialMatchg - Test TLS connections succeed for SGEnabled=false config when client cert store contains dflt proxy cert and client cert SAN partially matches client ID [ testproxy_tls08_ProxyDfltStore_CltCrtPartialMatchg.xml ]
 1  testproxy_tls07s_OrgSrvStore_CltCrtExactMatchg - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert and client cert CN exactly matches client ID. Also check that connection succeeds when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls07s_OrgSrvStore_CltCrtExactMatchg.xml ]
 1  testproxy_tls07s_OrgSrvStore_CltCrtExactMatchg - Test TLS connections succeed for SGEnabled=false config with org server cert when client cert store contains dflt proxy cert and client cert CN exactly matches client ID [ testproxy_tls07s_OrgSrvStore_CltCrtExactMatchg.xml ]
 1  testproxy_tls07c_ClientCertEmptyDERCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty DER format CRL (cert 3 of 3) [ testproxy_tls07c_ClientCertEmptyDERCRL.xml ]
 1  testproxy_tls07b_ClientCertEmptyDERCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty DER format CRL (cert 2 of 3) [ testproxy_tls07b_ClientCertEmptyDERCRL.xml ]
 1  testproxy_tls07a_ClientCertEmptyDERCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty DER format CRL (cert 1 of 3) [ testproxy_tls07a_ClientCertEmptyDERCRL.xml ]
 1  testproxy_tls07_ProxyDfltStore_CltCrtExactMatchd - Test TLS connections succeed for SGEnabled=true config when client cert store contains dflt proxy cert and SAN exact matching client cert. Also check that connections succeed when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls07_ProxyDfltStore_CltCrtExactMatchd.xml ]
 1  testproxy_tls07_ProxyDfltStore_CltCrtExactMatchd - Test TLS connections succeed for SGEnabled=false config when client cert store contains dflt proxy cert and client cert SAN exactly matches client ID [ testproxy_tls07_ProxyDfltStore_CltCrtExactMatchd.xml ]
 1  testproxy_tls06s_OrgSrvStore_CltCrtPartialMatchg - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert and client cert SAN partially matches client ID. Also check that connection succeeds when partial match betw CN/SAN & clientId is required and fails when exact match is required. [ testproxy_tls06s_OrgSrvStore_CltCrtPartialMatchg.xml ]
 1  testproxy_tls06s_OrgSrvStore_CltCrtPartialMatchg - Test TLS connections succeed for SGEnabled=false config with org server cert when client cert store contains dflt proxy cert and client cert SAN partially matches client ID [ testproxy_tls06s_OrgSrvStore_CltCrtPartialMatchg.xml ]
 1  testproxy_tls06c_ClientCert2CrtsInCRL - Test ability to connect to Proxy TLS port using client certificate authentication with CRL and 2 reovoked certs - conn for non-revoked cert should succeed [ testproxy_tls06c_ClientCert2CrtsInCRL.xml ]
 1  testproxy_tls06_ProxyDfltStore_CltCrtPartialMatchd - Test TLS connections succeed for SGEnabled=true config when client cert store contains dflt proxy cert and CN partial matching client cert. Also test connections succeed when partial match betw CN/SAN & clientId is required and fails when exact match is required. [ testproxy_tls06_ProxyDfltStore_CltCrtPartialMatchd.xml ]
 1  testproxy_tls06_ProxyDfltStore_CltCrtPartialMatchd - Test TLS connections succeed for SGEnabled=false config when client cert store contains dflt proxy cert and client cert CN partially matches client ID [ testproxy_tls06_ProxyDfltStore_CltCrtPartialMatchd.xml ]
 1  testproxy_tls05s_OrgSrvStore_CltCrtExactMatchd - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert and client cert SAN exactly matches client ID. Also check that connection succeeds when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls05s_OrgSrvStore_CltCrtExactMatchd.xml ]
 1  testproxy_tls05s_OrgSrvStore_CltCrtExactMatchd - Test TLS connections succeed for SGEnabled=false config with org server cert when client cert store contains dflt proxy cert and client cert SAN exactly matches client ID [ testproxy_tls05s_OrgSrvStore_CltCrtExactMatchd.xml ]
 1  testproxy_tls05c_ClientCertEmptyCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty CRL (cert 3 of 3) [ testproxy_tls05c_ClientCertEmptyCRL.xml ]
 1  testproxy_tls05b_ClientCertEmptyCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty CRL (cert 2 of 3) [ testproxy_tls05b_ClientCertEmptyCRL.xml ]
 1  testproxy_tls05a_ClientCertEmptyCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty CRL (cert 1 of 3) [ testproxy_tls05a_ClientCertEmptyCRL.xml ]
 1  testproxy_tls05_ProxyDfltStore_CltCrtNoMatch - Test TLS connections succeed for SGEnabled=true config when client cert store contains dflt proxy cert and non-matching client cert. Also test connections fail when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls05_ProxyDfltStore_CltCrtNoMatch.xml ]
 1  testproxy_tls04s_OrgSrvStore_CltCrtPartialMatchd - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert and client cert CN partially matches client ID. Also check that connection succeeds when partial match betw CN/SAN & clientId is required and fails when exact match is required. [ testproxy_tls04s_OrgSrvStore_CltCrtPartialMatchd.xml ]
 1  testproxy_tls04s_OrgSrvStore_CltCrtPartialMatchd - Test TLS connections succeed for SGEnabled=false config with org server cert when client cert store contains dflt proxy cert and client cert CN partially matches client ID [ testproxy_tls04s_OrgSrvStore_CltCrtPartialMatchd.xml ]
 1  testproxy_tls04_MqttsEpStore_WithUser - Test ability to connect to Proxy TLS port with a user [ testproxy_tls04_MqttsEpStore_WithUser.xml ]
 1  testproxy_tls03s_OrgSrvStore_CltCrtNoMatch - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert and non-matching client cert. Also check that connections fail when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls03s_OrgSrvStore_CltCrtNoMatch.xml ]
 1  testproxy_tls03_MqttsEpStore - Test ability to connect to Proxy TLS port [ testproxy_tls03_MqttsEpStore.xml ]
 1  testproxy_tls03_MqttsEpStore - Test TLS connections succeed for SGEnabled=true config when client cert store contains mqtts ep cert only [ testproxy_tls03_MqttsEpStore.xml ]
 1  testproxy_tls02s_OrgSrvStore - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert only [ testproxy_tls02s_OrgSrvStore.xml ]
 1  testproxy_tls02_WrongStore - Test ability to connect to Proxy TLS port with wrong cert in store for self signed server cert - conn should fail [ testproxy_tls02_WrongStore.xml ]
 1  testproxy_tls01_NoTLS - Test that non-TLS connections succeed for SGEnabled=true configuration [ testproxy_tls01_NoTLS.xml ]
 1  testproxy_tls01_NoStore - Test ability to connect to Proxy TLS port with no store and self signed server cert - conn should fail [ testproxy_tls01_NoStore.xml ]
 1  testproxy_tenant07-iot2 - Connect device on iot2, check Registered Org rules
 1  testproxy_tenant06-quickstart2 - Connect application quickstart2, check QuickStart Rules
 1  testproxy_tenant05-quickstart2 - Connect application and device on quickstart2, only device publish and only application subscribe
 1  testproxy_tenant04-quickstart2 - Connect an application on Quickstart2 requiring no user/password, test that tenant name is properly added in topic sent on to MessageSight
 1  testproxy_tenant03-quickstart2 - Connect a device on Quickstart2 requiring no user/password, test that tenant name is properly added in topic sent on to MessageSight
 1  testproxy_tenant02-iot2 - Connect an application on IoT2 requiring user/password, test that tenant name is properly added in topic sent on to MessageSight, test that tenant not in cfg files fails
 1  testproxy_tenant01-iot2 - Connect a device on IoT2 requiring user/password, test that no user/password fails, test that org name is properly added in topic sent on to MessageSight
 1  testproxy_subscribe23 - Test publish and receive with 0 length message
 1  testproxy_subscribe22 - Test MQTT test subscribe to /a/c/+
 1  testproxy_subscribe21 - Test MQTT test subscribe, close, subscribe
 1  testproxy_subscribe20 - Test MQTT test subscribe to +
 1  testproxy_subscribe17 - Test MQTT 1)Subscribe to same specific topic twice, should only receive messages once
 1  testproxy_subscribe16 - Test MQTT/WebSocket subscribe send 1600 messages on each of two topics
 1  testproxy_subscribe15 - Test MQTT/WebSocket subscribe to long topic (<32767 characters)
 1  testproxy_subscribe14 - Test MQTT/WebSocket subscribe to long topic (<32767 characters)
 1  testproxy_subscribe13 - Test MQTT/WebSocket subscribe to *a/b/c* QoS=0 publish QoS=1 and Qos=2
 1  testproxy_subscribe11 - Test MQTT/WebSocket subscribe to *a/b/c* QoS=0
 1  testproxy_subscribe10 - Test MQTT/WebSocket subscribe to *a/b/c* and *a/b/+*, make sure a/b/c messages are not delivered twice
 1  testproxy_subscribe09 - Test MQTT/WebSocket subscribe to *a/b/c* with QoS=1 and *a/b/d* with QoS=0
 1  testproxy_subscribe08 - Test MQTT/WebSocket subscribe to *a/b/c* and *a/b/d*
 1  testproxy_subscribe07 - Test MQTT/WebSocket subscribe to *a/b/c* with QoS=2
 1  testproxy_subscribe06 - Test MQTT/WebSocket subscribe to *a/b/c* with QoS=1
 1  testproxy_subscribe05 - Test MQTT/WebSocket subscribe to 50 level topic
 1  testproxy_subscribe04 - Test MQTT/WebSocket subscribe to *a/+/c*
 1  testproxy_subscribe03 - Test MQTT/WebSocket subscribe to *a/#*
 1  testproxy_subscribe02 - Test MQTT/WebSocket subscribe to *a/b/c*
 1  testproxy_subscribe01 - Test MQTT/WebSocket subscribe to *#*
 1  testproxy_sharedMix_error03 - MQTTv5 Test creation and distruction of MQTTv5  subscriptions using cleansession clients in all different orders
 1  testproxy_sharedMix_csT_error02 - MQTTv5 Test connect, disconnect,and ClientID theft conditions for MQTTv5 shared subs using a non-durable subscriber.
 1  testproxy_sharedMix_csT_error01 - MQTTv5 Test basic Errors in or MQTTv5 shared subs using a non-durable subscriber.
 1  testproxy_sharedMix_csF_error02 - MQTTv5 Test connect, disconnect, reconnect, and ClientID theft conditions for MQTTv5 shared subs using a durable subscriber.
 1  testproxy_sharedMix_csF_error01 - MQTTv5 Test basic Errors in or MQTTv5 shared subs using a durable subscriber.
 1  testproxy_sharedMix_09 - MQTTv5 New Retained Messages behavior - shared durable should not receive RMs when create sub or on reconnect.
 1  testproxy_sharedMix_07ND - MQTTv5 Busy share test with many subscribes-unsubscribes, nondurable.
 1  testproxy_sharedMix_07D - MQTTv5 Busy share test with many subscribes-unsubscribes, nondurable.
 1  testproxy_sharedMix_06 - MQTTv5 Wildcard subscriptions for share subs.
 1  testproxy_sharedMix_05 - MQTTv5 Redelivery of in-flight msg on client disconnect.
 1  testproxy_sharedMix_04 - MQTTv5 Clients reconnecting and receiving after server restart - bigger test with multiple subs and more messages.
 1  testproxy_sharedMix_03 - MQTTv5 Clients reconnecting and receiving after server restart.
 1  testproxy_sharedMix_02 - MQTTv5 Basic test of mixed-durability sharedsubs - subscribing and messaging.
 1  testproxy_sharedMix_01 - MQTTv5 SharedMix - check different subs on different topics with same subname
 1  testproxy_retain02 - Test MQTT/WebSocket connect with Will topic, message and RETAIN
 1  testproxy_retain01 - Test MQTT/WebSocket connect with Will topicmessage and Qos=1
 1  testproxy_publishV5_06 - Test RETAIN and Message Expiry PAHO
 1  testproxy_publishV5_05 - Test Message Expiry PAHO
 1  testproxy_publishV5_04 - Test RETAIN, Durable Subs receive as NON_RETAIN
 1  testproxy_publishV5_03 - Test RETAIN, receive RETAIN and as NON_RETAIN
 1  testproxy_publishV5_02 - Test RETAIN replaced v5 publisher
 1  testproxy_publishV5_01 - Test RETAIN, simple scenario v5 publisher
 1  testproxy_publishV3_04 - Test RETAIN, Durable Subs receive as NON_RETAIN
 1  testproxy_publishV3_03 - Test RETAIN, receive RETAIN and as NON_RETAIN
 1  testproxy_publishV3_02 - Test RETAIN replaced v3 publisher
 1  testproxy_publishV3_01 - Test RETAIN, simple scenario v3 publisher
 1  testproxy_publish08 - Test RETAIN, if already subscribed/ durable, RETAIN flag should be off  +publish+/+ism-proxy_td-publishScenarios01.sh
 1  testproxy_publish07 - Test RETAIN, if already subscribed, RETAIN flag should be off  +publish+/+ism-proxy_td-publishScenarios01.sh
 1  testproxy_publish06 - Test RETAIN, second message replaces first  +publish+/+ism-proxy_td-publishScenarios01.sh
 1  testproxy_publish05 - Test RETAIN, simple scenario  +publish+/+ism-proxy_td-publishScenarios01.sh
 1  testproxy_mqttv5connect23 - More RETAINed messages tests [ testproxy_mqttv5connect23.xml ]  +mqttv5_connect+/+ism-proxy_td-mqttv5_connect-01.sh
 1  testproxy_mqttv5connect22 - Test that RETAINed messages are available after server fail/restart [ testproxy_mqttv5connect22.xml ]
 1  testproxy_mqttv5connect21 - Test that message in store are available after server fail/restart [ testproxy_mqttv5connect21.xml ]
 1  testproxy_mqttv5connect17 - Test MQTT connect with cleanSession, don*t receive stored msg
 1  testproxy_mqttv5connect16 - Test MQTT connect without cleanSession, receive stored msg
 1  testproxy_mqttv5connect15 - Test MQTT/WebSocket connect will topic longer than 60 characters
 1  testproxy_mqttv5connect14 - Test MQTT/WebSocket connect with Will topic, connect second client same clientId
 1  testproxy_mqttv5connect13 - Test MQTT/WebSocket connect with cleanSession=0
 1  testproxy_mqttv5connect12 - Test MQTT/WebSocket connect with Will topic, message (zero length)
 1  testproxy_mqttv5connect11 - Test MQTT/WebSocket connect with same clientId as already connected client
 1  testproxy_mqttv5connect10 - Test MQTT/WebSocket connect with Will topic, message and RETAIN
 1  testproxy_mqttv5connect09 - Test MQTT/WebSocket connect with Will topicmessage and Qos=2
 1  testproxy_mqttv5connect08 - Test MQTT/WebSocket connect with Will topicmessage and Qos=1
 1  testproxy_mqttv5connect07 - Test MQTT/WebSocket connect with Will topicmessage, publish close normally
 1  testproxy_mqttv5connect03 - Test MQTT/WebSocket connect valid user/password
 1  testproxy_mqttv5connect01 - Test MQTT/WebSocket connect to an IP address and port  +mqttv5_connect+/+ism-proxy_td-mqttv5_connect-01.sh
 1  testproxy_mqttv5_pubsub_03_durableSession - mqttv5 Pub Sub Receive
 1  testproxy_mqttv5_pubsub_02_nonDurable - mqttv5 Pub Sub Receive
 1  testproxy_mqttv5_clientSteal_05_durable - mqttv5 Pub Sub Receive PAHO MQTTv5
 1  testproxy_mqttv5_clientSteal_04_nonDurable - PAHO mqttv5 Pub Sub Receive with ClientId Steal
 1  testproxy_mqttv5_cleanstart_01 - mqttv5 connect cleanStart - ConnAck SessionPresent
 1  testproxy_mqttv5_14_GVT - MQTTv5 publish GVT user properties
 1  testproxy_mqttv5_14 - MQTTv5 publish user properties
 1  testproxy_mqttv5_13 - MQTTv5 publish many messages
 1  testproxy_mqttv5_12 - MQTTv5 Will delay - clientSteals and Clean Session
 1  testproxy_mqttv5_11 - MQTTv5 Will delay - create new connection before delay - no send
 1  testproxy_mqttv5_10 - MQTTv5 session expiry across server restart
 1  testproxy_mqttv5_09b - MQTTv5 Disconnect with rc=4 to publish will msg after delay
 1  testproxy_mqttv5_09 - MQTTv5 Disconnect with rc=4 to publish will msg after delay
 1  testproxy_mqttv5_08 - MQTTv5 Abnormal disconnect to send will message with will delay
 1  testproxy_mqttv5_07 - MQTTv5 Normal disconnect does not send will message with will delay
 1  testproxy_mqttv5_05 - mqttv5 session expiry with connection policy
 1  testproxy_mqttv5_04 - mqttv5 Connect, Disconnect with Expiry
 1  testproxy_mqttv5_02 - mqttv5 publish, subscribe, receive
 1  testproxy_mqttv5_01b - PAHO mqttv5 connect01b
 1  testproxy_mqttv5_01 - WS mqttv5 connect01
 1  testproxy_mqttv4_clientSteal_05_Durable - PAHO mqttv4 Pub Sub Receive with ClientId Steal
 1  testproxy_mqttv4_clientSteal_04_nonDurable - PAHO mqttv4 Pub Sub Receive with ClientId Steal
 1  testproxy_mqttV5_rc144 - Test rc144 TopicFilter
 1  testproxy_mqttV5_rc143 - Test rc143 TopicFilter
 1  testproxy_mqttV5_rc141 - Test rc139 Server Stopping
 1  testproxy_mqttV5_rc139 - Test rc139 Server Stopping
 1  testproxy_mqttV5_rc135 - Test rc135 Not Authorized
 1  testproxy_mqttV5_rc133 - Test rc133 Client Identified not valid
 1  testproxy_mqttV5_rc130 - Test rc130 Protocol Error
 1  testproxy_mqttV5_rc017 - Test rc017 No Subscription Existed
 1  testproxy_mqttV5_rc016 - Test rc016 No matching Subscribers
 1  testproxy_mqttV5_gvt06 - Test ability to connect with GVT characters E3 in user/password [ testproxy_mqttV5_gvt06.xml ]
 1  testproxy_mqttV5_gvt05 - Test ability to connect with GVT characters C4 in user/password [ testproxy_mqttV5_gvt05.xml ]
 1  testproxy_mqttV5_gvt03 - Test ability to connect with GVT characters in user/password [ testproxy_mqttV5_gvt03.xml ]
 1  testproxy_mqttV5_gvt02 - Test ability to connect over an SSL connection [ testproxy_mqttV5_gvt02.xml ]
 1  testproxy_mqttV5_gvt01 - Test ability use GVT characters in topic and ClientID [ testproxy_mqttV5_gvt01.xml ]
 1  testproxy_mqttV3_rc143 - Test rc143 TopicFilter
 1  testproxy_monitor04_MultiProxyConnDisconn - Test rapid connects/disconnects of the same client ID between two proxies
 1  testproxy_monitor03_MultiProxyStealCID - Test steals of the same client ID between two proxies  +monitor+/+ism-proxy_td-monitorScenarios01.sh
 1  testproxy_monitor02 - Connect through tenant requiring user/password, test that no user/password fails, test that tenant name is properly added in topic sent on to MessageSight, test that tenant not in cfg files fails
 1  testproxy_monitor01 - Connect through tenant requiring user/password, test that no user/password fails, test that tenant name is properly added in topic sent on to MessageSight
 1  testproxy_dynamic05 - Test that dynamic authentication can access IP of client
 1  testproxy_dynamic04 - Test that dynamic authentication can fail connect
 1  testproxy_dynamic03 - Test that dynamic authentication with simultaneous requests
 1  testproxy_dynamic02 - Test that dynamic authentication does add to normal
 1  testproxy_dynamic01 - Test that dynamic authentication doesn*t override normal
 1  testproxy_connect23 - More RETAINed messages tests [ testproxy_connect23.xml ]
 1  testproxy_connect22 - Test that RETAINed messages are available after server fail/restart [ testproxy_connect22.xml ]
 1  testproxy_connect21 - Test that message in store are available after server fail/restart [ testproxy_connect21.xml ]
 1  testproxy_connect17 - Test MQTT connect with cleanSession, don*t receive stored msg
 1  testproxy_connect16 - Test MQTT connect without cleanSession, receive stored msg
 1  testproxy_connect15 - Test MQTT/WebSocket connect will topic longer than 60 characters
 1  testproxy_connect14 - Test MQTT/WebSocket connect with Will topic, connect second client same clientId
 1  testproxy_connect13 - Test MQTT/WebSocket connect with cleanSession=0
 1  testproxy_connect12 - Test MQTT/WebSocket connect with Will topic, message (zero length)
 1  testproxy_connect11 - Test MQTT/WebSocket connect with same clientId as already connected client
 1  testproxy_connect10 - Test MQTT/WebSocket connect with Will topic, message and RETAIN
 1  testproxy_connect09 - Test MQTT/WebSocket connect with Will topicmessage and Qos=2
 1  testproxy_connect08 - Test MQTT/WebSocket connect with Will topicmessage and Qos=1
 1  testproxy_connect07 - Test MQTT/WebSocket connect with Will topicmessage, publish close normally
 1  testproxy_connect04 - Test MQTT/WebSocket connect invalid user/password
 1  testproxy_connect03 - Test MQTT/WebSocket connect valid user/password  +connect+/+ism-proxy_td-connectScenarios01.sh
 1  testproxy_connect01 - Test MQTT/WebSocket connect to an IP address and port  +connect+/+ism-proxy_td-connectScenarios01.sh
 1  testproxy_WSmqttv5_clientSteal_05_durable - mqttv5 Pub Sub Receive WebSocket MQTTv5
 1  testproxy_WSmqttv5_clientSteal_04_nonDurable - WEBSOCKET mqttv5 Pub Sub Receive with ClientId Steal
 1  testproxy_WSmqttV5_rc143 - Test rc143 TopicFilter
 1  testproxyV5_MPSwRC - Test MQTTv5 MaxPacketSz exceeded with ReasonCode
 1  testplugin_subscribe15 - Test MQTT/WebSocket subscribe to long topic (<32767 characters)
 1  testmqtt_clusterCLI_008a - TLS Enabled. pub to 2 rcv on 1
 1  testmqtt_NDS_03_MixedQoS - Non-Durable Shared Subscription at QoS=1&2, Busy test with lots of Subscribes and Unsubscribes
 1  testmqtt_HA05 - Test admin objects are properly rolled over [ testmqtt_HA05.xml ]
 1  testWSproxy_publishV5_06 - Test RETAIN and Message Expiry WebSockets
 1  testWSproxy_publishV5_05 - Test Message Expiry WebSockets
 1  proxymqttV5_sharedSub_SubId - Test @SharedSubscriptions (w-w/o WCs) with SubIDs
 1  proxymqttV5_publishV3_SubUpV5 - MQTTv3 SUB upgrade v3 to V5 Sub
 1  proxymqttV5_publishV3_PubUpV5 - MQTTv3 PUB upgrade v3 to V5 Pub
 1  proxy_mqttV5_unsubscribe_UP - Test MQTTv5 Unsubscribe Properties User Property
 1  proxy_mqttV5_subscribe_UP - Test MQTTv5 Subscribe Properties User Property
 1  proxy_mqttV5_subOptions_RetainHandling - Test MQTTv5 Subscribe Options - RetainHandling
 1  proxy_mqttV5_subOptions_RetainAsPub_share - Test MQTTv5 Subscribe Options RetainAsPublish on Shared Subscription
 1  proxy_mqttV5_subOptions_RetainAsPub - Test MQTTv5 Subscribe Options RetainAsPublish
 1  proxy_mqttV5_subOptions_NoLocal - Test MQTTv5 Subscribe Options - No Local
 1  proxy_mqttV5_subOptionsError_RetainHandling - Test MQTTv5 Subscribe Options - RetainHandling Errors
 1  proxy_mqttV5_subOptionsError_NoLocal - Test MQTTv5 Subscribe Options Errors with No Local
 1  proxy_mqttV5_publish_UP - Test MQTTv5 Publish Properties UserProperty
 1  proxy_mqttV5_publish_TA - Test MQTTv5 Publish Properties TopicAlias
 1  proxy_mqttV5_publish_SI - Test MQTTv5 Publish Properties SubscriptionIdentifier
 1  proxy_mqttV5_publish_RT - Test MQTTv5 Publish Properties ResponseTopic
 1  proxy_mqttV5_publish_PFI - Test MQTTv5 Publish Properties Payload Format Indicator
 1  proxy_mqttV5_publish_MEI - Test MQTTv5 Publish Properties Message Expiry Interval
 1  proxy_mqttV5_publish_CT - Test MQTTv5 Publish Properties ContentType
 1  proxy_mqttV5_publish_CD - Test MQTTv5 Publish Properties CorrelationData
 1  proxy_mqttV5_pubPropError_TA - Test MQTTv5 Publish Properties TopicAlias Errors
 1  proxy_mqttV5_pubPropError_SI - Test MQTTv5 Publish Properties SubscriptionIdentifiers Errors
 1  proxy_mqttV5_pubPropError_PFI - Test MQTTv5 Publish Properties Payload Format Indicator
 1  proxy_mqttV5_connect_SEI - Test MQTTv5 CONNECT Properties Session Expiry Interval
 1  proxy_mqttV5_connect_KeepAlive - Test MQTTv5 CONNECT Properties Keep Alive
 1  proxyACL_Undeliverable_mixedQoS - ACLs lost on Reboot, allows Undeliverable QoS:0 msgs to be Acked IoT Tracker ISSUE 1285
 1  proxyACL_Undeliverable.v5 - (MQTTv5) ACLs lost on Reboot, allows Undeliverable msgs to be Queued IoT Tracker ISSUE 1285
 1  proxyACL_Undeliverable - ACLs lost on Reboot, allows Undeliverable msgs to be Queued IoT Tracker ISSUE 1285
 1  proxyACL_Recovery - Test Recovery after Message Sight Restart  +AAAgateway+/+ism-AAAgateway01.sh
 1  proxyACL_InGroup - Test RETAIN, Durable WildCard
 1  proxyACL_ErrorPath - Error Paths of AClfile  +AAAgateway+/+ism-AAAgateway01.sh
 1  mqtt_AdminDynamic_M1_LDAP_cleanup - disable and clean LDAP on M1
 1  mqttV5_subOptions_RetainAsPub_share - Test MQTTv5 Subscribe Options RetainAsPublish on
 1  mqtt HAScenarios03: Server stopped running during execution.
 1  jms_HA_oauth_002 - HA OAuth 002
 1  jms_HA_oauth_001 - HA OAuth 001
 1  jca_xa_1001 - DB2 sanity check - A simple DB2 local transaction
 1  jca_ha_005 - JCA HA 005
 1  jca_ha_003 - JCA HA 003
 1  jca_ha_002 - JCA HA 002
 1  jca_ha_001 - JCA HA 001
 1  configSetAndGet - Verify proxy config tests passed
 1  cleanup_confirmDisconnect - Kill the proxy and confirm final retained message is disconnect  +monitor+/+ism-proxy_td-monitorScenarios01.sh
 1  bridge.SimpleA1EventStreams - Test Simple Pub-Fwd-Recv through Bridge  bridge_tests/plain/ism-Bridge-Plain01.sh
 1  SNMP_verify_harole_info - Verify HARole Information RC=1
 1  SNMP_verify_harole_info - Verify HARole Information
 1  SNMP_verify_General_info - Verify General Information
 1  SNMP_settest_info - Set SNMP Values
 1  SNMP_Cleanup_001 - Test 1 - Policy Cleanup for IMAServer objects
 1  MqttXrscadaTest15 - SDP_PROTOCOL_PACKED
 1  MQ_CON_BOUNDARIES_04 - com.ibm.ima.mqcon.boundaries MQTT messages are published to a topic which is associated with a destination mapping rule in order to check that the max messages value is being enforced
 1  MQ_CON_BOUNDARIES_01 - com.ibm.ima.mqcon.boundaries MQTT messages are published to a topic which is associated with a destination mapping rule in order to check that the max messages value is being enforced
 1  MQTTv5 Connect via Proxy and TestDriver: Server stopped running during execution.
 1  JCA Setup Objects - 00: 10.73.131.248 A1:Server may not be running. service/status returned RC=7
 1  JCA Setup Objects - 00: 10.73.131.195 A1:Server may not be running. service/status returned RC=7
 1  JCA HA Tests - 00: Server stopped running during execution.
 1  ISM MQTT via WSTestDriver: Server stopped running during execution.
 1  HA_teardown - Configure HA

==========================================================================================================================================
================================================== Summary of Individual Test Runs =======================================================
==========================================================================================================================================
ismClient           A1TF7cciRHD01g A2TF7cciCOD03g M1TF7fvt13g M2TF7fvt14g                           Passed: 48    Failed: 0
ismClient           A1TF7cciRHD06g A2TF7cciCOD02g M1TF7fvt11g M2TF7fvt12g                           Passed: 167   Failed: 22
  "HA_jms_td_tests" FAILED:
      FAILED: Scenario 14 - jms_HA_oauth_001 - HA OAuth 001
      FAILED: Scenario 16 - jms_HA_oauth_002 - HA OAuth 002
  "HA_mqtt_td_tests" FAILED:
      FAILED: Scenario 1 - testmqtt_HA05 - Test admin objects are properly rolled over [ testmqtt_HA05.xml ]
      FAILED: runScenarios - mqtt HAScenarios03: Server stopped running during execution.
  "HA_jca_tests" FAILED:
      FAILED: Scenario 0 - jca_retained_001 - JCA retained 001
      FAILED: Scenario 2 - jca_topic_001 - JCA topic 001
      FAILED: Scenario 3 - jca_topic_002 - JCA topic 002
      FAILED: Scenario 5 - jca_queue_001 - JCA queue 001
      FAILED: Scenario 6 - jca_shared_001 - JCA shared 001 - nondurable shared subscription without a clientid
      FAILED: Scenario 7 - jca_shared_002 - JCA shared 002 - nondurable shared subscription with a clientid
      FAILED: Scenario 8 - jca_shared_003 - JCA shared 003 - durable shared subscription without a clientid
      FAILED: Scenario 9 - jca_shared_004 - JCA shared 004 - durable shared subscription with a clientid
      FAILED: Scenario 10 - jca_jndi_topic - JCA JNDI Topic
      FAILED: Scenario 11 - jca_jndi_queue - JCA JNDI Queue
      FAILED: Scenario 13 - jca_api_001 - JCA api 001 - Test various JMS API*s in the RA environment
      FAILED: Scenario 1 - jca_ha_001 - JCA HA 001
      FAILED: Scenario 2 - jca_ha_002 - JCA HA 002
      FAILED: Scenario 3 - jca_ha_003 - JCA HA 003
      FAILED: Scenario 4 - jca_ha_005 - JCA HA 005
      FAILED: Scenario 5 - mqtt_AdminDynamic_M1_LDAP_cleanup - disable and clean LDAP on M1
      FAILED: Scenario 0 - HA_teardown - Configure HA
      FAILED: runScenarios - JCA HA Tests - 00: Server stopped running during execution.

ismClient           A1TF7cciCOD04g A2TF7cciCOD07g A3TF7cciRHD07g A4TF7cciRHD02g A5TF7cciRHD03g M1TF7fvt15g M2TF7fvt16g Passed: 170   Failed: 1
  "CLSTLG_cluster_tests" FAILED:
      FAILED: Scenario 29 - testmqtt_clusterCLI_008a - TLS Enabled. pub to 2 rcv on 1

ismClient           A1TF7cciCOR06g A2TF7cciCOR07g A3TF7cciCOR14g A4TF7cciCOR15g M1TF7fvt25g M2TF7fvt26g B1TF7bridge05g B2TF7bridge06g P1TF7proxy07g P2TF7proxy06g Passed: 145   Failed: 221
  "BRIDGE_bridge_tests" FAILED:
      FAILED: Scenario 1 - bridge.SimpleA1A2 - Test Simple Pub-Fwd-Recv through Bridge  bridge_tests/plain/ism-Bridge-Plain01.sh
      FAILED: Scenario 1 - bridgePx.SimpleA1A2 - Test Simple Pub-Fwd-Recv through Bridge   bridge_tests/proxy/ism-Bridge-Proxy01.sh
      FAILED: Scenario 3 - bridgePx.MultiFWD_V3Source - Test Multile Forwarders with V3 Source Bridge   bridge_tests/proxy/ism-Bridge-Proxy01.sh
      FAILED: Scenario 5 - bridgePx.MaxFWDTopics - Test Max Forwarder Topics Bridge   bridge_tests/proxy/ism-Bridge-Proxy01.sh
  "BRIDGE_bridge_tests" FAILED:
      FAILED: Scenario 1 - bridge.SimpleA1A2 - Test Simple Pub-Fwd-Recv through Bridge  bridge_tests/plain/ism-Bridge-Plain01.sh
      FAILED: Scenario 1 - bridgePx.SimpleA1A2 - Test Simple Pub-Fwd-Recv through Bridge   bridge_tests/proxy/ism-Bridge-Proxy01.sh
      FAILED: Scenario 3 - bridgePx.MultiFWD_V3Source - Test Multile Forwarders with V3 Source Bridge   bridge_tests/proxy/ism-Bridge-Proxy01.sh
      FAILED: Scenario 5 - bridgePx.MaxFWDTopics - Test Max Forwarder Topics Bridge   bridge_tests/proxy/ism-Bridge-Proxy01.sh
      FAILED: Scenario 1 - bridge.SimpleA1EventStreams - Test Simple Pub-Fwd-Recv through Bridge  bridge_tests/plain/ism-Bridge-Plain01.sh
  "proxy_tests" FAILED:
      FAILED: Scenario 2 - testproxy_connect01 - Test MQTT/WebSocket connect to an IP address and port  +connect+/+ism-proxy_td-connectScenarios01.sh
      FAILED: Scenario 3 - testproxy_connect03 - Test MQTT/WebSocket connect valid user/password  +connect+/+ism-proxy_td-connectScenarios01.sh
      FAILED: Scenario 4 - testproxy_connect04 - Test MQTT/WebSocket connect invalid user/password
      FAILED: Scenario 5 - testproxy_connect07 - Test MQTT/WebSocket connect with Will topicmessage, publish close normally
      FAILED: Scenario 6 - testproxy_connect08 - Test MQTT/WebSocket connect with Will topicmessage and Qos=1
      FAILED: Scenario 7 - testproxy_connect09 - Test MQTT/WebSocket connect with Will topicmessage and Qos=2
      FAILED: Scenario 8 - testproxy_connect10 - Test MQTT/WebSocket connect with Will topic, message and RETAIN
      FAILED: Scenario 9 - testproxy_connect11 - Test MQTT/WebSocket connect with same clientId as already connected client
      FAILED: Scenario 10 - testproxy_connect12 - Test MQTT/WebSocket connect with Will topic, message (zero length)
      FAILED: Scenario 11 - testproxy_connect13 - Test MQTT/WebSocket connect with cleanSession=0
      FAILED: Scenario 12 - testproxy_connect14 - Test MQTT/WebSocket connect with Will topic, connect second client same clientId
      FAILED: Scenario 13 - testproxy_connect15 - Test MQTT/WebSocket connect will topic longer than 60 characters
      FAILED: Scenario 14 - testproxy_connect16 - Test MQTT connect without cleanSession, receive stored msg
      FAILED: Scenario 15 - testproxy_connect17 - Test MQTT connect with cleanSession, don*t receive stored msg
      FAILED: Scenario 16 - testproxy_connect21 - Test that message in store are available after server fail/restart [ testproxy_connect21.xml ]
      FAILED: Scenario 17 - testproxy_connect22 - Test that RETAINed messages are available after server fail/restart [ testproxy_connect22.xml ]
      FAILED: Scenario 18 - testproxy_connect23 - More RETAINed messages tests [ testproxy_connect23.xml ]
      FAILED: runScenarios - ISM MQTT via WSTestDriver: Server stopped running during execution.
      FAILED: Scenario 1 - testproxy_subscribe01 - Test MQTT/WebSocket subscribe to *#*
      FAILED: Scenario 2 - testproxy_subscribe02 - Test MQTT/WebSocket subscribe to *a/b/c*
      FAILED: Scenario 3 - testproxy_subscribe03 - Test MQTT/WebSocket subscribe to *a/#*
      FAILED: Scenario 4 - testproxy_subscribe04 - Test MQTT/WebSocket subscribe to *a/+/c*
      FAILED: Scenario 5 - testproxy_subscribe05 - Test MQTT/WebSocket subscribe to 50 level topic
      FAILED: Scenario 6 - testproxy_subscribe06 - Test MQTT/WebSocket subscribe to *a/b/c* with QoS=1
      FAILED: Scenario 7 - testproxy_subscribe07 - Test MQTT/WebSocket subscribe to *a/b/c* with QoS=2
      FAILED: Scenario 8 - testproxy_subscribe08 - Test MQTT/WebSocket subscribe to *a/b/c* and *a/b/d*
      FAILED: Scenario 9 - testproxy_subscribe09 - Test MQTT/WebSocket subscribe to *a/b/c* with QoS=1 and *a/b/d* with QoS=0
      FAILED: Scenario 10 - testproxy_subscribe10 - Test MQTT/WebSocket subscribe to *a/b/c* and *a/b/+*, make sure a/b/c messages are not delivered twice
      FAILED: Scenario 11 - testproxy_subscribe11 - Test MQTT/WebSocket subscribe to *a/b/c* QoS=0
      FAILED: Scenario 12 - testproxy_subscribe13 - Test MQTT/WebSocket subscribe to *a/b/c* QoS=0 publish QoS=1 and Qos=2
      FAILED: Scenario 13 - testproxy_subscribe14 - Test MQTT/WebSocket subscribe to long topic (<32767 characters)
      FAILED: Scenario 14 - testproxy_subscribe15 - Test MQTT/WebSocket subscribe to long topic (<32767 characters)
      FAILED: Scenario 15 - testproxy_subscribe16 - Test MQTT/WebSocket subscribe send 1600 messages on each of two topics
      FAILED: Scenario 16 - testproxy_subscribe17 - Test MQTT 1)Subscribe to same specific topic twice, should only receive messages once
      FAILED: Scenario 17 - testproxy_subscribe20 - Test MQTT test subscribe to +
      FAILED: Scenario 18 - testproxy_subscribe21 - Test MQTT test subscribe, close, subscribe
      FAILED: Scenario 19 - testproxy_subscribe22 - Test MQTT test subscribe to /a/c/+
      FAILED: Scenario 20 - testproxy_subscribe23 - Test publish and receive with 0 length message
      FAILED: Scenario 1 - testproxy_publish05 - Test RETAIN, simple scenario  +publish+/+ism-proxy_td-publishScenarios01.sh
      FAILED: Scenario 2 - testproxy_publish06 - Test RETAIN, second message replaces first  +publish+/+ism-proxy_td-publishScenarios01.sh
      FAILED: Scenario 3 - testproxy_publish07 - Test RETAIN, if already subscribed, RETAIN flag should be off  +publish+/+ism-proxy_td-publishScenarios01.sh
      FAILED: Scenario 4 - testproxy_publish08 - Test RETAIN, if already subscribed/ durable, RETAIN flag should be off  +publish+/+ism-proxy_td-publishScenarios01.sh
      FAILED: Scenario 1 - testproxy_monitor01 - Connect through tenant requiring user/password, test that no user/password fails, test that tenant name is properly added in topic sent on to MessageSight
      FAILED: Scenario 2 - testproxy_monitor02 - Connect through tenant requiring user/password, test that no user/password fails, test that tenant name is properly added in topic sent on to MessageSight, test that tenant not in cfg files fails
      FAILED: Scenario 3 - testproxy_monitor03_MultiProxyStealCID - Test steals of the same client ID between two proxies  +monitor+/+ism-proxy_td-monitorScenarios01.sh
      FAILED: Scenario 4 - testproxy_monitor04_MultiProxyConnDisconn - Test rapid connects/disconnects of the same client ID between two proxies
      FAILED: Scenario 5 - cleanup_confirmDisconnect - Kill the proxy and confirm final retained message is disconnect  +monitor+/+ism-proxy_td-monitorScenarios01.sh
      FAILED: Scenario 1 - testproxy_retain01 - Test MQTT/WebSocket connect with Will topicmessage and Qos=1
      FAILED: Scenario 2 - testproxy_retain02 - Test MQTT/WebSocket connect with Will topic, message and RETAIN
      FAILED: Scenario 2 - configSetAndGet - Verify proxy config tests passed
      FAILED: Scenario 2 - testproxy_tenant01-iot2 - Connect a device on IoT2 requiring user/password, test that no user/password fails, test that org name is properly added in topic sent on to MessageSight
      FAILED: Scenario 3 - testproxy_tenant02-iot2 - Connect an application on IoT2 requiring user/password, test that tenant name is properly added in topic sent on to MessageSight, test that tenant not in cfg files fails
      FAILED: Scenario 4 - testproxy_tenant03-quickstart2 - Connect a device on Quickstart2 requiring no user/password, test that tenant name is properly added in topic sent on to MessageSight
      FAILED: Scenario 5 - testproxy_tenant04-quickstart2 - Connect an application on Quickstart2 requiring no user/password, test that tenant name is properly added in topic sent on to MessageSight
      FAILED: Scenario 6 - testproxy_tenant05-quickstart2 - Connect application and device on quickstart2, only device publish and only application subscribe
      FAILED: Scenario 7 - testproxy_tenant06-quickstart2 - Connect application quickstart2, check QuickStart Rules
      FAILED: Scenario 8 - testproxy_tenant07-iot2 - Connect device on iot2, check Registered Org rules
      FAILED: Scenario 1 - testproxy_dynamic01 - Test that dynamic authentication doesn*t override normal
      FAILED: Scenario 2 - testproxy_dynamic02 - Test that dynamic authentication does add to normal
      FAILED: Scenario 3 - testproxy_dynamic03 - Test that dynamic authentication with simultaneous requests
      FAILED: Scenario 4 - testproxy_dynamic04 - Test that dynamic authentication can fail connect
      FAILED: Scenario 5 - testproxy_dynamic05 - Test that dynamic authentication can access IP of client
      FAILED: Scenario 1 - MqttXrscadaTest15 - SDP_PROTOCOL_PACKED
      FAILED: Scenario 3 - proxyACL_InGroup - Test RETAIN, Durable WildCard
      FAILED: Scenario 4 - proxyACL_Recovery - Test Recovery after Message Sight Restart  +AAAgateway+/+ism-AAAgateway01.sh
      FAILED: Scenario 5 - proxyACL_ErrorPath - Error Paths of AClfile  +AAAgateway+/+ism-AAAgateway01.sh
      FAILED: Scenario 6 - proxyACL_Undeliverable - ACLs lost on Reboot, allows Undeliverable msgs to be Queued IoT Tracker ISSUE 1285
      FAILED: Scenario 7 - proxyACL_Undeliverable_mixedQoS - ACLs lost on Reboot, allows Undeliverable QoS:0 msgs to be Acked IoT Tracker ISSUE 1285
      FAILED: Scenario 8 - proxyACL_Undeliverable.v5 - (MQTTv5) ACLs lost on Reboot, allows Undeliverable msgs to be Queued IoT Tracker ISSUE 1285
      FAILED: Scenario 1 - testproxy_tls01_NoStore - Test ability to connect to Proxy TLS port with no store and self signed server cert - conn should fail [ testproxy_tls01_NoStore.xml ]
      FAILED: Scenario 2 - testproxy_tls02_WrongStore - Test ability to connect to Proxy TLS port with wrong cert in store for self signed server cert - conn should fail [ testproxy_tls02_WrongStore.xml ]
      FAILED: Scenario 3 - testproxy_tls03_MqttsEpStore - Test ability to connect to Proxy TLS port [ testproxy_tls03_MqttsEpStore.xml ]
      FAILED: Scenario 4 - testproxy_tls04_MqttsEpStore_WithUser - Test ability to connect to Proxy TLS port with a user [ testproxy_tls04_MqttsEpStore_WithUser.xml ]
      FAILED: Scenario 1 - testproxy_tls01_NoTLS - Test that non-TLS connections succeed for SGEnabled=true configuration [ testproxy_tls01_NoTLS.xml ]
      FAILED: Scenario 3 - testproxy_tls03_MqttsEpStore - Test TLS connections succeed for SGEnabled=true config when client cert store contains mqtts ep cert only [ testproxy_tls03_MqttsEpStore.xml ]
      FAILED: Scenario 5 - testproxy_tls05_ProxyDfltStore_CltCrtNoMatch - Test TLS connections succeed for SGEnabled=true config when client cert store contains dflt proxy cert and non-matching client cert. Also test connections fail when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls05_ProxyDfltStore_CltCrtNoMatch.xml ]
      FAILED: Scenario 6 - testproxy_tls06_ProxyDfltStore_CltCrtPartialMatchd - Test TLS connections succeed for SGEnabled=true config when client cert store contains dflt proxy cert and CN partial matching client cert. Also test connections succeed when partial match betw CN/SAN & clientId is required and fails when exact match is required. [ testproxy_tls06_ProxyDfltStore_CltCrtPartialMatchd.xml ]
      FAILED: Scenario 7 - testproxy_tls07_ProxyDfltStore_CltCrtExactMatchd - Test TLS connections succeed for SGEnabled=true config when client cert store contains dflt proxy cert and SAN exact matching client cert. Also check that connections succeed when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls07_ProxyDfltStore_CltCrtExactMatchd.xml ]
      FAILED: Scenario 8 - testproxy_tls08_ProxyDfltStore_CltCrtPartialMatchg - Test TLS connections succeed for SGEnabled=true config when client cert store contains dflt proxy cert and SAN partial matching client cert. Also check that connections succeed when partial match betw CN/SAN & clientId is required and failes when exact match is required. [ testproxy_tls08_ProxyDfltStore_CltCrtPartialMatchg.xml ]
      FAILED: Scenario 9 - testproxy_tls09_ProxyDfltStore_CltCrtExactMatchg - Test TLS connections succeed for SGEnabled=false config when client cert store contains dflt proxy cert and CN exact matching client cert. Also check that connections succeed when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls09_ProxyDfltStore_CltCrtExactMatchg.xml ]
      FAILED: Scenario 2 - testproxy_tls02s_OrgSrvStore - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert only [ testproxy_tls02s_OrgSrvStore.xml ]
      FAILED: Scenario 3 - testproxy_tls03s_OrgSrvStore_CltCrtNoMatch - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert and non-matching client cert. Also check that connections fail when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls03s_OrgSrvStore_CltCrtNoMatch.xml ]
      FAILED: Scenario 4 - testproxy_tls04s_OrgSrvStore_CltCrtPartialMatchd - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert and client cert CN partially matches client ID. Also check that connection succeeds when partial match betw CN/SAN & clientId is required and fails when exact match is required. [ testproxy_tls04s_OrgSrvStore_CltCrtPartialMatchd.xml ]
      FAILED: Scenario 5 - testproxy_tls05s_OrgSrvStore_CltCrtExactMatchd - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert and client cert SAN exactly matches client ID. Also check that connection succeeds when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls05s_OrgSrvStore_CltCrtExactMatchd.xml ]
      FAILED: Scenario 6 - testproxy_tls06s_OrgSrvStore_CltCrtPartialMatchg - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert and client cert SAN partially matches client ID. Also check that connection succeeds when partial match betw CN/SAN & clientId is required and fails when exact match is required. [ testproxy_tls06s_OrgSrvStore_CltCrtPartialMatchg.xml ]
      FAILED: Scenario 7 - testproxy_tls07s_OrgSrvStore_CltCrtExactMatchg - Test TLS connections succeed for SGEnabled=true config with org server cert when client cert store contains org server cert and client cert CN exactly matches client ID. Also check that connection succeeds when partial or exact match betw CN/SAN & clientId is required. [ testproxy_tls07s_OrgSrvStore_CltCrtExactMatchg.xml ]
      FAILED: Scenario 6 - testproxy_tls06_ProxyDfltStore_CltCrtPartialMatchd - Test TLS connections succeed for SGEnabled=false config when client cert store contains dflt proxy cert and client cert CN partially matches client ID [ testproxy_tls06_ProxyDfltStore_CltCrtPartialMatchd.xml ]
      FAILED: Scenario 7 - testproxy_tls07_ProxyDfltStore_CltCrtExactMatchd - Test TLS connections succeed for SGEnabled=false config when client cert store contains dflt proxy cert and client cert SAN exactly matches client ID [ testproxy_tls07_ProxyDfltStore_CltCrtExactMatchd.xml ]
      FAILED: Scenario 8 - testproxy_tls08_ProxyDfltStore_CltCrtPartialMatchg - Test TLS connections succeed for SGEnabled=false config when client cert store contains dflt proxy cert and client cert SAN partially matches client ID [ testproxy_tls08_ProxyDfltStore_CltCrtPartialMatchg.xml ]
      FAILED: Scenario 9 - testproxy_tls09_ProxyDfltStore_CltCrtExactMatchg - Test TLS connections succeed for SGEnabled=false config when client cert store contains dflt proxy cert and client cert CN exactly matches client ID [ testproxy_tls09_ProxyDfltStore_CltCrtExactMatchg.xml ]
      FAILED: Scenario 4 - testproxy_tls04s_OrgSrvStore_CltCrtPartialMatchd - Test TLS connections succeed for SGEnabled=false config with org server cert when client cert store contains dflt proxy cert and client cert CN partially matches client ID [ testproxy_tls04s_OrgSrvStore_CltCrtPartialMatchd.xml ]
      FAILED: Scenario 5 - testproxy_tls05s_OrgSrvStore_CltCrtExactMatchd - Test TLS connections succeed for SGEnabled=false config with org server cert when client cert store contains dflt proxy cert and client cert SAN exactly matches client ID [ testproxy_tls05s_OrgSrvStore_CltCrtExactMatchd.xml ]
      FAILED: Scenario 6 - testproxy_tls06s_OrgSrvStore_CltCrtPartialMatchg - Test TLS connections succeed for SGEnabled=false config with org server cert when client cert store contains dflt proxy cert and client cert SAN partially matches client ID [ testproxy_tls06s_OrgSrvStore_CltCrtPartialMatchg.xml ]
      FAILED: Scenario 7 - testproxy_tls07s_OrgSrvStore_CltCrtExactMatchg - Test TLS connections succeed for SGEnabled=false config with org server cert when client cert store contains dflt proxy cert and client cert CN exactly matches client ID [ testproxy_tls07s_OrgSrvStore_CltCrtExactMatchg.xml ]
      FAILED: Scenario 5 - testproxy_tls05b_ClientCertEmptyCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty CRL (cert 2 of 3) [ testproxy_tls05b_ClientCertEmptyCRL.xml ]
      FAILED: Scenario 6 - testproxy_tls05c_ClientCertEmptyCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty CRL (cert 3 of 3) [ testproxy_tls05c_ClientCertEmptyCRL.xml ]
      FAILED: Scenario 7 - testproxy_tls05a_ClientCertEmptyCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty CRL (cert 1 of 3) [ testproxy_tls05a_ClientCertEmptyCRL.xml ]
      FAILED: Scenario 10 - testproxy_tls06c_ClientCert2CrtsInCRL - Test ability to connect to Proxy TLS port using client certificate authentication with CRL and 2 reovoked certs - conn for non-revoked cert should succeed [ testproxy_tls06c_ClientCert2CrtsInCRL.xml ]
      FAILED: Scenario 11 - testproxy_tls07a_ClientCertEmptyDERCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty DER format CRL (cert 1 of 3) [ testproxy_tls07a_ClientCertEmptyDERCRL.xml ]
      FAILED: Scenario 12 - testproxy_tls07b_ClientCertEmptyDERCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty DER format CRL (cert 2 of 3) [ testproxy_tls07b_ClientCertEmptyDERCRL.xml ]
      FAILED: Scenario 13 - testproxy_tls07c_ClientCertEmptyDERCRL - Test ability to connect to Proxy TLS port using client certificate authentication and empty DER format CRL (cert 3 of 3) [ testproxy_tls07c_ClientCertEmptyDERCRL.xml ]
      FAILED: Scenario 15 - testproxy_tls08b_ClientCert1CrtInDERCRL - Test ability to connect to Proxy TLS port using client certificate authentication with DER format CRL and 1 reovoked cert - conn should succeed for cert that is not revoked [ testproxy_tls08b_ClientCert1CrtInDERCRL.xml ]
      FAILED: Scenario 16 - testproxy_tls08c_ClientCert1CrtInDERCRL - Test ability to connect to Proxy TLS port using client certificate authentication with DER format CRL and 1 reovoked cert - conn should succeed for cert that is not revoked [ testproxy_tls08c_ClientCert1CrtInDERCRL.xml ]
      FAILED: Scenario 2 - testproxy_mqttv5_01 - WS mqttv5 connect01
      FAILED: Scenario 3 - testproxy_mqttv5_01b - PAHO mqttv5 connect01b
      FAILED: Scenario 4 - testproxy_mqttv5_02 - mqttv5 publish, subscribe, receive
      FAILED: Scenario 5 - testproxy_mqttv5_04 - mqttv5 Connect, Disconnect with Expiry
      FAILED: Scenario 6 - testproxy_mqttv5_05 - mqttv5 session expiry with connection policy
      FAILED: Scenario 7 - testproxy_mqttv5_07 - MQTTv5 Normal disconnect does not send will message with will delay
      FAILED: Scenario 8 - testproxy_mqttv5_08 - MQTTv5 Abnormal disconnect to send will message with will delay
      FAILED: Scenario 9 - testproxy_mqttv5_09 - MQTTv5 Disconnect with rc=4 to publish will msg after delay
      FAILED: Scenario 10 - testproxy_mqttv5_09b - MQTTv5 Disconnect with rc=4 to publish will msg after delay
      FAILED: Scenario 11 - testproxy_mqttv5_10 - MQTTv5 session expiry across server restart
      FAILED: Scenario 12 - testproxy_mqttv5_11 - MQTTv5 Will delay - create new connection before delay - no send
      FAILED: Scenario 13 - testproxy_mqttv5_12 - MQTTv5 Will delay - clientSteals and Clean Session
      FAILED: Scenario 14 - testproxy_mqttv5_13 - MQTTv5 publish many messages
      FAILED: Scenario 15 - testproxy_mqttv5_14 - MQTTv5 publish user properties
      FAILED: Scenario 16 - testproxy_mqttv5_14_GVT - MQTTv5 publish GVT user properties
      FAILED: Scenario 17 - testproxy_mqttV5_gvt01 - Test ability use GVT characters in topic and ClientID [ testproxy_mqttV5_gvt01.xml ]
      FAILED: Scenario 18 - testproxy_mqttV5_gvt02 - Test ability to connect over an SSL connection [ testproxy_mqttV5_gvt02.xml ]
      FAILED: Scenario 20 - testproxy_mqttV5_gvt03 - Test ability to connect with GVT characters in user/password [ testproxy_mqttV5_gvt03.xml ]
      FAILED: Scenario 21 - testproxy_mqttV5_gvt05 - Test ability to connect with GVT characters C4 in user/password [ testproxy_mqttV5_gvt05.xml ]
      FAILED: Scenario 22 - testproxy_mqttV5_gvt06 - Test ability to connect with GVT characters E3 in user/password [ testproxy_mqttV5_gvt06.xml ]
      FAILED: Scenario 1 - testproxy_mqttv5_cleanstart_01 - mqttv5 connect cleanStart - ConnAck SessionPresent
      FAILED: Scenario 2 - testproxy_mqttv5_pubsub_02_nonDurable - mqttv5 Pub Sub Receive 
      FAILED: Scenario 3 - testproxy_mqttv5_pubsub_03_durableSession - mqttv5 Pub Sub Receive 
      FAILED: Scenario 4 - testproxy_mqttv4_clientSteal_04_nonDurable - PAHO mqttv4 Pub Sub Receive with ClientId Steal
      FAILED: Scenario 5 - testproxy_mqttv4_clientSteal_05_Durable - PAHO mqttv4 Pub Sub Receive with ClientId Steal
      FAILED: Scenario 6 - testproxy_WSmqttv5_clientSteal_04_nonDurable - WEBSOCKET mqttv5 Pub Sub Receive with ClientId Steal 
      FAILED: Scenario 7 - testproxy_mqttv5_clientSteal_04_nonDurable - PAHO mqttv5 Pub Sub Receive with ClientId Steal 
      FAILED: Scenario 8 - testproxy_mqttv5_clientSteal_05_durable - mqttv5 Pub Sub Receive PAHO MQTTv5
      FAILED: Scenario 9 - testproxy_WSmqttv5_clientSteal_05_durable - mqttv5 Pub Sub Receive WebSocket MQTTv5
      FAILED: Scenario 2 - testproxy_mqttv5connect01 - Test MQTT/WebSocket connect to an IP address and port  +mqttv5_connect+/+ism-proxy_td-mqttv5_connect-01.sh
      FAILED: Scenario 3 - testproxy_mqttv5connect03 - Test MQTT/WebSocket connect valid user/password
      FAILED: Scenario 5 - testproxy_v5connect_MPS - Test MQTTV5 that we don*t exceed Maximum Packet Size specified by client
      FAILED: Scenario 6 - testproxy_mqttv5connect07 - Test MQTT/WebSocket connect with Will topicmessage, publish close normally
      FAILED: Scenario 7 - testproxy_mqttv5connect08 - Test MQTT/WebSocket connect with Will topicmessage and Qos=1
      FAILED: Scenario 8 - testproxy_mqttv5connect09 - Test MQTT/WebSocket connect with Will topicmessage and Qos=2
      FAILED: Scenario 9 - testproxy_mqttv5connect10 - Test MQTT/WebSocket connect with Will topic, message and RETAIN
      FAILED: Scenario 10 - testproxy_mqttv5connect11 - Test MQTT/WebSocket connect with same clientId as already connected client
      FAILED: Scenario 11 - testproxy_mqttv5connect12 - Test MQTT/WebSocket connect with Will topic, message (zero length)
      FAILED: Scenario 12 - testproxy_mqttv5connect13 - Test MQTT/WebSocket connect with cleanSession=0
      FAILED: Scenario 13 - testproxy_mqttv5connect14 - Test MQTT/WebSocket connect with Will topic, connect second client same clientId
      FAILED: Scenario 14 - testproxy_mqttv5connect15 - Test MQTT/WebSocket connect will topic longer than 60 characters
      FAILED: Scenario 15 - testproxy_mqttv5connect16 - Test MQTT connect without cleanSession, receive stored msg
      FAILED: Scenario 16 - testproxy_mqttv5connect17 - Test MQTT connect with cleanSession, don*t receive stored msg
      FAILED: Scenario 17 - testproxy_mqttv5connect21 - Test that message in store are available after server fail/restart [ testproxy_mqttv5connect21.xml ]
      FAILED: Scenario 18 - testproxy_mqttv5connect22 - Test that RETAINed messages are available after server fail/restart [ testproxy_mqttv5connect22.xml ]
      FAILED: Scenario 19 - testproxy_mqttv5connect23 - More RETAINed messages tests [ testproxy_mqttv5connect23.xml ]  +mqttv5_connect+/+ism-proxy_td-mqttv5_connect-01.sh
      FAILED: runScenarios - MQTTv5 Connect via Proxy and TestDriver: Server stopped running during execution.
      FAILED: Scenario 2 - proxy_mqttV5_connect_KeepAlive - Test MQTTv5 CONNECT Properties Keep Alive
      FAILED: Scenario 3 - proxy_mqttV5_connect_SEI - Test MQTTv5 CONNECT Properties Session Expiry Interval
      FAILED: Scenario 4 - proxy_mqttV5_publish_PFI - Test MQTTv5 Publish Properties Payload Format Indicator
      FAILED: Scenario 5 - proxy_mqttV5_publish_MEI - Test MQTTv5 Publish Properties Message Expiry Interval
      FAILED: Scenario 6 - proxy_mqttV5_publish_TA - Test MQTTv5 Publish Properties TopicAlias
      FAILED: Scenario 7 - proxy_mqttV5_publish_RT - Test MQTTv5 Publish Properties ResponseTopic
      FAILED: Scenario 8 - proxy_mqttV5_publish_CD - Test MQTTv5 Publish Properties CorrelationData
      FAILED: Scenario 9 - proxy_mqttV5_publish_UP - Test MQTTv5 Publish Properties UserProperty
      FAILED: Scenario 10 - proxy_mqttV5_publish_SI - Test MQTTv5 Publish Properties SubscriptionIdentifier
      FAILED: Scenario 11 - proxy_mqttV5_publish_CT - Test MQTTv5 Publish Properties ContentType
      FAILED: Scenario 12 - proxy_mqttV5_pubPropError_PFI - Test MQTTv5 Publish Properties Payload Format Indicator
      FAILED: Scenario 13 - proxy_mqttV5_pubPropError_TA - Test MQTTv5 Publish Properties TopicAlias Errors
      FAILED: Scenario 14 - proxy_mqttV5_pubPropError_SI - Test MQTTv5 Publish Properties SubscriptionIdentifiers Errors
      FAILED: Scenario 15 - proxy_mqttV5_subscribe_UP - Test MQTTv5 Subscribe Properties User Property
      FAILED: Scenario 16 - proxy_mqttV5_unsubscribe_UP - Test MQTTv5 Unsubscribe Properties User Property
      FAILED: Scenario 17 - proxy_mqttV5_subOptions_NoLocal - Test MQTTv5 Subscribe Options - No Local
      FAILED: Scenario 18 - proxy_mqttV5_subOptionsError_NoLocal - Test MQTTv5 Subscribe Options Errors with No Local
      FAILED: Scenario 19 - proxy_mqttV5_subOptions_RetainAsPub - Test MQTTv5 Subscribe Options RetainAsPublish
      FAILED: Scenario 20 - proxy_mqttV5_subOptions_RetainAsPub_share - Test MQTTv5 Subscribe Options RetainAsPublish on Shared Subscription
      FAILED: Scenario 21 - proxy_mqttV5_subOptions_RetainHandling - Test MQTTv5 Subscribe Options - RetainHandling
      FAILED: Scenario 22 - proxy_mqttV5_subOptionsError_RetainHandling - Test MQTTv5 Subscribe Options - RetainHandling Errors
      FAILED: Scenario 1 - testproxy_publishV3_01 - Test RETAIN, simple scenario v3 publisher
      FAILED: Scenario 2 - testproxy_publishV5_01 - Test RETAIN, simple scenario v5 publisher
      FAILED: Scenario 3 - testproxy_publishV3_02 - Test RETAIN replaced v3 publisher
      FAILED: Scenario 4 - testproxy_publishV5_02 - Test RETAIN replaced v5 publisher
      FAILED: Scenario 5 - testproxy_publishV3_03 - Test RETAIN, receive RETAIN and as NON_RETAIN
      FAILED: Scenario 6 - testproxy_publishV5_03 - Test RETAIN, receive RETAIN and as NON_RETAIN
      FAILED: Scenario 7 - testproxy_publishV3_04 - Test RETAIN, Durable Subs receive as NON_RETAIN
      FAILED: Scenario 8 - testproxy_publishV5_04 - Test RETAIN, Durable Subs receive as NON_RETAIN
      FAILED: Scenario 9 - testproxy_publishV5_05 - Test Message Expiry PAHO
      FAILED: Scenario 10 - testWSproxy_publishV5_05 - Test Message Expiry WebSockets
      FAILED: Scenario 11 - testproxy_publishV5_06 - Test RETAIN and Message Expiry PAHO
      FAILED: Scenario 12 - testWSproxy_publishV5_06 - Test RETAIN and Message Expiry WebSockets
      FAILED: Scenario 2 - testproxyV5_MPSwRC - Test MQTTv5 MaxPacketSz exceeded with ReasonCode
      FAILED: Scenario 3 - testproxy_mqttV5_rc016 - Test rc016 No matching Subscribers
      FAILED: Scenario 4 - testproxy_mqttV5_rc017 - Test rc017 No Subscription Existed
      FAILED: Scenario 5 - testproxy_mqttV5_rc130 - Test rc130 Protocol Error
      FAILED: Scenario 6 - testproxy_mqttV5_rc133 - Test rc133 Client Identified not valid
      FAILED: Scenario 7 - testproxy_mqttV5_rc135 - Test rc135 Not Authorized
      FAILED: Scenario 9 - testproxy_mqttV5_rc139 - Test rc139 Server Stopping
      FAILED: Scenario 10 - testproxy_mqttV5_rc141 - Test rc139 Server Stopping
      FAILED: Scenario 11 - testproxy_mqttV5_rc143 - Test rc143 TopicFilter
      FAILED: Scenario 12 - testproxy_mqttV3_rc143 - Test rc143 TopicFilter
      FAILED: Scenario 13 - testproxy_WSmqttV5_rc143 - Test rc143 TopicFilter
      FAILED: Scenario 14 - testproxy_mqttV5_rc144 - Test rc144 TopicFilter
      FAILED: Scenario 2 - proxymqttV5_sharedSub_SubId - Test @SharedSubscriptions (w-w/o WCs) with SubIDs
      FAILED: Scenario 3 - proxymqttV5_publishV3_PubUpV5 - MQTTv3 PUB upgrade v3 to V5 Pub
      FAILED: Scenario 4 - proxymqttV5_publishV3_SubUpV5 - MQTTv3 SUB upgrade v3 to V5 Sub
      FAILED: Scenario 1 - testproxy_sharedMix_csF_error01 - MQTTv5 Test basic Errors in or MQTTv5 shared subs using a durable subscriber. 
      FAILED: Scenario 2 - testproxy_sharedMix_csF_error02 - MQTTv5 Test connect, disconnect, reconnect, and ClientID theft conditions for MQTTv5 shared subs using a durable subscriber. 
      FAILED: Scenario 3 - testproxy_sharedMix_csT_error01 - MQTTv5 Test basic Errors in or MQTTv5 shared subs using a non-durable subscriber. 
      FAILED: Scenario 4 - testproxy_sharedMix_csT_error02 - MQTTv5 Test connect, disconnect,and ClientID theft conditions for MQTTv5 shared subs using a non-durable subscriber. 
      FAILED: Scenario 5 - testproxy_sharedMix_error03 - MQTTv5 Test creation and distruction of MQTTv5  subscriptions using cleansession clients in all different orders 
      FAILED: Scenario 6 - testproxy_sharedMix_01 - MQTTv5 SharedMix - check different subs on different topics with same subname 
      FAILED: Scenario 7 - testproxy_sharedMix_02 - MQTTv5 Basic test of mixed-durability sharedsubs - subscribing and messaging. 
      FAILED: Scenario 8 - testproxy_sharedMix_03 - MQTTv5 Clients reconnecting and receiving after server restart. 
      FAILED: Scenario 9 - testproxy_sharedMix_04 - MQTTv5 Clients reconnecting and receiving after server restart - bigger test with multiple subs and more messages. 
      FAILED: Scenario 10 - testproxy_sharedMix_05 - MQTTv5 Redelivery of in-flight msg on client disconnect. 
      FAILED: Scenario 11 - testproxy_sharedMix_06 - MQTTv5 Wildcard subscriptions for share subs. 
      FAILED: Scenario 12 - testproxy_sharedMix_07ND - MQTTv5 Busy share test with many subscribes-unsubscribes, nondurable. 
      FAILED: Scenario 13 - testproxy_sharedMix_07D - MQTTv5 Busy share test with many subscribes-unsubscribes, nondurable. 
      FAILED: Scenario 14 - testproxy_sharedMix_09 - MQTTv5 New Retained Messages behavior - shared durable should not receive RMs when create sub or on reconnect.

ismClient           A1TF7cciCOD01g M1TF7fvt01g M2TF7fvt02g                                          Passed: 1288  Failed: 244
  "IBMjava80_jms_td_tests" FAILED:
      FAILED: Scenario 1 - jms_oauth_001 - Test 1 - OAuth Test 1
      FAILED: Scenario 2 - jms_oauth_002 - Test 2 - OAuth Test 2
      FAILED: Scenario 3 - jms_oauth_003 - Test 3 - OAuth Test 3
      FAILED: Scenario 6 - jms_oauth_006 - Test 6 - OAuth Test 6
      FAILED: Scenario 7 - jms_oauth_notls - Test notls - OAuth Test with no TLS
      FAILED: Scenario 9 - jms_oauth_001_groupinfokey - Test 1 - OAuth Test 1 with GroupInfoKey
      FAILED: Scenario 10 - jms_oauth_002_groupinfokey - Test 2 - OAuth Test 2 with GroupInfoKey
      FAILED: Scenario 11 - jms_oauth_003_groupinfokey - Test 3 - OAuth Test 3 with GroupInfoKey
      FAILED: Scenario 12 - jms_oauth_007_groupinfokey - Test 4 - OAuth Test 7 with GroupInfoKey group list
      FAILED: Scenario 15 - jms_oauth_002_sameURL - Test 2 - OAuth Test 2 with GroupInfoKey sameURL
      FAILED: Scenario 17 - jms_oauth_009_groupinfokey - Test 9 - OAuth Test 9 with GroupInfoKey and 
      FAILED: Scenario 18 - jms_oauth_010_truststore - Test 10 - OAuth Test 10 with TrustStore set
  "IBMjava80_mqtt_td_tests" FAILED:
      FAILED: Scenario 1 - testmqtt_gvt01 - Test ability use GVT characters in topic and ClientID [ testmqtt_gvt01.xml ]
      FAILED: Scenario 2 - testmqtt_gvt03 - Test ability to connect with GVT characters in user/password [ testmqtt_gvt03.xml ]
      FAILED: Scenario 4 - testmqtt_gvt06 - Test ability to connect with GVT characters E3 in user/password [ testmqtt_gvt06.xml ]
      FAILED: Scenario 5 - testmqtt_gvt02 - Test ability to connect over an SSL connection [ testmqtt_gvt02.xml ]
      FAILED: Scenario 10 - testmqtt_stat02 - Test that stat MQTTClient shows correct clients
      FAILED: Scenario 2 - ssl/testmqtt_ssl05 - Test MQTT/WebSocket CommonName usage
      FAILED: Scenario 3 - ssl/testmqtt_ssl06 - Test MQTT/WebSocket CommonName usage
      FAILED: Scenario 4 - ssl/testmqtt_ssl07 - Test MQTT/WebSocket CommonName usage
      FAILED: Scenario 5 - ssl/testmqtt_ssl08 - Test MQTT/WebSocket CommonName usage in ClientID on ConnectionPolicy with asterisk character
      FAILED: Scenario 6 - ssl/testmqtt_ssl09a - Test MQTT/WebSocket CommonName usage in ClientID on ConnectionPolicy with asterisk character
      FAILED: Scenario 7 - ssl/testmqtt_ssl09b - Test MQTT/WebSocket CommonName usage in ClientID on ConnectionPolicy with asterisk character
      FAILED: Scenario 0 - deleteAllRetained0 - Delete any RETAINed messages, error if any exist
  "IBMjava80_jms_mqtt_td_tests" FAILED:
      FAILED: Scenario 0 - jms_mqtt_001 JMS to MQTT - Test 1 with Unicode Topic Name and RETAINED. [ jms_mqtt_001.xml ]
      FAILED: Scenario 12 - Clear any retained messages before running JMS Wildcard tests [ mqtt_clearRetained.xml ]
  "mqtt_xrscada" FAILED:
      FAILED: Scenario 17 - mqtt_clearRetained.xml - Clear all retained messages
      FAILED: Scenario 17 - mqtt_clearRetained.xml - Clear all retained messages
      FAILED: Scenario 17 - mqtt_clearRetained.xml - Clear all retained messages with MQTTv5
  "plugin_tests" FAILED:
      FAILED: Scenario 0 - testplugin_subscribe01 - Test MQTT/WebSocket subscribe to *#*
      FAILED: Scenario 12 - testplugin_subscribe14 - Test MQTT/WebSocket subscribe to long topic (<32767 characters)
      FAILED: Scenario 13 - testplugin_subscribe15 - Test MQTT/WebSocket subscribe to long topic (<32767 characters)
  "ws_mqtt_js_tests" FAILED:
      FAILED: Scenario 0 - jsclient_connect_1_b - Connect with a single char clientId (IPv6)
      FAILED: Scenario 1 - jsclient_connect_2_b - Connect using a clientId with a space and other chars
      FAILED: Scenario 2 - jsclient_connect_3_b - Connect with a single space as the clientId (IPv6)
      FAILED: Scenario 3 - jsclient_connect_4_b - Connect with multiple clients (synchronized)
      FAILED: Scenario 4 - jsclient_connect_5_b - Connect with a non-unique clientId (synchronized) (IPv6)
      FAILED: Scenario 5 - jsclient_connect_6_b - Connect to a server with a connection policy that only allows the MQTT protocol 
      FAILED: Scenario 7 - jsclient_connect_e10_b - Connect to a server with a connection policy that does not allow the MQTT protocol 
      FAILED: Scenario 8 - jsclient_connect_e11_b - Connect to a server with an Endpoint that does not allow the MQTT protocol 
      FAILED: Scenario 9 - jsclient_connect_e12_b - Create an Endpoint that does not have a ConnectionPolicy -  CLI
      FAILED: Scenario 1 - jsclient_sec_2_b - Connect to ISM server with SSL disabled, using a valid, non-empty username and password (IPv6)
      FAILED: Scenario 2 - jsclient_sec_3_b - Connect to ISM server with an MQTT-only ConnectionPolicy
      FAILED: Scenario 3 - jsclient_sec_4_b - Connect to ISM server with an MQTT-only Endpoint (IPv6)
      FAILED: Scenario 4 - jsclient_sec_5_b - Connect to ISM server with a ConnectionPolicy that authorizes only one user
      FAILED: Scenario 5 - jsclient_sec_6_b - Connect to ISM server using an authorized user (wildcards in ID on ConnectionPolicy) (IPv6)
      FAILED: Scenario 6 - jsclient_sec_e1_b - UserName is not specified (IPv6)
      FAILED: Scenario 7 - jsclient_sec_e2_b - User does not exist (was invalid UTF-8 test)
      FAILED: Scenario 8 - jsclient_sec_e3_b - User does not exist (IPv6)
      FAILED: Scenario 9 - jsclient_sec_e5_b - Incorrect password
      FAILED: Scenario 10 - jsclient_sec_e9_b - User is not authorized (IPv6)
      FAILED: Scenario 11 - jsclient_sec_e10_b - Insecure connection to a secure Endpoint
      FAILED: Scenario 12 - jsclient_sec_e12_b - Protocol is JMS on the ConnectionPolicy
      FAILED: Scenario 13 - jsclient_sec_e13_b - Protocol is JMS on the Endpoint (IPv6)
      FAILED: Scenario 14 - jsclient_sec_e14_b - Empty userName and password
      FAILED: Scenario 16 - jsclient_sec_e16_b - Empty userName and non-empty password
      FAILED: Scenario 2 - jsclient_pubsub_1_b - Basic publish/subscribe for the JavaScript Client
      FAILED: Scenario 3 - jsclient_pubsub_2_b - QoS=1 on publish (IPv6)
      FAILED: Scenario 4 - jsclient_pubsub_3_b - QoS=2 on publish
      FAILED: Scenario 5 - jsclient_pubsub_4_b - Multiple topics, QoS=0 on publish (IPv6)
      FAILED: Scenario 6 - jsclient_pubsub_5_b - Test for case-sensitivity in topic name
      FAILED: Scenario 7 - jsclient_pubsub_8_b - Specify a subscribe complete callback (IPv6)
      FAILED: Scenario 8 - jsclient_pubsub_10_b - Specify various callbacks for onsubscribe (IPv6)
      FAILED: Scenario 9 - jsclient_pubsub_11_b - Wildcard subscriptions
      FAILED: Scenario 10 - jsclient_pubsub_12_b - Mixed QoS on publish, QoS=0 on subscribe (IPv6)
      FAILED: Scenario 11 - jsclient_pubsub_13_b - Mixed QoS on publish, QoS=1 on subscribe
      FAILED: Scenario 12 - jsclient_pubsub_14_b - Mixed QoS on publish, QoS=2 on subscribe (IPv6)
      FAILED: Scenario 13 - jsclient_pubsub_15_b - Mixed QoS topics in one client
      FAILED: Scenario 14 - jsclient_pubsub_16_b - Mixed QoS client with wildcard subscriptions (IPv6)
      FAILED: Scenario 15 - jsclient_pubsub_17_b - Test retained
      FAILED: Scenario 16 - jsclient_pubsub_18_b - Retained message is not the last message
      FAILED: Scenario 17 - jsclient_pubsub_19_b - No unsubscribe before disconnect
      FAILED: Scenario 18 - jsclient_pubsub_22_b - Unsubscribe from the same topic twice
      FAILED: Scenario 19 - jsclient_pubsub_24_b - Test where publisher and subscriber are on different clients (synchronized)
      FAILED: Scenario 20 - jsclient_pubsub_25_b - Connect to an Connection/Messaging Policy that authorizes clients for the MQTT and JMS protocols (IPv6)
      FAILED: Scenario 21 - jsclient_pubsub_26_b - Connect to an Connection/Messaging Policy that authorizes MQTT clients only
      FAILED: Scenario 22 - jsclient_pubsub_27_b - Connect to an Connection/MessagingPolicy that authorizes a specific user/topic (IPv6)
      FAILED: Scenario 23 - jsclient_pubsub_e1_b - Test for invalid topic names on pub
      FAILED: Scenario 24 - jsclient_pubsub_e2_b - Test for invalid QoS values on pub
      FAILED: Scenario 25 - jsclient_pubsub_e3_b - Test for invalid retain value on pub
      FAILED: Scenario 26 - jsclient_pubsub_e4_b - Test for invalid wildcard placements on sub
      FAILED: Scenario 27 - jsclient_pubsub_e6_b - Test for invalid QoS values on sub
      FAILED: Scenario 28 - jsclient_pubsub_e7_b - Specify a non-function for subscribeCompleteCallback
      FAILED: Scenario 29 - jsclient_pubsub_e8_b - Specify a non-function for the onmessage callback for a client
      FAILED: Scenario 30 - jsclient_pubsub_e13_b - Test for unsubscribe with non-function callback
      FAILED: Scenario 31 - jsclient_pubsub_e14_b - Unsubscribe from a topic with invalid wc placement
      FAILED: Scenario 32 - jsclient_pubsub_e15_b - Attempt to publish/subscribe on an unauthorized protocol
      FAILED: Scenario 33 - jsclient_pubsub_e16_b - Attempt to publish/subscribe on an unauthorized topic
      FAILED: Scenario 1 - jsclient_gvt_1_b - GVT: ClientID test
      FAILED: Scenario 2 - jsclient_gvt_2_b - GVT: Topic name test
      FAILED: Scenario 3 - jsclient_gvt_3_b - GVT: userName and password test
      FAILED: Scenario 4 - jsclient_gvt_4_b - GVT: Will Topic and Message test
  "cli_tests" FAILED:
      FAILED: Scenario 0 - cli_GVT_MQTT_AUTO_ID_2 - policy test ID_2
      FAILED: Scenario 4 - cli_GVT_MQTT_AUTO_ID_4 - policy test ID_4
      FAILED: Scenario 16 - cli_GVT_MQTT_AUTO_ID_11 - policy test ID_11
      FAILED: Scenario 18 - cli_GVT_MQTT_AUTO_ID_12 - policy test ID_12
      FAILED: Scenario 20 - cli_GVT_MQTT_AUTO_ID_13 - policy test ID_13
      FAILED: Scenario 22 - cli_GVT_MQTT_AUTO_ID_14 - policy test ID_14
      FAILED: Scenario 24 - cli_GVT_MQTT_AUTO_ID_15 - policy test ID_15
      FAILED: Scenario 26 - cli_GVT_MQTT_AUTO_ID_16 - policy test ID_16
      FAILED: Scenario 28 - cli_GVT_MQTT_AUTO_ID_17 - policy test ID_17
      FAILED: Scenario 30 - cli_GVT_MQTT_AUTO_ID_18 - policy test ID_18
      FAILED: Scenario 34 - cli_GVT_MQTT_AUTO_ID_20 - policy test ID_20
      FAILED: Scenario 42 - cli_GVT_MQTT_AUTO_ID_24 - policy test ID_24
      FAILED: Scenario 44 - cli_GVT_MQTT_AUTO_ID_25 - policy test ID_25
      FAILED: Scenario 46 - cli_GVT_MQTT_AUTO_ID_26 - policy test ID_26
      FAILED: Scenario 52 - cli_GVT_MQTT_AUTO_ID_29 - policy test ID_29
      FAILED: Scenario 54 - cli_GVT_MQTT_AUTO_ID_31 - policy test ID_31
      FAILED: Scenario 60 - cli_GVT_MQTT_AUTO_ID_36 - policy test ID_36
      FAILED: Scenario 62 - cli_GVT_MQTT_AUTO_ID_37 - policy test ID_37
      FAILED: Scenario 64 - cli_GVT_MQTT_AUTO_ID_38 - policy test ID_38
      FAILED: Scenario 66 - cli_GVT_MQTT_AUTO_ID_40 - policy test ID_40
      FAILED: Scenario 72 - cli_GVT_MQTT_AUTO_ID_43 - policy test ID_43
      FAILED: Scenario 76 - cli_GVT_MQTT_AUTO_ID_45 - policy test ID_45
      FAILED: Scenario 2 - cli_security_test_001 - send test data to topic
      FAILED: Scenario 4 - cli_security_test_002 - send test data to topic
      FAILED: Scenario 6 - cli_security_test_003 - send test data to topic
      FAILED: Scenario 10 - cli_security_test_006 - send test data to topic - client auth
      FAILED: Scenario 14 - cli_security_test_008 - send should work
      FAILED: Scenario 19 - cli_security_test_012 - should work after ep gets new security profile
      FAILED: Scenario 7 - cli_stat_topics_test_007 - send test data to topic
      FAILED: Scenario 8 - cli_stat_topics_test_008 - validate stat command.
      FAILED: Scenario 19 - cli_stat_topics_test_016 - validate stat command.
  "snmp_tests" FAILED:
      FAILED: Scenario 5 - SNMP_verify_endpoint_info - Verify Endpoint Information
      FAILED: Scenario 6 - SNMP_verify_memory_info - Verify Memory Information
      FAILED: Scenario 7 - SNMP_verify_server_info - Verify Server Information
      FAILED: Scenario 8 - SNMP_verify_harole_info - Verify HARole Information
      FAILED: Scenario 9 - SNMP_verify_General_info - Verify General Information
      FAILED: Scenario 10 - SNMP_settest_info - Set SNMP Values
      FAILED: Scenario 11 - SNMP_Cleanup_001 - Test 1 - Policy Cleanup for IMAServer objects
      FAILED: runScenarios - SNMP Tests : Server stopped running during execution.
      FAILED: runScenarios - SNMP Tests : ism-SNMP-tests_Core - A core file was found on A1 after running ism-SNMP-tests.
  "jca_tests" FAILED:
      FAILED: runScenarios - JCA Setup Objects - 00: 10.73.131.248 A1:Server may not be running. service/status returned RC=7
      FAILED: Scenario 0 - jca_retained_001 - JCA retained 001
      FAILED: Scenario 2 - jca_topic_001 - JCA topic 001
      FAILED: Scenario 3 - jca_topic_002 - JCA topic 002
      FAILED: Scenario 5 - jca_queue_001 - JCA queue 001
      FAILED: Scenario 6 - jca_shared_001 - JCA shared 001 - nondurable shared subscription without a clientid
      FAILED: Scenario 7 - jca_shared_002 - JCA shared 002 - nondurable shared subscription with a clientid
      FAILED: Scenario 8 - jca_shared_003 - JCA shared 003 - durable shared subscription without a clientid
      FAILED: Scenario 9 - jca_shared_004 - JCA shared 004 - durable shared subscription with a clientid
      FAILED: Scenario 10 - jca_jndi_topic - JCA JNDI Topic
      FAILED: Scenario 11 - jca_jndi_queue - JCA JNDI Queue
      FAILED: Scenario 13 - jca_api_001 - JCA api 001 - Test various JMS API*s in the RA environment
      FAILED: Scenario 0 - jca_ssltopic_001 - JCA SSL Topic 001
      FAILED: Scenario 1 - jca_sslqueue_001 - JCA SSL Queue 001
      FAILED: Scenario 2 - jca_ssltopic_002 - JCA SSL Topic 002
      FAILED: Scenario 3 - jca_sslqueue_002 - JCA SSL Queue 002 - User authentication on outbound
      FAILED: Scenario 1 - jca_enablerb_001 - enable rollback = true BMT
      FAILED: Scenario 2 - jca_enablerb_002 - enable rollback = true CMTNS
      FAILED: Scenario 3 - jca_enablerb_003 - enable rollback = false BMT
      FAILED: Scenario 4 - jca_enablerb_004 - enable rollback = false CMTNS
      FAILED: Scenario 5 - jca_pause_001 - MDB Pause - this test should not cause the MDB to pause
      FAILED: Scenario 6 - jca_pause_002 - MDB Pause - this test should cause the MDB to pause
      FAILED: Scenario 8 - jca_pause_003 - ignoreFailuresOnStart activation spec property test
      FAILED: Scenario 10 - jca_translevel_001 - transactionLevelSupport = Local with CMTNS MDB and CMTR EJB
      FAILED: Scenario 11 - jca_translevel_002 - transationLevelSupport = Local with BMT MDB and EJB
      FAILED: Scenario 12 - jca_translevel_003 - transationLevelSupport = NoTransaction with CMTR MDB and Supports EJB
      FAILED: Scenario 13 - jca_translevel_004 - transationLevelSupport = NoTransaction with BMTUT MDB
      FAILED: Scenario 0 - jca_bmtut_topic - Stateless Session Bean with Bean Managed Transactions on a topic
      FAILED: Scenario 1 - jca_bmtut_queue - Stateless Session Bean with Bean Managed Transactions on a queue
      FAILED: Scenario 2 - jca_bmtut_rb_nonpersistent - Bean Managed Transactions and rollback with non-persistent messages
      FAILED: Scenario 3 - jca_bmtut_rb_persistent - Bean Managed Transactions and rollback with persistent messages
      FAILED: Scenario 4 - jca_bmtut_rb_queue - Bean Managed Transactions and rollback with a queue
      FAILED: Scenario 0 - jca_cmtr_topic - Stateless Session Bean with Container Managed Transactions - MDB Required
      FAILED: Scenario 1 - jca_cmtr_nodb2_topic - Stateless Session Bean with Container Managed Transactions - MDB Required - no DB2
      FAILED: Scenario 2 - jca_cmtns_topic - Stateless Session Bean with Container Managed Transactions - MDB NotSupported
      FAILED: Scenario 3 - jca_cmtns_nodb2_topic - Stateless Session Bean with Container Managed Transactions - MDB NotSupported - no DB2
      FAILED: Scenario 4 - jca_cmtr_queue - Stateless Session Bean with Container Managed Transactions - MDB Required - Queue
      FAILED: Scenario 5 - jca_cmtns_queue - Stateless Session Bean with Container Managed Transactions - MDB NotSupported - Queue
      FAILED: Scenario 6 - jca_cmt_rb_nonpersistent - Container Managed Transactions with rollback - nonpersistent
      FAILED: Scenario 7 - jca_cmt_rb_persistent - Container Managed Transactions with rollback - persistent
      FAILED: Scenario 8 - jca_cmt_rb_queue - Container Managed Transactions with rollback - queue
      FAILED: Scenario 9 - jca_dest_full - CMTR MDB and max messages
      FAILED: Scenario 0 - jca_xaerror_none_statelessBMTUT - A check to make sure Evil RA works
      FAILED: Scenario 1 - jca_xaerror_prepare_statelessBMTUT - EvilRA throws Error in prepare() in XA
      FAILED: Scenario 2 - jca_xaerror_commit_statelessBMTUT - EvilRA throws Error in commit() in XA
      FAILED: Scenario 3 - jca_xaerror_start_statelessBMTUT - EvilRA throws Error in start() in XA
      FAILED: Scenario 4 - jca_xaerror_end_statelessBMTUT - EvilRA throws Error in end() in XA
      FAILED: Scenario 5 - jca_xaerror_none_statelessCMT - A check to make sure Evil RA works
      FAILED: Scenario 6 - jca_xaerror_prepare_statelessCMT - EvilRA throws Error in prepare() in XA
      FAILED: Scenario 7 - jca_xaerror_commit_statelessCMT - EvilRA throws Error in commit() in XA
      FAILED: Scenario 8 - jca_xaerror_start_statelessCMT - EvilRA throws Error in start() in XA
      FAILED: Scenario 9 - jca_xaerror_end_statelessCMT - EvilRA throws Error in end() in XA
      FAILED: Scenario 0 - jca_reconnect_001 - JCA Reconnect 001
      FAILED: Scenario 1 - jca_reconnect_002 - Durable Shared subscription CMTR MDB, max messages and an imaserver restart
      FAILED: Scenario 0 - heur_commit_cmt - JCA Heuristic XA CMT Commit
      FAILED: Scenario 1 - heur_commit_bmt - JCA Heuristic XA BMT Commit
      FAILED: Scenario 2 - heur_rollback_cmt - JCA Heuristic XA CMT Rollback
      FAILED: Scenario 3 - heur_rollback_bmt - JCA Heuristic XA BMT Rollback
      FAILED: Scenario 4 - heur_prepCommit_cmt - JCA Heuristic XA CMT crash on prepare then commit
      FAILED: Scenario 5 - heur_prepRB_cmt - JCA Heuristic XA CMT crash on prepare then rollback
      FAILED: Scenario 6 - heur_prepCommit_bmt - JCA Heuristic XA BMT crash on prepare then commit
      FAILED: Scenario 7 - heur_prepRB_bmt - JCA Heuristic XA BMT crash on prepare then rollback
  "restapi" FAILED:
      FAILED: Scenario 0 - RESTAPI-00-ResetConfig - RESTAPI for Service Reset Config
      FAILED: Scenario 1 - RESTAPI-01-AdminLog - RESTAPI for AdminLog
      FAILED: Scenario 2 - RESTAPI-02-ConnectionLog - RESTAPI for ConnectionLog
      FAILED: Scenario 3 - RESTAPI-03-LogLevel - RESTAPI for LogLevel
      FAILED: Scenario 4 - RESTAPI-04-SecurityLog - RESTAPI for SecurityLog
      FAILED: Scenario 5 - RESTAPI-05-TraceBackup - RESTAPI for TraceBackup
      FAILED: Scenario 6 - RESTAPI-06-TraceBackupCount - RESTAPI for TraceBackupCount
      FAILED: Scenario 7 - RESTAPI-07-TraceBackupDestination - RESTAPI for TraceBackupDestination
      FAILED: Scenario 8 - RESTAPI-08-TraceConnection - RESTAPI for TraceConnection
      FAILED: Scenario 9 - RESTAPI-09-TraceLevel - RESTAPI for TraceLevel
      FAILED: Scenario 10 - RESTAPI-10-TraceMax - RESTAPI for TraceMax
      FAILED: Scenario 11 - RESTAPI-11-TraceMessageData - RESTAPI for TraceMessageData
      FAILED: Scenario 12 - RESTAPI-12-TraceOptions - RESTAPI for TraceOptions
      FAILED: Scenario 13 - RESTAPI-13-TraceSelected - RESTAPI for TraceSelected
      FAILED: Scenario 15 - RESTAPI-15-Syslog - RESTAPI for Syslog
      FAILED: Scenario 16 - RESTAPI-20-MessageHub - RESTAPI for MessageHub
      FAILED: Scenario 17 - RESTAPI-21-ConnectionPolicy - RESTAPI for ConnectionPolicy
      FAILED: Scenario 18 - RESTAPI-23-Endpoint - RESTAPI for Endpoint
      FAILED: Scenario 19 - RESTAPI-24-Queue - RESTAPI for Queue
      FAILED: Scenario 20 - RESTAPI-26-TopicPolicy - RESTAPI for TopicPolicy
      FAILED: Scenario 21 - RESTAPI-27-QueuePolicy - RESTAPI for QueuePolicy
      FAILED: Scenario 22 - RESTAPI-28-SubscriptionPolicy - RESTAPI for SubscriptionPolicy
      FAILED: Scenario 23 - RESTAPI-29-Plugin - RESTAPI for Plugin
      FAILED: Scenario 24 - RESTAPI-30-PluginDebugPort - RESTAPI for PluginDebugPort
      FAILED: Scenario 25 - RESTAPI-31-PluginDebugServer - RESTAPI for PluginDebugServer
      FAILED: Scenario 26 - RESTAPI-32-PluginMaxHeapSize - RESTAPI for PluginMaxHeapSize
      FAILED: Scenario 27 - RESTAPI-33-PluginPort - RESTAPI for PluginPort
      FAILED: Scenario 28 - RESTAPI-34-PluginServer - RESTAPI for PluginServer
      FAILED: Scenario 29 - RESTAPI-35-PluginVMArgs - RESTAPI for PluginVMArgs
      FAILED: Scenario 30 - RESTAPI-40-AdminEndpoint - RESTAPI for AdminEndpoint
      FAILED: Scenario 31 - RESTAPI-41-CertificateProfile - RESTAPI for CertificateProfile
      FAILED: Scenario 32 - RESTAPI-42-ConfigurationPolicy - RESTAPI for ConfigurationPolicy
      FAILED: Scenario 33 - RESTAPI-43-FIPS - RESTAPI for FIPS
      FAILED: Scenario 34 - RESTAPI-44-LDAP - RESTAPI for LDAP
      FAILED: Scenario 35 - RESTAPI-45-LTPAProfile - RESTAPI for LTPAProfile
      FAILED: Scenario 36 - RESTAPI-46-OAuthProfile - RESTAPI for OAuthProfile
      FAILED: Scenario 37 - RESTAPI-47-SecurityProfile - RESTAPI for SecurityProfile
      FAILED: Scenario 38 - RESTAPI-48-ClientCertificate - RESTAPI for ClientCertificate
      FAILED: Scenario 39 - RESTAPI-49-TrustedCertificate - RESTAPI for TrustedCertificate
      FAILED: Scenario 42 - RESTAPI-61-AdminUserID - RESTAPI for AdminUserID
      FAILED: Scenario 44 - RESTAPI-63-ClusterMembership - RESTAPI for ClusterMembership
      FAILED: Scenario 46 - RESTAPI-65-LicensedUsage - RESTAPI for LicensedUsage
      FAILED: Scenario 50 - RESTAPI-80-ServerName - RESTAPI for ServerName
      FAILED: Scenario 51 - RESTAPI-81-ServerUID - RESTAPI for ServerUID
      FAILED: Scenario 53 - RESTAPI-83-TolerateRecoveryInconsistencies - RESTAPI for TolerateRecoveryInconsistencies
      FAILED: Scenario 54 - RESTAPI-90-DestinationMappingRule - RESTAPI for DestinationMappingRule
      FAILED: Scenario 57 - RESTAPI-93-QueueManagerConnection - RESTAPI for QueueManagerConnection
      FAILED: Scenario 0 - RESTAPI-00-Service - RESTAPI for Service
cAppDriver  /niagara/test/restapi/synopsis.sh FAILED to start!
      FAILED: Scenario 1 - RESTAPI-99-Synopsis - Synopsis of RESTAPI Execution RC=1

ismClient           A1TF7cciCOD06g M1TF7fvt09g M2TF7fvt10g P1TF7proxy05g                            Passed: 1283  Failed: 247
  "IBMjava80_jms_td_tests" FAILED:
      FAILED: Scenario 1 - jms_oauth_001 - Test 1 - OAuth Test 1
      FAILED: Scenario 2 - jms_oauth_002 - Test 2 - OAuth Test 2
      FAILED: Scenario 3 - jms_oauth_003 - Test 3 - OAuth Test 3
      FAILED: Scenario 6 - jms_oauth_006 - Test 6 - OAuth Test 6
      FAILED: Scenario 7 - jms_oauth_notls - Test notls - OAuth Test with no TLS
      FAILED: Scenario 9 - jms_oauth_001_groupinfokey - Test 1 - OAuth Test 1 with GroupInfoKey
      FAILED: Scenario 10 - jms_oauth_002_groupinfokey - Test 2 - OAuth Test 2 with GroupInfoKey
      FAILED: Scenario 11 - jms_oauth_003_groupinfokey - Test 3 - OAuth Test 3 with GroupInfoKey
      FAILED: Scenario 12 - jms_oauth_007_groupinfokey - Test 4 - OAuth Test 7 with GroupInfoKey group list
      FAILED: Scenario 15 - jms_oauth_002_sameURL - Test 2 - OAuth Test 2 with GroupInfoKey sameURL
      FAILED: Scenario 17 - jms_oauth_009_groupinfokey - Test 9 - OAuth Test 9 with GroupInfoKey and 
      FAILED: Scenario 18 - jms_oauth_010_truststore - Test 10 - OAuth Test 10 with TrustStore set
  "IBMjava80_mqtt_td_tests" FAILED:
      FAILED: Scenario 1 - testmqtt_gvt01 - Test ability use GVT characters in topic and ClientID [ testmqtt_gvt01.xml ]
      FAILED: Scenario 2 - testmqtt_gvt03 - Test ability to connect with GVT characters in user/password [ testmqtt_gvt03.xml ]
      FAILED: Scenario 4 - testmqtt_gvt06 - Test ability to connect with GVT characters E3 in user/password [ testmqtt_gvt06.xml ]
      FAILED: Scenario 5 - testmqtt_gvt02 - Test ability to connect over an SSL connection [ testmqtt_gvt02.xml ]
      FAILED: Scenario 10 - testmqtt_stat02 - Test that stat MQTTClient shows correct clients
      FAILED: Scenario 17 - testmqtt_NDS_03_MixedQoS - Non-Durable Shared Subscription at QoS=1&2, Busy test with lots of Subscribes and Unsubscribes 
      FAILED: Scenario 2 - ssl/testmqtt_ssl05 - Test MQTT/WebSocket CommonName usage
      FAILED: Scenario 3 - ssl/testmqtt_ssl06 - Test MQTT/WebSocket CommonName usage
      FAILED: Scenario 4 - ssl/testmqtt_ssl07 - Test MQTT/WebSocket CommonName usage
      FAILED: Scenario 5 - ssl/testmqtt_ssl08 - Test MQTT/WebSocket CommonName usage in ClientID on ConnectionPolicy with asterisk character
      FAILED: Scenario 6 - ssl/testmqtt_ssl09a - Test MQTT/WebSocket CommonName usage in ClientID on ConnectionPolicy with asterisk character
      FAILED: Scenario 7 - ssl/testmqtt_ssl09b - Test MQTT/WebSocket CommonName usage in ClientID on ConnectionPolicy with asterisk character
      FAILED: Scenario 0 - deleteAllRetained0 - Delete any RETAINed messages, error if any exist
      FAILED: Scenario 20 - mqttV5_subOptions_RetainAsPub_share - Test MQTTv5 Subscribe Options RetainAsPublish on 
  "IBMjava80_jms_mqtt_td_tests" FAILED:
      FAILED: Scenario 0 - jms_mqtt_001 JMS to MQTT - Test 1 with Unicode Topic Name and RETAINED. [ jms_mqtt_001.xml ]
      FAILED: Scenario 12 - Clear any retained messages before running JMS Wildcard tests [ mqtt_clearRetained.xml ]
  "mqtt_xrscada" FAILED:
      FAILED: Scenario 17 - mqtt_clearRetained.xml - Clear all retained messages
      FAILED: Scenario 17 - mqtt_clearRetained.xml - Clear all retained messages
      FAILED: Scenario 17 - mqtt_clearRetained.xml - Clear all retained messages with MQTTv5
  "plugin_tests" FAILED:
      FAILED: Scenario 0 - testplugin_subscribe01 - Test MQTT/WebSocket subscribe to *#*
      FAILED: Scenario 12 - testplugin_subscribe14 - Test MQTT/WebSocket subscribe to long topic (<32767 characters)
  "ws_mqtt_js_tests" FAILED:
      FAILED: Scenario 0 - jsclient_connect_1_b - Connect with a single char clientId (IPv6)
      FAILED: Scenario 1 - jsclient_connect_2_b - Connect using a clientId with a space and other chars
      FAILED: Scenario 2 - jsclient_connect_3_b - Connect with a single space as the clientId (IPv6)
      FAILED: Scenario 3 - jsclient_connect_4_b - Connect with multiple clients (synchronized)
      FAILED: Scenario 4 - jsclient_connect_5_b - Connect with a non-unique clientId (synchronized) (IPv6)
      FAILED: Scenario 5 - jsclient_connect_6_b - Connect to a server with a connection policy that only allows the MQTT protocol 
      FAILED: Scenario 7 - jsclient_connect_e10_b - Connect to a server with a connection policy that does not allow the MQTT protocol 
      FAILED: Scenario 8 - jsclient_connect_e11_b - Connect to a server with an Endpoint that does not allow the MQTT protocol 
      FAILED: Scenario 9 - jsclient_connect_e12_b - Create an Endpoint that does not have a ConnectionPolicy -  CLI
      FAILED: Scenario 1 - jsclient_sec_2_b - Connect to ISM server with SSL disabled, using a valid, non-empty username and password (IPv6)
      FAILED: Scenario 2 - jsclient_sec_3_b - Connect to ISM server with an MQTT-only ConnectionPolicy
      FAILED: Scenario 3 - jsclient_sec_4_b - Connect to ISM server with an MQTT-only Endpoint (IPv6)
      FAILED: Scenario 4 - jsclient_sec_5_b - Connect to ISM server with a ConnectionPolicy that authorizes only one user
      FAILED: Scenario 5 - jsclient_sec_6_b - Connect to ISM server using an authorized user (wildcards in ID on ConnectionPolicy) (IPv6)
      FAILED: Scenario 6 - jsclient_sec_e1_b - UserName is not specified (IPv6)
      FAILED: Scenario 7 - jsclient_sec_e2_b - User does not exist (was invalid UTF-8 test)
      FAILED: Scenario 8 - jsclient_sec_e3_b - User does not exist (IPv6)
      FAILED: Scenario 9 - jsclient_sec_e5_b - Incorrect password
      FAILED: Scenario 10 - jsclient_sec_e9_b - User is not authorized (IPv6)
      FAILED: Scenario 11 - jsclient_sec_e10_b - Insecure connection to a secure Endpoint
      FAILED: Scenario 12 - jsclient_sec_e12_b - Protocol is JMS on the ConnectionPolicy
      FAILED: Scenario 13 - jsclient_sec_e13_b - Protocol is JMS on the Endpoint (IPv6)
      FAILED: Scenario 14 - jsclient_sec_e14_b - Empty userName and password
      FAILED: Scenario 16 - jsclient_sec_e16_b - Empty userName and non-empty password
      FAILED: Scenario 2 - jsclient_pubsub_1_b - Basic publish/subscribe for the JavaScript Client
      FAILED: Scenario 3 - jsclient_pubsub_2_b - QoS=1 on publish (IPv6)
      FAILED: Scenario 4 - jsclient_pubsub_3_b - QoS=2 on publish
      FAILED: Scenario 5 - jsclient_pubsub_4_b - Multiple topics, QoS=0 on publish (IPv6)
      FAILED: Scenario 6 - jsclient_pubsub_5_b - Test for case-sensitivity in topic name
      FAILED: Scenario 7 - jsclient_pubsub_8_b - Specify a subscribe complete callback (IPv6)
      FAILED: Scenario 8 - jsclient_pubsub_10_b - Specify various callbacks for onsubscribe (IPv6)
      FAILED: Scenario 9 - jsclient_pubsub_11_b - Wildcard subscriptions
      FAILED: Scenario 10 - jsclient_pubsub_12_b - Mixed QoS on publish, QoS=0 on subscribe (IPv6)
      FAILED: Scenario 11 - jsclient_pubsub_13_b - Mixed QoS on publish, QoS=1 on subscribe
      FAILED: Scenario 12 - jsclient_pubsub_14_b - Mixed QoS on publish, QoS=2 on subscribe (IPv6)
      FAILED: Scenario 13 - jsclient_pubsub_15_b - Mixed QoS topics in one client
      FAILED: Scenario 14 - jsclient_pubsub_16_b - Mixed QoS client with wildcard subscriptions (IPv6)
      FAILED: Scenario 15 - jsclient_pubsub_17_b - Test retained
      FAILED: Scenario 16 - jsclient_pubsub_18_b - Retained message is not the last message
      FAILED: Scenario 17 - jsclient_pubsub_19_b - No unsubscribe before disconnect
      FAILED: Scenario 18 - jsclient_pubsub_22_b - Unsubscribe from the same topic twice
      FAILED: Scenario 19 - jsclient_pubsub_24_b - Test where publisher and subscriber are on different clients (synchronized)
      FAILED: Scenario 20 - jsclient_pubsub_25_b - Connect to an Connection/Messaging Policy that authorizes clients for the MQTT and JMS protocols (IPv6)
      FAILED: Scenario 21 - jsclient_pubsub_26_b - Connect to an Connection/Messaging Policy that authorizes MQTT clients only
      FAILED: Scenario 22 - jsclient_pubsub_27_b - Connect to an Connection/MessagingPolicy that authorizes a specific user/topic (IPv6)
      FAILED: Scenario 23 - jsclient_pubsub_e1_b - Test for invalid topic names on pub
      FAILED: Scenario 24 - jsclient_pubsub_e2_b - Test for invalid QoS values on pub
      FAILED: Scenario 25 - jsclient_pubsub_e3_b - Test for invalid retain value on pub
      FAILED: Scenario 26 - jsclient_pubsub_e4_b - Test for invalid wildcard placements on sub
      FAILED: Scenario 27 - jsclient_pubsub_e6_b - Test for invalid QoS values on sub
      FAILED: Scenario 28 - jsclient_pubsub_e7_b - Specify a non-function for subscribeCompleteCallback
      FAILED: Scenario 29 - jsclient_pubsub_e8_b - Specify a non-function for the onmessage callback for a client
      FAILED: Scenario 30 - jsclient_pubsub_e13_b - Test for unsubscribe with non-function callback
      FAILED: Scenario 31 - jsclient_pubsub_e14_b - Unsubscribe from a topic with invalid wc placement
      FAILED: Scenario 32 - jsclient_pubsub_e15_b - Attempt to publish/subscribe on an unauthorized protocol
      FAILED: Scenario 33 - jsclient_pubsub_e16_b - Attempt to publish/subscribe on an unauthorized topic
      FAILED: Scenario 1 - jsclient_gvt_1_b - GVT: ClientID test
      FAILED: Scenario 2 - jsclient_gvt_2_b - GVT: Topic name test
      FAILED: Scenario 3 - jsclient_gvt_3_b - GVT: userName and password test
      FAILED: Scenario 4 - jsclient_gvt_4_b - GVT: Will Topic and Message test
  "cli_tests" FAILED:
      FAILED: Scenario 0 - cli_GVT_MQTT_AUTO_ID_2 - policy test ID_2
      FAILED: Scenario 4 - cli_GVT_MQTT_AUTO_ID_4 - policy test ID_4
      FAILED: Scenario 16 - cli_GVT_MQTT_AUTO_ID_11 - policy test ID_11
      FAILED: Scenario 18 - cli_GVT_MQTT_AUTO_ID_12 - policy test ID_12
      FAILED: Scenario 20 - cli_GVT_MQTT_AUTO_ID_13 - policy test ID_13
      FAILED: Scenario 22 - cli_GVT_MQTT_AUTO_ID_14 - policy test ID_14
      FAILED: Scenario 24 - cli_GVT_MQTT_AUTO_ID_15 - policy test ID_15
      FAILED: Scenario 26 - cli_GVT_MQTT_AUTO_ID_16 - policy test ID_16
      FAILED: Scenario 28 - cli_GVT_MQTT_AUTO_ID_17 - policy test ID_17
      FAILED: Scenario 30 - cli_GVT_MQTT_AUTO_ID_18 - policy test ID_18
      FAILED: Scenario 34 - cli_GVT_MQTT_AUTO_ID_20 - policy test ID_20
      FAILED: Scenario 42 - cli_GVT_MQTT_AUTO_ID_24 - policy test ID_24
      FAILED: Scenario 44 - cli_GVT_MQTT_AUTO_ID_25 - policy test ID_25
      FAILED: Scenario 46 - cli_GVT_MQTT_AUTO_ID_26 - policy test ID_26
      FAILED: Scenario 52 - cli_GVT_MQTT_AUTO_ID_29 - policy test ID_29
      FAILED: Scenario 54 - cli_GVT_MQTT_AUTO_ID_31 - policy test ID_31
      FAILED: Scenario 60 - cli_GVT_MQTT_AUTO_ID_36 - policy test ID_36
      FAILED: Scenario 62 - cli_GVT_MQTT_AUTO_ID_37 - policy test ID_37
      FAILED: Scenario 64 - cli_GVT_MQTT_AUTO_ID_38 - policy test ID_38
      FAILED: Scenario 66 - cli_GVT_MQTT_AUTO_ID_40 - policy test ID_40
      FAILED: Scenario 72 - cli_GVT_MQTT_AUTO_ID_43 - policy test ID_43
      FAILED: Scenario 76 - cli_GVT_MQTT_AUTO_ID_45 - policy test ID_45
      FAILED: Scenario 2 - cli_security_test_001 - send test data to topic
      FAILED: Scenario 4 - cli_security_test_002 - send test data to topic
      FAILED: Scenario 6 - cli_security_test_003 - send test data to topic
      FAILED: Scenario 10 - cli_security_test_006 - send test data to topic - client auth
      FAILED: Scenario 14 - cli_security_test_008 - send should work
      FAILED: Scenario 19 - cli_security_test_012 - should work after ep gets new security profile
      FAILED: Scenario 7 - cli_stat_topics_test_007 - send test data to topic
      FAILED: Scenario 8 - cli_stat_topics_test_008 - validate stat command.
      FAILED: Scenario 19 - cli_stat_topics_test_016 - validate stat command.
  "MQConnectivity_tests" FAILED:
      FAILED: Scenario 0 - MQ_CON_BOUNDARIES_01 - com.ibm.ima.mqcon.boundaries MQTT messages are published to a topic which is associated with a destination mapping rule in order to check that the max messages value is being enforced
      FAILED: Scenario 3 - MQ_CON_BOUNDARIES_04 - com.ibm.ima.mqcon.boundaries MQTT messages are published to a topic which is associated with a destination mapping rule in order to check that the max messages value is being enforced
  "snmp_tests" FAILED:
      FAILED: Scenario 5 - SNMP_verify_endpoint_info - Verify Endpoint Information
      FAILED: Scenario 6 - SNMP_verify_memory_info - Verify Memory Information
      FAILED: Scenario 7 - SNMP_verify_server_info - Verify Server Information
cAppDriverWait  ./ism-SNMP-VerifyHAInfo.sh FAILED to start!
      FAILED: Scenario 8 - SNMP_verify_harole_info - Verify HARole Information RC=1
      FAILED: runScenarios - SNMP Tests : Server stopped running during execution.
      FAILED: runScenarios - SNMP Tests : ism-SNMP-tests_Core - A core file was found on A1 after running ism-SNMP-tests.
      FAILED: runScenarios - SNMP Tests : ism-SNMP-tests_Core - A core file was found on A1 after running ism-SNMP-tests.
  "jca_tests" FAILED:
      FAILED: runScenarios - JCA Setup Objects - 00: 10.73.131.195 A1:Server may not be running. service/status returned RC=7
      FAILED: Scenario 0 - jca_retained_001 - JCA retained 001
      FAILED: Scenario 2 - jca_topic_001 - JCA topic 001
      FAILED: Scenario 3 - jca_topic_002 - JCA topic 002
      FAILED: Scenario 5 - jca_queue_001 - JCA queue 001
      FAILED: Scenario 6 - jca_shared_001 - JCA shared 001 - nondurable shared subscription without a clientid
      FAILED: Scenario 7 - jca_shared_002 - JCA shared 002 - nondurable shared subscription with a clientid
      FAILED: Scenario 8 - jca_shared_003 - JCA shared 003 - durable shared subscription without a clientid
      FAILED: Scenario 9 - jca_shared_004 - JCA shared 004 - durable shared subscription with a clientid
      FAILED: Scenario 10 - jca_jndi_topic - JCA JNDI Topic
      FAILED: Scenario 11 - jca_jndi_queue - JCA JNDI Queue
      FAILED: Scenario 13 - jca_api_001 - JCA api 001 - Test various JMS API*s in the RA environment
      FAILED: Scenario 0 - jca_ssltopic_001 - JCA SSL Topic 001
      FAILED: Scenario 1 - jca_sslqueue_001 - JCA SSL Queue 001
      FAILED: Scenario 2 - jca_ssltopic_002 - JCA SSL Topic 002
      FAILED: Scenario 3 - jca_sslqueue_002 - JCA SSL Queue 002 - User authentication on outbound
      FAILED: Scenario 0 - jca_xa_1001 - DB2 sanity check - A simple DB2 local transaction
      FAILED: Scenario 1 - jca_enablerb_001 - enable rollback = true BMT
      FAILED: Scenario 2 - jca_enablerb_002 - enable rollback = true CMTNS
      FAILED: Scenario 3 - jca_enablerb_003 - enable rollback = false BMT
      FAILED: Scenario 4 - jca_enablerb_004 - enable rollback = false CMTNS
      FAILED: Scenario 5 - jca_pause_001 - MDB Pause - this test should not cause the MDB to pause
      FAILED: Scenario 6 - jca_pause_002 - MDB Pause - this test should cause the MDB to pause
      FAILED: Scenario 8 - jca_pause_003 - ignoreFailuresOnStart activation spec property test
      FAILED: Scenario 10 - jca_translevel_001 - transactionLevelSupport = Local with CMTNS MDB and CMTR EJB
      FAILED: Scenario 11 - jca_translevel_002 - transationLevelSupport = Local with BMT MDB and EJB
      FAILED: Scenario 12 - jca_translevel_003 - transationLevelSupport = NoTransaction with CMTR MDB and Supports EJB
      FAILED: Scenario 13 - jca_translevel_004 - transationLevelSupport = NoTransaction with BMTUT MDB
      FAILED: Scenario 0 - jca_bmtut_topic - Stateless Session Bean with Bean Managed Transactions on a topic
      FAILED: Scenario 1 - jca_bmtut_queue - Stateless Session Bean with Bean Managed Transactions on a queue
      FAILED: Scenario 2 - jca_bmtut_rb_nonpersistent - Bean Managed Transactions and rollback with non-persistent messages
      FAILED: Scenario 3 - jca_bmtut_rb_persistent - Bean Managed Transactions and rollback with persistent messages
      FAILED: Scenario 4 - jca_bmtut_rb_queue - Bean Managed Transactions and rollback with a queue
      FAILED: Scenario 0 - jca_cmtr_topic - Stateless Session Bean with Container Managed Transactions - MDB Required
      FAILED: Scenario 1 - jca_cmtr_nodb2_topic - Stateless Session Bean with Container Managed Transactions - MDB Required - no DB2
      FAILED: Scenario 2 - jca_cmtns_topic - Stateless Session Bean with Container Managed Transactions - MDB NotSupported
      FAILED: Scenario 3 - jca_cmtns_nodb2_topic - Stateless Session Bean with Container Managed Transactions - MDB NotSupported - no DB2
      FAILED: Scenario 4 - jca_cmtr_queue - Stateless Session Bean with Container Managed Transactions - MDB Required - Queue
      FAILED: Scenario 5 - jca_cmtns_queue - Stateless Session Bean with Container Managed Transactions - MDB NotSupported - Queue
      FAILED: Scenario 6 - jca_cmt_rb_nonpersistent - Container Managed Transactions with rollback - nonpersistent
      FAILED: Scenario 7 - jca_cmt_rb_persistent - Container Managed Transactions with rollback - persistent
      FAILED: Scenario 8 - jca_cmt_rb_queue - Container Managed Transactions with rollback - queue
      FAILED: Scenario 9 - jca_dest_full - CMTR MDB and max messages
      FAILED: Scenario 0 - jca_xaerror_none_statelessBMTUT - A check to make sure Evil RA works
      FAILED: Scenario 1 - jca_xaerror_prepare_statelessBMTUT - EvilRA throws Error in prepare() in XA
      FAILED: Scenario 2 - jca_xaerror_commit_statelessBMTUT - EvilRA throws Error in commit() in XA
      FAILED: Scenario 3 - jca_xaerror_start_statelessBMTUT - EvilRA throws Error in start() in XA
      FAILED: Scenario 4 - jca_xaerror_end_statelessBMTUT - EvilRA throws Error in end() in XA
      FAILED: Scenario 5 - jca_xaerror_none_statelessCMT - A check to make sure Evil RA works
      FAILED: Scenario 6 - jca_xaerror_prepare_statelessCMT - EvilRA throws Error in prepare() in XA
      FAILED: Scenario 7 - jca_xaerror_commit_statelessCMT - EvilRA throws Error in commit() in XA
      FAILED: Scenario 8 - jca_xaerror_start_statelessCMT - EvilRA throws Error in start() in XA
      FAILED: Scenario 9 - jca_xaerror_end_statelessCMT - EvilRA throws Error in end() in XA
      FAILED: Scenario 0 - jca_reconnect_001 - JCA Reconnect 001
      FAILED: Scenario 1 - jca_reconnect_002 - Durable Shared subscription CMTR MDB, max messages and an imaserver restart
      FAILED: Scenario 0 - heur_commit_cmt - JCA Heuristic XA CMT Commit
      FAILED: Scenario 1 - heur_commit_bmt - JCA Heuristic XA BMT Commit
      FAILED: Scenario 2 - heur_rollback_cmt - JCA Heuristic XA CMT Rollback
      FAILED: Scenario 3 - heur_rollback_bmt - JCA Heuristic XA BMT Rollback
      FAILED: Scenario 4 - heur_prepCommit_cmt - JCA Heuristic XA CMT crash on prepare then commit
      FAILED: Scenario 5 - heur_prepRB_cmt - JCA Heuristic XA CMT crash on prepare then rollback
      FAILED: Scenario 6 - heur_prepCommit_bmt - JCA Heuristic XA BMT crash on prepare then commit
      FAILED: Scenario 7 - heur_prepRB_bmt - JCA Heuristic XA BMT crash on prepare then rollback
  "restapi" FAILED:
      FAILED: Scenario 0 - RESTAPI-00-ResetConfig - RESTAPI for Service Reset Config
      FAILED: Scenario 1 - RESTAPI-01-AdminLog - RESTAPI for AdminLog
      FAILED: Scenario 2 - RESTAPI-02-ConnectionLog - RESTAPI for ConnectionLog
      FAILED: Scenario 3 - RESTAPI-03-LogLevel - RESTAPI for LogLevel
      FAILED: Scenario 4 - RESTAPI-04-SecurityLog - RESTAPI for SecurityLog
      FAILED: Scenario 5 - RESTAPI-05-TraceBackup - RESTAPI for TraceBackup
      FAILED: Scenario 6 - RESTAPI-06-TraceBackupCount - RESTAPI for TraceBackupCount
      FAILED: Scenario 7 - RESTAPI-07-TraceBackupDestination - RESTAPI for TraceBackupDestination
      FAILED: Scenario 8 - RESTAPI-08-TraceConnection - RESTAPI for TraceConnection
      FAILED: Scenario 9 - RESTAPI-09-TraceLevel - RESTAPI for TraceLevel
      FAILED: Scenario 10 - RESTAPI-10-TraceMax - RESTAPI for TraceMax
      FAILED: Scenario 11 - RESTAPI-11-TraceMessageData - RESTAPI for TraceMessageData
      FAILED: Scenario 12 - RESTAPI-12-TraceOptions - RESTAPI for TraceOptions
      FAILED: Scenario 13 - RESTAPI-13-TraceSelected - RESTAPI for TraceSelected
      FAILED: Scenario 15 - RESTAPI-15-Syslog - RESTAPI for Syslog
      FAILED: Scenario 16 - RESTAPI-20-MessageHub - RESTAPI for MessageHub
      FAILED: Scenario 17 - RESTAPI-21-ConnectionPolicy - RESTAPI for ConnectionPolicy
      FAILED: Scenario 18 - RESTAPI-23-Endpoint - RESTAPI for Endpoint
      FAILED: Scenario 19 - RESTAPI-24-Queue - RESTAPI for Queue
      FAILED: Scenario 20 - RESTAPI-26-TopicPolicy - RESTAPI for TopicPolicy
      FAILED: Scenario 21 - RESTAPI-27-QueuePolicy - RESTAPI for QueuePolicy
      FAILED: Scenario 22 - RESTAPI-28-SubscriptionPolicy - RESTAPI for SubscriptionPolicy
      FAILED: Scenario 23 - RESTAPI-29-Plugin - RESTAPI for Plugin
      FAILED: Scenario 24 - RESTAPI-30-PluginDebugPort - RESTAPI for PluginDebugPort
      FAILED: Scenario 25 - RESTAPI-31-PluginDebugServer - RESTAPI for PluginDebugServer
      FAILED: Scenario 26 - RESTAPI-32-PluginMaxHeapSize - RESTAPI for PluginMaxHeapSize
      FAILED: Scenario 27 - RESTAPI-33-PluginPort - RESTAPI for PluginPort
      FAILED: Scenario 28 - RESTAPI-34-PluginServer - RESTAPI for PluginServer
      FAILED: Scenario 29 - RESTAPI-35-PluginVMArgs - RESTAPI for PluginVMArgs
      FAILED: Scenario 30 - RESTAPI-40-AdminEndpoint - RESTAPI for AdminEndpoint
      FAILED: Scenario 31 - RESTAPI-41-CertificateProfile - RESTAPI for CertificateProfile
      FAILED: Scenario 32 - RESTAPI-42-ConfigurationPolicy - RESTAPI for ConfigurationPolicy
      FAILED: Scenario 33 - RESTAPI-43-FIPS - RESTAPI for FIPS
      FAILED: Scenario 34 - RESTAPI-44-LDAP - RESTAPI for LDAP
      FAILED: Scenario 35 - RESTAPI-45-LTPAProfile - RESTAPI for LTPAProfile
      FAILED: Scenario 36 - RESTAPI-46-OAuthProfile - RESTAPI for OAuthProfile
      FAILED: Scenario 37 - RESTAPI-47-SecurityProfile - RESTAPI for SecurityProfile
      FAILED: Scenario 38 - RESTAPI-48-ClientCertificate - RESTAPI for ClientCertificate
      FAILED: Scenario 39 - RESTAPI-49-TrustedCertificate - RESTAPI for TrustedCertificate
      FAILED: Scenario 42 - RESTAPI-61-AdminUserID - RESTAPI for AdminUserID
      FAILED: Scenario 44 - RESTAPI-63-ClusterMembership - RESTAPI for ClusterMembership
      FAILED: Scenario 46 - RESTAPI-65-LicensedUsage - RESTAPI for LicensedUsage
      FAILED: Scenario 50 - RESTAPI-80-ServerName - RESTAPI for ServerName
      FAILED: Scenario 51 - RESTAPI-81-ServerUID - RESTAPI for ServerUID
      FAILED: Scenario 53 - RESTAPI-83-TolerateRecoveryInconsistencies - RESTAPI for TolerateRecoveryInconsistencies
      FAILED: Scenario 54 - RESTAPI-90-DestinationMappingRule - RESTAPI for DestinationMappingRule
      FAILED: Scenario 57 - RESTAPI-93-QueueManagerConnection - RESTAPI for QueueManagerConnection
      FAILED: Scenario 0 - RESTAPI-00-Service - RESTAPI for Service
cAppDriver  /niagara/test/restapi/synopsis.sh FAILED to start!
      FAILED: Scenario 1 - RESTAPI-99-Synopsis - Synopsis of RESTAPI Execution RC=1

(RC!=0 for some tests, check individual results for details)
