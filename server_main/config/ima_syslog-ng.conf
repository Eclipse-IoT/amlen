# Copyright (c) 2013-2021 Contributors to the Eclipse Foundation
# 
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
# 
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
# 
# SPDX-License-Identifier: EPL-2.0
#

##################################### ISM Server Configuration ########################

source s_ism {
    tcp( ip(127.0.0.1) port(9088) keep_timestamp(yes) flags(syslog-protocol) max-connections(50) ); 
};

filter system_base_log_filter{ facility(1);  };
filter connection_log_filter { facility(16); };
filter security_log_filter   { facility(10); };
filter admin_log_filter      { facility(15); };
filter mqconn_log_filter     { facility(17); };

template t_ism_logtext {
    template("$S_ISODATE $MSGID $PRIORITY ${.SDATA.ismsd.cat} $PROGRAM $PID: $MSG\n");
    template_escape(no);
};

destination d_ism_system_log     { file("${IMA_SVR_INSTALL_PATH}/logs/imaserver-default.log" template(t_ism_logtext) frac_digits(3)); };
destination d_ism_connection_log { file("${IMA_SVR_INSTALL_PATH}/logs/imaserver-connection.log" template(t_ism_logtext) frac_digits(3)); };
destination d_ism_security_log   { file("${IMA_SVR_INSTALL_PATH}/logs/imaserver-security.log" template(t_ism_logtext) frac_digits(3)); };
destination d_ism_admin_log      { file("${IMA_SVR_INSTALL_PATH}/logs/imaserver-admin.log" template(t_ism_logtext) frac_digits(3)); };
destination d_ism_mqconn_log     { file("${IMA_SVR_INSTALL_PATH}/logs/imaserver-mqconnectivity.log" template(t_ism_logtext) frac_digits(3)); };

log { source(s_ism); filter(system_base_log_filter); destination(d_ism_system_log); };
log { source(s_ism); filter(connection_log_filter);  destination(d_ism_connection_log); };
log { source(s_ism); filter(security_log_filter);    destination(d_ism_security_log); };
log { source(s_ism); filter(admin_log_filter);       destination(d_ism_admin_log); };
log { source(s_ism); filter(mqconn_log_filter);      destination(d_ism_mqconn_log); };

# Add net-snmp messages to the /var/log/default-log
filter f_netsnmp { match("net-snmp" value("PROGRAM")); };
log { source(s_system); filter(f_netsnmp); destination(d_log); };

rewrite hide_password {
  subst("(imaserver (create|update|test) LogAutoTransfer.*) (\"?)Password=([^\"]*)(\"?)($| (.*))", "$1 \"Password=XXXXXX\"$6", value("MESSAGE"), flags(ignore-case));
  subst("(imaserver (create|update|test) LDAP.*) (\"?)BindDN=([^\"]*)(\"?)($| (.*))", "$1 \"BindDN=XXXXXX\"$6", value("MESSAGE"), flags(ignore-case));
  subst("(imaserver (create|update|test) LDAP.*) (\"?)BindPassword=([^\"]*)(\"?)($| (.*))", "$1 \"BindPassword=XXXXXX\"$6", value("MESSAGE"), flags(ignore-case));
  subst("(imaserver (backup|restore|user).*) (\"?)Password=([^\"]*)(\"?)($| (.*))", "$1 \"Password=XXXXXX\"$6", value("MESSAGE"), flags(ignore-case));
  subst("(imaserver (backup|restore).*) (\"?)StoreDestinationPassword=([^\"]*)(\"?)($| (.*))", "$1 \"StoreDestinationPassword=XXXXXX\"$6", value("MESSAGE"), flags(ignore-case));
  subst("(imaserver apply Certificate.*) (\"?)CertFilePassword=([^\"]*)(\"?)($| (.*))", "$1 \"CertFilePassword=XXXXXX\"$5", value("MESSAGE"), flags(ignore-case));
  subst("(imaserver apply Certificate.*) (\"?)KeyFilePassword=([^\"]*)(\"?)($| (.*))", "$1 \"KeyFilePassword=XXXXXX\"$5", value("MESSAGE"), flags(ignore-case));
  subst("(imaserver apply Certificate.*) (\"?)MQStashPassword=([^\"]*)(\"?)($| (.*))", "$1 \"MQStashPassword=XXXXXX\"$5", value("MESSAGE"), flags(ignore-case));
  subst("^(_(.+)|(.+) _(.+))", "Incorrect command", value("MESSAGE"), flags(ignore-case));
};

##################################### ISM Server Configuration End ########################
