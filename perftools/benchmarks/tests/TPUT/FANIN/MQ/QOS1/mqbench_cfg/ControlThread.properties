# Copyright (c) 2005-2021 Contributors to the Eclipse Foundation
# 
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
# 
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
# 
# SPDX-License-Identifier: EPL-2.0
#

ControlThread.desc=\
Manage the lifecycle of the application and any WorkerThreads.\n\
This also controls the aggregation and reporting of performance counters.

ss.dflt = 10
ss.desc = Statistics reporting period.
ss.type = java.lang.Integer
ss.xtra = Setting this to 0 will disable periodic reporting entirely.

nt.dflt = 1
nt.desc = Number of WorkerThreads.
nt.type = java.lang.Integer

#mu.dflt = false
#mu.desc = Display memory usage.
#mu.type = java.lang.Boolean
#mu.xtra = This reports the number of bytes in use.  Freed memory awaiting \n\
#garbage collection is not counted as "used".
#mu.hide = true

rl.dflt = 0
rl.desc = Run length in seconds.
rl.type = java.lang.Integer
rl.xtra = Setting this to 0 will disable the timer and run forever.

id.dflt = 
id.desc = Process identfier.
id.type = java.lang.String
id.xtra = If set, this will be displayed in the statistics reporting.  This is\n\
of use if you have to merge the output of more than one instance of the tool.

su.dflt = true
su.desc = Display final summary.
su.type = java.lang.Boolean
su.xtra = This setting is independant of the periodic statistics reporting.
su.hide = false

sd.dflt = normal
sd.desc = Sets what is reported as totalDuration.
sd.type = java.lang.String
sd.xtra = "normal" = from 1st iteration to last iteration, excluding setup/takedown.\n\
"tlf" = Time to Last Fire, from start of main thread till last iteration completes\n\
(includes setup time but not takedown)
sd.hide =true

sp.dflt = false
sp.desc = Display per-thread performance data.
sp.type = java.lang.Boolean
sp.hide = false

wi.dflt = 1000
wi.desc = WorkerThread start interval (ms).
wi.type = java.lang.Integer
wi.xtra = This controls the pause between starting multiple threads.
wi.hide = true

wt.dflt = 30
wt.desc = WorkerThread start timeout.
wt.type = java.lang.Integer
wt.xtra = This controls the time to wait for individual worker threads to start. cph will wait for\n\
at least wi ms and up to wt * wi ms for each worker thread to start. The default is therefore to wait\n\
at least for one second and for up to 30secs for each thread to start.
wt.hide = true

wk.dflt = 120
wk.desc = Shutdown wait (s).
wk.type = java.lang.Integer
wk.xtra = The application will wait this long for WorkerThreads to shutdown before\n\
exiting anyway.
wk.hide = true

sh.dflt = true
sh.desc = Use signal handler to trap SIGINT (CTRL-C).
sh.type = java.lang.Boolean
sh.hide = true

ts.dflt = 0
ts.desc = Thread stack size (Kb, Linux only).
ts.type = java.lang.Integer
ts.xtra = Setting this to 0 will disable cph from setting a per thread stack allocation.

