- name: set name
  set_fact:
    name: "{{ _amlen_release }}-{{ _amlen_name }}-{{pair_id}}"

- name: Get Pods
  k8s_info:
    kind: Pod
    name: "{{name}}-{{node_id}}"
    namespace: "{{ _amlen_namespace }}"
  register: r_pods
  loop: "{{ range(0,nodes|int)|list}}"
  loop_control:
    loop_var: node_id

- name: get names
  set_fact:
    names: "{{r_pods | community.general.json_query('results[*].resources[0].metadata.name') |join(',')}}"

- name: check for pre-existing service
  k8s_info:
    kind: Service
    name: "{{_amlen_service_name | default('noservice')}}"
    namespace: "{{ _amlen_namespace }}"
  register: service

- name: Create service if not using preexisting one {{ _amlen_state }}
  k8s:
    state: "{{ _amlen_state }}"
    merge_type:
    - strategic-merge
    - merge
    definition: "{{ lookup('template', './templates/headlessService.j2' ) | from_yaml }}"
  when:
    - service.resources | length == 0

- name: get password
  k8s_info:
    kind: Secret
    name: "{{pair_name}}-adminpassword"
    namespace: "{{ _amlen_namespace }}"
  register: secret

- name: get certs
  k8s_info:
    kind: Secret
    name: "{{device_certs_secret}}"
    namespace: "{{ _amlen_namespace }}"
  register: certs

- name: get ca
  k8s_info:
    kind: Secret
    name: "{{ ca_secret | default(device_certs_secret)}}"
    namespace: "{{ _amlen_namespace }}"
  register: ca

- name: create admin services
  k8s:
    state: "{{ _amlen_state }}"
    merge_type:
    - strategic-merge
    - merge
    definition: "{{ lookup('template', './templates/adminService.j2' ) | from_yaml }}"
  loop: "{{ range(0,nodes|int)|list}}"
  loop_control:
    loop_var: node_index

- name: configure
  configure:
    servers: "{{names}}"
    suffix: ".{{_amlen_service_name | default(name)}}.{{_amlen_namespace}}.svc.cluster.local"
    password: "{{secret.resources[0].data.adminPassword|b64decode}}"
    ca.crt: "{{ca.resources[0].data[ca_cert_name | default('ca.crt')] | b64decode}}"
    caname: "{{ca_cert_name | default('ca.crt')}}"
    tls.crt: "{{certs.resources[0].data['tls.crt']|b64decode}}"
    tls.key: "{{certs.resources[0].data['tls.key']|b64decode}}"
    config: "{{config2}}"
    path: "{{_amlen_directory}}"
  async: 600
  poll: 30
  no_log: False
