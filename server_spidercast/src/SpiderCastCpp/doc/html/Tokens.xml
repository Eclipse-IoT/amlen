<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
  <Token>
    <TokenIdentifier>
      <Name>AttributeMap_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a4ef1400f42e4f326de420c2fd433b417</Anchor>
    <Abstract>A shared pointer to an AttributeMap.</Abstract>
    <DeclaredIn>AttributeMap.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ConstAttributeMap_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>ae4e01e53905c53c99c2f0d9a8cdad567</Anchor>
    <Abstract>A shared pointer to a const AttributeMap.</Abstract>
    <DeclaredIn>AttributeMap.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ConnectivityEvent_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a58425ea81e046ef24b741be616de3827</Anchor>
    <Abstract>A boost::shared_ptr to a ConnectivityEvent.</Abstract>
    <DeclaredIn>ConnectivityEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>String</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr</Scope>
    </TokenIdentifier>
    <Path>namespacespdr.html</Path>
    <Anchor>a7f401d01169db6726fafead25ba23c9c</Anchor>
    <Abstract>Another name for std::string.</Abstract>
    <DeclaredIn>Definitions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ConstString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr</Scope>
    </TokenIdentifier>
    <Path>namespacespdr.html</Path>
    <Anchor>a404c3bf2a6e296acd7f6c43bd0af4d11</Anchor>
    <Abstract>An immutable std::string.</Abstract>
    <DeclaredIn>Definitions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StringSet</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr</Scope>
    </TokenIdentifier>
    <Path>namespacespdr.html</Path>
    <Anchor>a1238e66ef60f6ab18999d50dbc3a1284</Anchor>
    <Abstract>A set of Strings.</Abstract>
    <DeclaredIn>Definitions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StringSPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr</Scope>
    </TokenIdentifier>
    <Path>namespacespdr.html</Path>
    <Anchor>a98439cd43d295c0fcfd74a89ec32c9b4</Anchor>
    <Abstract>A boost::shared_ptr to a String.</Abstract>
    <DeclaredIn>Definitions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ConstStringSPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr</Scope>
    </TokenIdentifier>
    <Path>namespacespdr.html</Path>
    <Anchor>ab9aab655084f5aa9e55f625a3e5a3497</Anchor>
    <Abstract>A boost::shared_ptr to a ConstString.</Abstract>
    <DeclaredIn>Definitions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StringSetSPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr</Scope>
    </TokenIdentifier>
    <Path>namespacespdr.html</Path>
    <Anchor>a5832c4f3f79d66b306650ba5b19ea298</Anchor>
    <Abstract>A boost::shared_ptr to a StringSet.</Abstract>
    <DeclaredIn>Definitions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StringStringMap</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr</Scope>
    </TokenIdentifier>
    <Path>namespacespdr.html</Path>
    <Anchor>ac61d49c2952c7176a05a44322f4f861d</Anchor>
    <Abstract>A map of string keys and string values.</Abstract>
    <DeclaredIn>Definitions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Exception</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr</Scope>
    </TokenIdentifier>
    <Path>namespacespdr.html</Path>
    <Anchor>a9580001c45c2390b98c5a3cac6322556</Anchor>
    <Abstract>Another name for std::exception.</Abstract>
    <DeclaredIn>Definitions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Mutable_Buffer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr</Scope>
    </TokenIdentifier>
    <Path>namespacespdr.html</Path>
    <Anchor>aad88a9ccb1dc81382c28f51c6d76bb76</Anchor>
    <Abstract>A mutable byte buffer.</Abstract>
    <DeclaredIn>Definitions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Const_Buffer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr</Scope>
    </TokenIdentifier>
    <Path>namespacespdr.html</Path>
    <Anchor>ad4f560d91764640f07b273f3290196a0</Anchor>
    <Abstract>An immutable byte buffer.</Abstract>
    <DeclaredIn>Definitions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>toString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>spdr</Scope>
    </TokenIdentifier>
    <Path>namespacespdr.html</Path>
    <Anchor>af3d8f6078129ce6c92ca94627b37afac</Anchor>
    <Abstract>A safe to-string of smart pointer to class that supports toString()</Abstract>
    <DeclaredIn>Definitions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DHTEvent_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a90fc7d7fbdceafaf819589f3eab62826</Anchor>
    <DeclaredIn>DHTEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DHTServiceReadyEvent_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a2375dddcd8e0188d3a99934e45e1bc33</Anchor>
    <DeclaredIn>DHTEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DHTServiceUnavailableEvent_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>ac130fb69f9c75ed2fe8f9a993a1bb9fc</Anchor>
    <DeclaredIn>DHTEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DHTServer_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::dht</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1dht.html</Path>
    <Anchor>a1de48921e38fd03a42ab9ece584f92c5</Anchor>
    <DeclaredIn>DHTServer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DHTService_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::dht</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1dht.html</Path>
    <Anchor>af8e2c5bfaf154591c3e8cd59392bf78a</Anchor>
    <DeclaredIn>DHTService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FatalErrorEvent_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a566c33059b5560ccc5760818f1662be3</Anchor>
    <Abstract>A boost::shared_ptr to a FatalErrorEvent.</Abstract>
    <DeclaredIn>FatalErrorEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>LeaderElectionService_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::leader_election</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1leader__election.html</Path>
    <Anchor>af30df052d48a239611fd6727cefe3f79</Anchor>
    <DeclaredIn>LeaderElectionService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Election_Attribute_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::leader_election</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1leader__election.html</Path>
    <Anchor>a3a680e67023974db5e3f482d0844f9d1</Anchor>
    <Abstract>The internal key used for the leader election implementation over the attribute service.</Abstract>
    <DeclaredIn>LeaderElectionService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ViewMap</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a93ab8d7fd108603478b968b59b40fed8</Anchor>
    <Abstract>A map that holds the node membership view.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ViewMap_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a02d9302846d76e995133fb4d108355cb</Anchor>
    <Abstract>A boost::shared_ptr to a ViewMap.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NodeIDSet</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>ad23e5456fa2bd47237bf108650f25592</Anchor>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NodeIDSet_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>aeb88d9020db40208da9320b84fcbb0b5</Anchor>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ZoneCensusData</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>adc74a275fc33900f03d840bcba3749b1</Anchor>
    <Abstract>Zone census values are node counts.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ZoneCensus</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>ac613da21234d3f410e6e279bfa3702c6</Anchor>
    <Abstract>A map where the keys are zone-bus-names and the values are zone census data.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ZoneCensus_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a2b72a2ff24cbe72d49b11f5ba2b900a8</Anchor>
    <Abstract>A boost::shared_ptr to ZoneCensus.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MembershipEvent_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>aa0e3e31f7cf429da0edae2e47e5ac375</Anchor>
    <Abstract>A boost::shared_ptr to a MembershipEvent.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NodeJoinEvent_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a4b69f009be59f3fce4d704d40674f701</Anchor>
    <Abstract>A boost::shared_ptr to a NodeJoinEvent.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NodeLeaveEvent_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a401cd3ddbd976590a75a4d1c9e593399</Anchor>
    <Abstract>A boost::shared_ptr to a NodeLeaveEvent.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ViewChangeEvent_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a1e7b81ff9d18a060b969552f3af42255</Anchor>
    <Abstract>A boost::shared_ptr to a ViewChangeEvent.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ChangeOfMetaDataEvent_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a37ff681ebda2e1a5e391f9607bff5f5c</Anchor>
    <Abstract>A boost::shared_ptr to a ChangeOfMetaDataEvent.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ForeignZoneMembershipEvent_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a1abe91667e7d64f3bf40b20b50c5b186</Anchor>
    <Abstract>A boost::shared_ptr to a ForeignZoneMembershipEvent.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ZoneCensusEvent_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a3a11b0e42a116ba5b4507990be51a927</Anchor>
    <Abstract>A boost::shared_ptr to a ZoneCensusEvent.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MembershipService_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr</Scope>
    </TokenIdentifier>
    <Path>namespacespdr.html</Path>
    <Anchor>a687e0bd91de7a40fb292af73e1c6bc88</Anchor>
    <DeclaredIn>MembershipService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MetaData_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a9219d00f97a541de870d437ca12cc70e</Anchor>
    <Abstract>A shared pointer to a MetaData.</Abstract>
    <DeclaredIn>MetaData.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NodeID_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr</Scope>
    </TokenIdentifier>
    <Path>namespacespdr.html</Path>
    <Anchor>acfb3849e5f7b7ffbc63e4ef2cb11a9f6</Anchor>
    <Abstract>A shared pointer to a NodeID.</Abstract>
    <DeclaredIn>NodeID.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>P2PStreamEvent_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a5df50d022e0a6c3da8448a5113414c8b</Anchor>
    <DeclaredIn>P2PStreamEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>P2PStreamBreakEvent_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>af5de5507e91a0719562c8b4e6c7a3e63</Anchor>
    <DeclaredIn>P2PStreamEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>P2PStreamRcv_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::messaging</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1messaging.html</Path>
    <Anchor>a8d56b28049e13b43cf8ee30d62120932</Anchor>
    <DeclaredIn>P2PStreamRcv.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>P2PStreamTx_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::messaging</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1messaging.html</Path>
    <Anchor>aa11b299970fe665c6efa4f872a06762f</Anchor>
    <DeclaredIn>P2PStreamTx.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PubSubEvent_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>af92d39819ef8915778ecb3ff49bb41e6</Anchor>
    <DeclaredIn>PubSubEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SpiderCast_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr</Scope>
    </TokenIdentifier>
    <Path>namespacespdr.html</Path>
    <Anchor>ac5d9127c0ec2a0e02e5784813f171013</Anchor>
    <Abstract>A shared pointer to a SpiderCast instance.</Abstract>
    <DeclaredIn>SpiderCast.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SpiderCastConfig_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr</Scope>
    </TokenIdentifier>
    <Path>namespacespdr.html</Path>
    <Anchor>a0749d284effc353e30e02acaa94f764c</Anchor>
    <Abstract>A shared pointer to a SpiderCastConfig instance.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NodeName_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>ace27d93be2a7d8e5425a1e7ec859d54d</Anchor>
    <Abstract>Node&amp;#39;s name.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BusName_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a349d1c9bc5117f50ce61d08d0fc40a22</Anchor>
    <Abstract>Bus name.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NetworkInterface_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a9eeaad1234bceacae759d769e44076a1</Anchor>
    <Abstract>Node&amp;#39;s network interfaces (IP address) and their network-ID.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TCPReceiverPort_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>acc7ede5b9ec44de49325afb079aa2272</Anchor>
    <Abstract>TCP Receiver port.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BindAllInterfaces_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a7cfb3cf288cc444b37ce19689bc9f9d9</Anchor>
    <Abstract>Bind all interfaces.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BindAllInterfaces_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a60ea3fd484c4af3ad69683af881c61db</Anchor>
    <Abstract>Default value of BindAllInterfaces_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HeartbeatIntervalMillis_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a962427e2d0ef074e922c0c68ed242091</Anchor>
    <Abstract>Heart-beat interval, in milliseconds.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HeartbeatIntervalMillis_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a5d7d4f523d956549900839c82b446ee7</Anchor>
    <Abstract>Default value of HeartbeatIntervalMillis_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HeartbeatTimeoutMillis_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>afb5707c84b919d01eecd2afb63268035</Anchor>
    <Abstract>Heart-beat timeout, in milliseconds.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HeartbeatTimeoutMillis_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>adfa6e346e4db565a955fa601b11ee3df</Anchor>
    <Abstract>Default value of HeartbeatTimeoutMillis_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ConnectionEstablishTimeoutMillis_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a629d812225f3d82f447309ae506e19b9</Anchor>
    <Abstract>Connection establish timeout, in milliseconds.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ConnectionEstablishTimeoutMillis_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a1bd0482403af41a84b5f89e50986a96a</Anchor>
    <Abstract>Default value of ConnectionEstablishTimeoutMillis_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MaxMemoryAllowedMBytes_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>aa992e2ec001bb2436fb186da04594f6e</Anchor>
    <Abstract>Maximal memory allowed for Comm provider, in Mega Bytes.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MaxMemoryAllowedMBytes_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>aa50fd8d8761e2152a61c6ee3f4575395</Anchor>
    <Abstract>Default value of MaxMemoryAllowedMBytes_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>RUMLogLevel_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a996a4a4e9f436fe39ac1e4f3b4e42f74</Anchor>
    <Abstract>RUM log level.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>RUMLogLevel_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a716bb010662975ec1dfda5a925207879</Anchor>
    <Abstract>Default value of RUMLogLevel_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>UDPPacketSizeBytes_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a55d9ce74832c2957e5e18d9e2d2fcd65</Anchor>
    <Abstract>UDP packet size.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>UDPPacketSizeBytes_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a12bd198ae1a2686b708386c8eafaef90</Anchor>
    <Abstract>Default value of RUMLogLevel_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MembershipGossipIntervalMillis_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a4914beb81882f2d9203e6312462f95d6</Anchor>
    <Abstract>Membership gossip interval in milliseconds.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MembershipGossipIntervalMillis_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a677ad93ea99e773a3bf697ec75d030eb</Anchor>
    <Abstract>Default value of MembershipGossipIntervalMillis_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NodeHistoryRetentionTimeSec_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>abb48c2c0249685731ad0f0413f54bdf0</Anchor>
    <Abstract>Node history retention time in seconds.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NodeHistoryRetentionTimeSec_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a818bbb72dea27e7e151ac3029b5ba23e</Anchor>
    <Abstract>Default value of NodeHistoryRetentionTimeSec_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SuspicionThreshold_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a166cd6da5aa9aed759116d06f792ce57</Anchor>
    <Abstract>Suspicion threshold.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SuspicionThreshold_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>aa43e36cb2509c0868472e11fa1a88d3d</Anchor>
    <Abstract>Default value of SuspicionThreshold_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FullViewBootstrapSet_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a5a12181639585d07d419cbb1e84ccb3c</Anchor>
    <Abstract>Whether the bootstrap set given to SpiderCast represents an expected full view.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FullViewBootstrapSet_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a044fc1b5d44d5cc0e4cb527d364ccde7</Anchor>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FullViewBootstrapPolicy_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>afac54cfed6a42cd21b6ae883682a39a6</Anchor>
    <Abstract>How to use a full view bootstrap.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FullViewBootstrapPolicy_Random_VALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a259c41236b2d721e3c853d5009dc7c6a</Anchor>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FullViewBootstrapPolicy_Random1_VALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a515a46e517456926e106e0e812148121</Anchor>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FullViewBootstrapPolicy_Tree_VALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a72b12f8ab28d240858c3597f45d5088f</Anchor>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FullViewBootstrapPolicy_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>abb6906b45cc36d211e04054cb3c0b782</Anchor>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FullViewBootstrapTimeoutSec_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a47a98e0503e372a8795716dfb4b82aed</Anchor>
    <Abstract>The time after which discovery policy returns to Random.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FullViewBootstrapTimeoutSec_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a3e72756ca3b6f62d73e316733b180065</Anchor>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HighPriorityMonitoringEnabled_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>abe653420a8086faf609b5ffd9b4f882f</Anchor>
    <Abstract>Whether high priority monitoring is permitted on this node.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HighPriorityMonitoringEnabled_PROP_KEY_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a9929d9ca5cf41b2150dc197592bac23e</Anchor>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TopologyPeriodicTaskIntervalMillis_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a53e3f152f5504471ebf935aa32614b93</Anchor>
    <Abstract>Topology periodic task interval in milliseconds.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TopologyPeriodicTaskIntervalMillis_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a09c63acb9069e681fe976f9883304c77</Anchor>
    <Abstract>Default value of TopologyPeriodicTaskIntervalMillis_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FrequentDiscoveryIntervalMillis_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a1f4577c874e34d257e3dd89cfc4d209c</Anchor>
    <Abstract>Frequent discovery task interval in milliseconds.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FrequentDiscoveryIntervalMillis_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>ab2cfe86ef1c4294aba327ad47a3f286a</Anchor>
    <Abstract>Default value of FrequentDiscoveryIntervalMillis_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FrequentDiscoveryMinimalDurationMillis_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a5a0902581dc9f5e6754122774177d80b</Anchor>
    <Abstract>Frequent discovery task minimal duration in milliseconds.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FrequentDiscoveryMinimalDurationMillis_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a14a65cb7b8b05ac4bf689039b6a74bf9</Anchor>
    <Abstract>Default value of FrequentDiscoveryMinimalDurationMillis_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NormalDiscoveryIntervalMillis_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a351ab918a85bc2cb36a6c5b32b1df924</Anchor>
    <Abstract>Normal discovery task interval in milliseconds.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NormalDiscoveryIntervalMillis_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>ad1dfb17567ffe6beacba13c45866506a</Anchor>
    <Abstract>Default value of NormalDiscoveryIntervalMillis_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DiscoveryProtocol_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a5f4bc7bb53ffa66a0aa992c70d1ed6ad</Anchor>
    <Abstract>Discovery protocol.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DiscoveryProtocol_UDP_VALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a1cd4d584ce0030c2d69683e27c0af774</Anchor>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DiscoveryProtocol_TCP_VALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>ab4ba6e6645d6e1a4fba5e539733f556b</Anchor>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DiscoveryProtocol_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a47b8c0945d16eb41bd5d452533db7c62</Anchor>
    <Abstract>Default value of DiscoveryProtocol_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StructTopoEnabled_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>aecb31a9e96a4c01d4ffa33793d03e631</Anchor>
    <Abstract>Structured topology enabled.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StructTopoEnabled_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a71bfd0a5d2e3db218feaa19446f55fe4</Anchor>
    <Abstract>Default value of DHTEnabled_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StructDegreeTarget_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a6e436ea366cfa6316ea32196855254cb</Anchor>
    <Abstract>structured topo node degree target.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StructDegreeTarget_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>ae737d3dff3472c51ce212ff364d9eaf3</Anchor>
    <Abstract>Default value of StructDegreeTarget_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>RandomDegreeTarget_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a9fced148788499e878bbe1ebd5e039ba</Anchor>
    <Abstract>Random node degree target.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>RandomDegreeTarget_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a0f769b270e91a2b303ad2d3fb64bcd3e</Anchor>
    <Abstract>Default value of RandomDegreeTarget_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>RandomDegreeMargin_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a2d6a02417a2699ad1a11a12d91d6f3e8</Anchor>
    <Abstract>Random node degree margin (above target).</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>RandomDegreeMargin_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>ae05b85e90ac8a2adf939f1fd2b6f313d</Anchor>
    <Abstract>Default value of RandomDegreeMargin_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DHTEnabled_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>aa94a1a681b73ec2aa72d1f147a03a532</Anchor>
    <Abstract>DHT enabled.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DHTEnabled_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a1fecef8b4533840a48bbd448dc2719a0</Anchor>
    <Abstract>Default value of DHTEnabled_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DHTMaxConnections_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>aa6527cd4ba4ec4ad46ff89eac41e5a3a</Anchor>
    <Abstract>Maximum number of DHT related connections.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DHTMaxConnections_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a6549e0b4d7d6909a7a3bfb5b6067790d</Anchor>
    <Abstract>Default value of DHTMaxConnections_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DHTServiceRequestTimeoutMillis_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a316c59f88fae77dc929736a09b49e88b</Anchor>
    <Abstract>DHTService request time-out in milliseconds.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DHTServiceRequestTimeoutMillis_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>ac8b840eb38a450fda76de6757b2d3e16</Anchor>
    <Abstract>Default value of DHTServiceRequestTimeoutMillis_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DHTServiceRequestRetransmissionIntervalMillis_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a583a1f42baef0be3276a6f46c3f2ae99</Anchor>
    <Abstract>DHTService request retransmission in milliseconds.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DHTServiceRequestRetransmissionIntervalMillis_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a249ce5c93cad7d93f24a93a6be698f7e</Anchor>
    <Abstract>Default value of DHTServiceRequestRetransmissionIntervalMillis_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DHTServerHandoffChunkSizeKB_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a581e9b90b0885873457616cb9b5c875d</Anchor>
    <Abstract>DHT Server handoff chunk size in KB.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DHTServerHandoffChunkSizeKB_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>ac3a82970c5e31f03e0c1798d6b40e4fc</Anchor>
    <Abstract>Default value of DHTServerHandoffChunkSizeKB_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>RoutingEnabled_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>abe14d1a59c5ca2234adb712d22610cb6</Anchor>
    <Abstract>Routing enabled.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>RoutingEnabled_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>ab822f8a607312de429ae6f493053a030</Anchor>
    <Abstract>Default value of RoutingEnabled_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PublisherReliabilityMode_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a0b0aed64894a11245b51bf2457a97b8d</Anchor>
    <Abstract>The reliability mode the publisher is using.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ReliabilityMode_BestEffort_VALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>ab030b8dad22319182d71cece10643a34</Anchor>
    <Abstract>The value of a &amp;quot;best effort&amp;quot; reliability mode.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ReliabilityMode_NackBased_VALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>aaf6a424efad33d288c52f28c7cace548</Anchor>
    <Abstract>The value of a &amp;quot;NACK-based&amp;quot; reliability mode.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PublisherReliabilityMode_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a7be1cae90a90af251e75e522638113bb</Anchor>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TopicGlobalScope_Prop_Key</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a9ab1e9e97af11d60540ac44d9fdc330c</Anchor>
    <Abstract>Topic global scope.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TopicGlobalScope_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>ac0ec029f3481fefe383369b1eaf1211e</Anchor>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>LeaderElectionEnabled_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>abc0669dc3f3dd99c715274eded5962a4</Anchor>
    <Abstract>Leader election enabled.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>LeaderElectionEnabled_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a317f535d6b1adf0936bbe0cf03457f3b</Anchor>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>LeaderElectionWarmupTimeoutMillis_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a866067ab9ff539250cc7a1973d1b1676</Anchor>
    <Abstract>Leader election warm up timeout, in milliseconds.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>LeaderElectionWarmupTimeoutMillis_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a5dca7817256f3da20595cf34757439a5</Anchor>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HierarchyNumberOfDelegates_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a361ffb88b12a731da1c9ccca1a5e8ea7</Anchor>
    <Abstract>Number of delegates per base zone.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HierarchyNumberOfDelegates_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a96f74d8a6350c18a48e231b0aa96e1c2</Anchor>
    <Abstract>Default value of HierarchyNumberOfDelegates_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HierarchyNumberOfSupervisors_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>aa81e4d33653a5d3bbb261a8fd1495df7</Anchor>
    <Abstract>Number of supervisors per base zone.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HierarchyNumberOfSupervisors_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>ae6bd7c70dc8622daaee7c773ece45296</Anchor>
    <Abstract>Default value of HierarchyNumberOfSupervisors_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HierarchyNumberOfActiveDelegates_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>aa92ca8043ecd1b93398ba02df0ddf37f</Anchor>
    <Abstract>Number of active delegates per base zone.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HierarchyNumberOfActiveDelegates_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>acb553a605b38bdba52b02f9afc239244</Anchor>
    <Abstract>Default value of HierarchyNumberOfActiveDelegates_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HierarchyIncludeAttributes_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a2213cc4607db5db6ca5c688dc9b56682</Anchor>
    <Abstract>Ask delegate to include attributes in the periodic embership updates.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HierarchyIncludeAttributes_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a60a558475e3ac6059fab0ebdf128f20c</Anchor>
    <Abstract>Default value of HierarchyIncludeAttributes_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HierarchyForeignZoneMemberhipTimeOut_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>ac4fad3401c46b7a6f78fff6e70c45bc8</Anchor>
    <Abstract>TimeOut for foreign zone membership requests.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HierarchyForeignZoneMemberhipTimeOut_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a450a484ce562aca77244b40f1c37071e</Anchor>
    <Abstract>Default value of HierarchyMemberhipUpdateAggregationInterval_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HierarchyMemberhipUpdateAggregationInterval_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a5da556c9c1635ea3fef785bb859dbeda</Anchor>
    <Abstract>aggregation time in milliseconds of membership updates between the delegate and its supervisor...</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HierarchyMemberhipUpdateAggregationInterval_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a1f77a62baec1ed3e0d3f188a8b3baec0</Anchor>
    <Abstract>Default value of HierarchyMemberhipUpdateAggregationInterval_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HierarchyConnectIntervalMillis_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a7baf68cb2193ff9159e19767124e6e52</Anchor>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HierarchyConnectIntervalMillis_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a8a956a14ffc5ff830364bbe853572c1c</Anchor>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HierarchySupervisorQuarantineIntervalMillis_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>ac7fb1b84c09bbb2c576c17fe65c2deb9</Anchor>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HierarchySupervisorQuarantineIntervalMillis_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>aa7d7fdc59da95723adfa8c84cd7d7988</Anchor>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HierarchyEnabled_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a133b311bcf1494e78a8f6670042737dd</Anchor>
    <Abstract>Enable hierarchy.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HierarchyEnabled_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a7c909cf110f13e3d2cf881cbd690e37c</Anchor>
    <Abstract>Default value of HierarchyNumberOfSupervisors_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StatisticsEnabled_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a9d06e482d0dd4268b66b18fc34f332ed</Anchor>
    <Abstract>Statistics enabled.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StatisticsEnabled_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>ac9a4c121a6af9514fc7c0308b5723099</Anchor>
    <Abstract>Default value of StatisticsEnabled_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StatisticsPeriodMillis_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a0adb7f852b04ea9c8f0c2f6e70f9b1b4</Anchor>
    <Abstract>Statistics period in milliseconds.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StatisticsPeriodMillis_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a554dd877cb8968f2925b81278229f1a9</Anchor>
    <Abstract>Default value of StatisticsPeriodMillis_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StatisticsTaskTardinessThresholdMillis_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a39d82073fc30bf26da17f184db09328c</Anchor>
    <Abstract>Task tardiness threshold in milliseconds.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StatisticsTaskTardinessThresholdMillis_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a3175837d78408cbbe55a061e1e36622f</Anchor>
    <Abstract>Default value of StatisticsPeriodMillis_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CRC_MemTopoMsg_Enabled_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a4f754f0c1567280556c0ba44c6f0bc5c</Anchor>
    <Abstract>Enable CRC on membership and topology messages.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CRC_MemTopoMsg_Enabled_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a8d37d0a39b07102c926b168bfba7a4ec</Anchor>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SpiderCastEvent_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a145c0727646e70460ac5b29970712ca4</Anchor>
    <Abstract>A boost::shared_ptr to a SpiderCastEvent.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StreamID_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::messaging</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1messaging.html</Path>
    <Anchor>a72d6e315133cf7df19b5b3fb554b7f0a</Anchor>
    <Abstract>A shared pointer to a StreamID.</Abstract>
    <DeclaredIn>StreamID.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Topic_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::messaging</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1messaging.html</Path>
    <Anchor>a9dc0b1048dfd4ee7858a602f81009505</Anchor>
    <DeclaredIn>Topic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TopicPublisher_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::messaging</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1messaging.html</Path>
    <Anchor>aef0623b1297be8f44fddddd82b5777c4</Anchor>
    <DeclaredIn>TopicPublisher.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TopicSubscriber_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::messaging</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1messaging.html</Path>
    <Anchor>a7b0d97d31d164395cc632735a97ea3ce</Anchor>
    <DeclaredIn>TopicSubscriber.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TxMessage_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::messaging</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1messaging.html</Path>
    <Anchor>ad149f10ae7cbc3894197af474aedc98f</Anchor>
    <DeclaredIn>TxMessage.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>the_node_page</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>the_node_page.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>mem_service_page</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>mem_service_page.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>attr_service_page</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>attr_service_page.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>pubsub_service_page</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>pubsub_service_page.html</Path>
    <Abstract>Under construction.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>dht_service_page</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>dht_service_page.html</Path>
    <Abstract>Under construction.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>contact_info_page</Name>
      <APILanguage>c</APILanguage>
    </TokenIdentifier>
    <Path>contact_info_page.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>boost</Name>
      <APILanguage>c</APILanguage>
      <Type>ns</Type>
      <Scope>boost</Scope>
    </TokenIdentifier>
    <Path>namespaceboost.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr</Name>
      <APILanguage>c</APILanguage>
      <Type>ns</Type>
      <Scope>spdr</Scope>
    </TokenIdentifier>
    <Path>namespacespdr.html</Path>
    <Abstract>The top level SpiderCast name-space.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>String</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr</Scope>
    </TokenIdentifier>
    <Path>namespacespdr.html</Path>
    <Anchor>a7f401d01169db6726fafead25ba23c9c</Anchor>
    <Abstract>Another name for std::string.</Abstract>
    <DeclaredIn>Definitions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ConstString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr</Scope>
    </TokenIdentifier>
    <Path>namespacespdr.html</Path>
    <Anchor>a404c3bf2a6e296acd7f6c43bd0af4d11</Anchor>
    <Abstract>An immutable std::string.</Abstract>
    <DeclaredIn>Definitions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StringSet</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr</Scope>
    </TokenIdentifier>
    <Path>namespacespdr.html</Path>
    <Anchor>a1238e66ef60f6ab18999d50dbc3a1284</Anchor>
    <Abstract>A set of Strings.</Abstract>
    <DeclaredIn>Definitions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StringSPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr</Scope>
    </TokenIdentifier>
    <Path>namespacespdr.html</Path>
    <Anchor>a98439cd43d295c0fcfd74a89ec32c9b4</Anchor>
    <Abstract>A boost::shared_ptr to a String.</Abstract>
    <DeclaredIn>Definitions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ConstStringSPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr</Scope>
    </TokenIdentifier>
    <Path>namespacespdr.html</Path>
    <Anchor>ab9aab655084f5aa9e55f625a3e5a3497</Anchor>
    <Abstract>A boost::shared_ptr to a ConstString.</Abstract>
    <DeclaredIn>Definitions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StringSetSPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr</Scope>
    </TokenIdentifier>
    <Path>namespacespdr.html</Path>
    <Anchor>a5832c4f3f79d66b306650ba5b19ea298</Anchor>
    <Abstract>A boost::shared_ptr to a StringSet.</Abstract>
    <DeclaredIn>Definitions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StringStringMap</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr</Scope>
    </TokenIdentifier>
    <Path>namespacespdr.html</Path>
    <Anchor>ac61d49c2952c7176a05a44322f4f861d</Anchor>
    <Abstract>A map of string keys and string values.</Abstract>
    <DeclaredIn>Definitions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Exception</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr</Scope>
    </TokenIdentifier>
    <Path>namespacespdr.html</Path>
    <Anchor>a9580001c45c2390b98c5a3cac6322556</Anchor>
    <Abstract>Another name for std::exception.</Abstract>
    <DeclaredIn>Definitions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Mutable_Buffer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr</Scope>
    </TokenIdentifier>
    <Path>namespacespdr.html</Path>
    <Anchor>aad88a9ccb1dc81382c28f51c6d76bb76</Anchor>
    <Abstract>A mutable byte buffer.</Abstract>
    <DeclaredIn>Definitions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Const_Buffer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr</Scope>
    </TokenIdentifier>
    <Path>namespacespdr.html</Path>
    <Anchor>ad4f560d91764640f07b273f3290196a0</Anchor>
    <Abstract>An immutable byte buffer.</Abstract>
    <DeclaredIn>Definitions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MembershipService_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr</Scope>
    </TokenIdentifier>
    <Path>namespacespdr.html</Path>
    <Anchor>a687e0bd91de7a40fb292af73e1c6bc88</Anchor>
    <DeclaredIn>MembershipService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NodeID_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr</Scope>
    </TokenIdentifier>
    <Path>namespacespdr.html</Path>
    <Anchor>acfb3849e5f7b7ffbc63e4ef2cb11a9f6</Anchor>
    <Abstract>A shared pointer to a NodeID.</Abstract>
    <DeclaredIn>NodeID.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SpiderCast_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr</Scope>
    </TokenIdentifier>
    <Path>namespacespdr.html</Path>
    <Anchor>ac5d9127c0ec2a0e02e5784813f171013</Anchor>
    <Abstract>A shared pointer to a SpiderCast instance.</Abstract>
    <DeclaredIn>SpiderCast.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SpiderCastConfig_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr</Scope>
    </TokenIdentifier>
    <Path>namespacespdr.html</Path>
    <Anchor>a0749d284effc353e30e02acaa94f764c</Anchor>
    <Abstract>A shared pointer to a SpiderCastConfig instance.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>toString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>func</Type>
      <Scope>spdr</Scope>
    </TokenIdentifier>
    <Path>namespacespdr.html</Path>
    <Anchor>af3d8f6078129ce6c92ca94627b37afac</Anchor>
    <Abstract>A safe to-string of smart pointer to class that supports toString()</Abstract>
    <DeclaredIn>Definitions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::BasicConfig</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::BasicConfig</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_basic_config.html</Path>
    <Abstract>The base class of all configuration objects.</Abstract>
    <DeclaredIn>BasicConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BasicConfig</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::BasicConfig</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_basic_config.html</Path>
    <Anchor>a2ffbb91a7de3943c0093cec39bee8949</Anchor>
    <Abstract>Construct from a PropertyMap.</Abstract>
    <DeclaredIn>BasicConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BasicConfig</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::BasicConfig</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_basic_config.html</Path>
    <Anchor>a92098687225b7a22736ee5c9e849da11</Anchor>
    <Abstract>Copy constructor.</Abstract>
    <DeclaredIn>BasicConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::BasicConfig</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_basic_config.html</Path>
    <Anchor>a7ff297c329b192b4dc1545d1cd876b3c</Anchor>
    <Abstract>Assignment operator.</Abstract>
    <DeclaredIn>BasicConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~BasicConfig</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::BasicConfig</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_basic_config.html</Path>
    <Anchor>afe33f8923a4eb94d2e9c2aefb8fe5023</Anchor>
    <Abstract>Destructor.</Abstract>
    <DeclaredIn>BasicConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getProperty</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::BasicConfig</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_basic_config.html</Path>
    <Anchor>a45256252330974a1887a8aa2e9b40a51</Anchor>
    <Abstract>Get the value that corresponds to the property key.</Abstract>
    <DeclaredIn>BasicConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getMandatoryDoubleProperty</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::BasicConfig</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_basic_config.html</Path>
    <Anchor>a5d1b196274971f4b353ed79cd325ab13</Anchor>
    <Abstract>Get the value of a mandatory property, parsed as a double.</Abstract>
    <DeclaredIn>BasicConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getMandatoryInt64Property</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::BasicConfig</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_basic_config.html</Path>
    <Anchor>a55e420d7b111103c9d60931f306250be</Anchor>
    <Abstract>Get the value of a mandatory property, parsed as a int64_t.</Abstract>
    <DeclaredIn>BasicConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getMandatoryInt32Property</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::BasicConfig</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_basic_config.html</Path>
    <Anchor>ae47f0e0d105ac54c9eb65c93888ef0f5</Anchor>
    <Abstract>Get the value of a mandatory property, parsed as a int32_t.</Abstract>
    <DeclaredIn>BasicConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getMandatoryProperty</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::BasicConfig</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_basic_config.html</Path>
    <Anchor>a84b5afcb54ee082737cadf2bbbbf924e</Anchor>
    <Abstract>Get the String value of a mandatory property.</Abstract>
    <DeclaredIn>BasicConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOptionalInt64Property</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::BasicConfig</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_basic_config.html</Path>
    <Anchor>ad773eb9fc41e22d93c5e41ff5a89ec46</Anchor>
    <Abstract>Get an optional 64 bit integer property.</Abstract>
    <DeclaredIn>BasicConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOptionalInt32Property</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::BasicConfig</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_basic_config.html</Path>
    <Anchor>a442d05305baaac69e9e4ceafc84067cb</Anchor>
    <Abstract>Get an optional 32 bit integer property.</Abstract>
    <DeclaredIn>BasicConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOptionalDoubleProperty</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::BasicConfig</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_basic_config.html</Path>
    <Anchor>a910f2fef60990133cbd4858923139559</Anchor>
    <Abstract>Get an optional double property.</Abstract>
    <DeclaredIn>BasicConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOptionalBooleanProperty</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::BasicConfig</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_basic_config.html</Path>
    <Anchor>a84736b3ff320eff4d7f8bec2f3d5ea43</Anchor>
    <Abstract>Get an optional boolean property.</Abstract>
    <DeclaredIn>BasicConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOptionalProperty</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::BasicConfig</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_basic_config.html</Path>
    <Anchor>a826b1e4003b8f3c0c206a23d5567f990</Anchor>
    <Abstract>Get an optional String property.</Abstract>
    <DeclaredIn>BasicConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>size</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::BasicConfig</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_basic_config.html</Path>
    <Anchor>a9e292cd557bb7aeefb4268c637168a5f</Anchor>
    <Abstract>The size of the property map.</Abstract>
    <DeclaredIn>BasicConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>empty</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::BasicConfig</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_basic_config.html</Path>
    <Anchor>a1ae5eb32819a10b2e116cbe988e09eeb</Anchor>
    <Abstract>Is the property map empty?</Abstract>
    <DeclaredIn>BasicConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>toString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::BasicConfig</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_basic_config.html</Path>
    <Anchor>a7184192329fb5c6799c6510b7aef9a58</Anchor>
    <Abstract>A string representation.</Abstract>
    <DeclaredIn>BasicConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>reportIllegalNumberFormat</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>spdr::BasicConfig</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_basic_config.html</Path>
    <Anchor>a8e314ebf17ec2156bb2c3d1d182f7f3f</Anchor>
    <Abstract>Re-throw the bad_lexical_cast exception as an IllegalConfigException, with the name of the property a...</Abstract>
    <DeclaredIn>BasicConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>prop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::BasicConfig</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_basic_config.html</Path>
    <Anchor>a1d94d270f92968fb5287b0d0741be474</Anchor>
    <Abstract>The internal property map.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::ConstSharedBuffer</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::ConstSharedBuffer</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_const_shared_buffer.html</Path>
    <DeclaredIn>ConstSharedBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ConstSharedBuffer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::ConstSharedBuffer</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_const_shared_buffer.html</Path>
    <Anchor>a543c6e283879d2df1d1c2d5e7b6aef5c</Anchor>
    <Abstract>Zero length buffer, with NULL pointer.</Abstract>
    <DeclaredIn>ConstSharedBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ConstSharedBuffer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::ConstSharedBuffer</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_const_shared_buffer.html</Path>
    <Anchor>a4ce49f817d4d3c670878a1d40ebcf543</Anchor>
    <Abstract>Constructor of a buffer from a raw pointer.</Abstract>
    <DeclaredIn>ConstSharedBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ConstSharedBuffer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::ConstSharedBuffer</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_const_shared_buffer.html</Path>
    <Anchor>ab04220317539e04dd7da9f594a1fc44d</Anchor>
    <Abstract>Constructor of a buffer from a shared_array.</Abstract>
    <DeclaredIn>ConstSharedBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~ConstSharedBuffer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::ConstSharedBuffer</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_const_shared_buffer.html</Path>
    <Anchor>a43607dd29ac5995d303bcd3ab9a604fc</Anchor>
    <DeclaredIn>ConstSharedBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ConstSharedBuffer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::ConstSharedBuffer</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_const_shared_buffer.html</Path>
    <Anchor>aa59de961bfb6011480f17d044643a443</Anchor>
    <DeclaredIn>ConstSharedBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::ConstSharedBuffer</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_const_shared_buffer.html</Path>
    <Anchor>ab8bf522e3c18670c4bc85eb8c9f66b49</Anchor>
    <DeclaredIn>ConstSharedBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getBuffer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::ConstSharedBuffer</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_const_shared_buffer.html</Path>
    <Anchor>adc54c549483544c7a95f43f98e815a2d</Anchor>
    <DeclaredIn>ConstSharedBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getLength</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::ConstSharedBuffer</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_const_shared_buffer.html</Path>
    <Anchor>a27362907ef8a5b24ea68ac933b6e3d4a</Anchor>
    <DeclaredIn>ConstSharedBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::SPtr_Equals</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>spdr::SPtr_Equals</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_s_ptr___equals.html</Path>
    <Abstract>A helper function object for STL associative containers.</Abstract>
    <DeclaredIn>Definitions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SPtr_Equals</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_s_ptr___equals.html</Path>
    <Anchor>a68b381caf980915d6dd59bbfea996004</Anchor>
    <Abstract>Compares the two T objects with ==.</Abstract>
    <DeclaredIn>Definitions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::SPtr_Hash</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>spdr::SPtr_Hash</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_s_ptr___hash.html</Path>
    <Abstract>A helper function object for STL associative containers.</Abstract>
    <DeclaredIn>Definitions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SPtr_Hash</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_s_ptr___hash.html</Path>
    <Anchor>a84abc5f77f1b639e6c1e0452562ff1b4</Anchor>
    <Abstract>Compute the hash value of a T object.</Abstract>
    <DeclaredIn>Definitions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::SPtr_Less</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>spdr::SPtr_Less</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_s_ptr___less.html</Path>
    <Abstract>A helper function object for STL container sort.</Abstract>
    <DeclaredIn>Definitions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SPtr_Less</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_s_ptr___less.html</Path>
    <Anchor>a6af444aa611b311417924c576a8bc29e</Anchor>
    <Abstract>Compares the two T objects with &amp;lt;.</Abstract>
    <DeclaredIn>Definitions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::SPtr_Greater</Name>
      <APILanguage>c</APILanguage>
      <Type>tmplt</Type>
      <Scope>spdr::SPtr_Greater</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_s_ptr___greater.html</Path>
    <Abstract>A helper function object for STL container sort.</Abstract>
    <DeclaredIn>Definitions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SPtr_Greater</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_s_ptr___greater.html</Path>
    <Anchor>a3f568e2f877308cc0049704d88e3daf3</Anchor>
    <Abstract>Compares the two T objects with &amp;gt;.</Abstract>
    <DeclaredIn>Definitions.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::MembershipListener</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::MembershipListener</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_membership_listener.html</Path>
    <Abstract>An interface for receiving membership events.</Abstract>
    <DeclaredIn>MembershipListener.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MembershipListener</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::MembershipListener</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_membership_listener.html</Path>
    <Anchor>a62722f52bdbe298359578424a8d54fd9</Anchor>
    <DeclaredIn>MembershipListener.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~MembershipListener</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::MembershipListener</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_membership_listener.html</Path>
    <Anchor>a29cb1e615298369db3b4607c1a3580e2</Anchor>
    <DeclaredIn>MembershipListener.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>onMembershipEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::MembershipListener</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_membership_listener.html</Path>
    <Anchor>af2ec8f7eb735b36868775081e1324e3d</Anchor>
    <Abstract>Delivers a membership event.</Abstract>
    <DeclaredIn>MembershipListener.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::MembershipService</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::MembershipService</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_membership_service.html</Path>
    <Abstract>An interface providing access to the membership service.</Abstract>
    <DeclaredIn>MembershipService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~MembershipService</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::MembershipService</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_membership_service.html</Path>
    <Anchor>a1c12a4a0eeffb6dcac6ac0abf4a193f1</Anchor>
    <DeclaredIn>MembershipService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>close</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::MembershipService</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_membership_service.html</Path>
    <Anchor>ae6c09bb316330746a238fb12672a8764</Anchor>
    <Abstract>Close the service.</Abstract>
    <DeclaredIn>MembershipService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isClosed</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::MembershipService</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_membership_service.html</Path>
    <Anchor>a1af84f8dcb10389a2e4e2f4aaa71fac0</Anchor>
    <Abstract>Is the service closed?</Abstract>
    <DeclaredIn>MembershipService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setHighPriorityMonitor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::MembershipService</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_membership_service.html</Path>
    <Anchor>a4c67bc10775fedd0b61eadbfd36ecd5e</Anchor>
    <Abstract>Mark/unmark this node as a high priority monitor.</Abstract>
    <DeclaredIn>MembershipService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isHighPriorityMonitor</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::MembershipService</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_membership_service.html</Path>
    <Anchor>a00cde6af72e64db76df41efa6194921c</Anchor>
    <Abstract>Whether this node is a high priority monitor.</Abstract>
    <DeclaredIn>MembershipService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setAttribute</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::MembershipService</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_membership_service.html</Path>
    <Anchor>a19797f4d3b1a0db24d72e0d98c852465</Anchor>
    <Abstract>Set (and overwrite) a key-value pair.</Abstract>
    <DeclaredIn>MembershipService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getAttribute</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::MembershipService</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_membership_service.html</Path>
    <Anchor>a76ca5a96fffb4a9f72e47a08db852006</Anchor>
    <Abstract>Get the value mapped to a key.</Abstract>
    <DeclaredIn>MembershipService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>removeAttribute</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::MembershipService</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_membership_service.html</Path>
    <Anchor>a6e079745e8adbc409d9d886696492135</Anchor>
    <Abstract>Remove a key-value pair.</Abstract>
    <DeclaredIn>MembershipService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>containsAttribute</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::MembershipService</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_membership_service.html</Path>
    <Anchor>a501b6a6eb16aa14714585513643486db</Anchor>
    <Abstract>Contains a key?</Abstract>
    <DeclaredIn>MembershipService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clearAttributeMap</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::MembershipService</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_membership_service.html</Path>
    <Anchor>a3d92aac802ea34f9560fb0dfcc5f95eb</Anchor>
    <Abstract>Clear all key-value attributes.</Abstract>
    <DeclaredIn>MembershipService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isEmptyAttributeMap</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::MembershipService</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_membership_service.html</Path>
    <Anchor>ac40c12f940293c1c23433ed3b083135f</Anchor>
    <Abstract>Is the attribute map empty?</Abstract>
    <DeclaredIn>MembershipService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>sizeOfAttributeMap</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::MembershipService</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_membership_service.html</Path>
    <Anchor>ac5bb25db4b41986cf8b176ee11a83091</Anchor>
    <Abstract>Size of attribute map.</Abstract>
    <DeclaredIn>MembershipService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getAttributeKeySet</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::MembershipService</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_membership_service.html</Path>
    <Anchor>a8acb5dcd58904b17cb45f7f12ea8a4fa</Anchor>
    <Abstract>Get the attribute key-set.</Abstract>
    <DeclaredIn>MembershipService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getForeignZoneMembership</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::MembershipService</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_membership_service.html</Path>
    <Anchor>a1805daa47e95717dedf11acffe9d03fb</Anchor>
    <Abstract>Get the membership view of a single base-zone.</Abstract>
    <DeclaredIn>MembershipService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getZoneCensus</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::MembershipService</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_membership_service.html</Path>
    <Anchor>a1729a5523ff30389b3a8093ae17157fe</Anchor>
    <Abstract>Get the zone census.</Abstract>
    <DeclaredIn>MembershipService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>EmptyAttributeValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::MembershipService</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_membership_service.html</Path>
    <Anchor>abcd780d783f504535b2183ec0a141adf</Anchor>
    <Abstract>A constant representing an empty attribute value.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MembershipService</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::MembershipService</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_membership_service.html</Path>
    <Anchor>a334a15ca4185bab2bb75de8fdf6c3267</Anchor>
    <DeclaredIn>MembershipService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::MutableSharedBuffer</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::MutableSharedBuffer</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_mutable_shared_buffer.html</Path>
    <DeclaredIn>MutableSharedBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MutableSharedBuffer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::MutableSharedBuffer</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_mutable_shared_buffer.html</Path>
    <Anchor>a3e978e97f4a6a766d47f7ef141c9f7da</Anchor>
    <Abstract>Zero length buffer, with NULL pointer.</Abstract>
    <DeclaredIn>MutableSharedBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MutableSharedBuffer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::MutableSharedBuffer</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_mutable_shared_buffer.html</Path>
    <Anchor>ab45031e542d97e1efc0bc5394e4e739a</Anchor>
    <Abstract>Constructor of a buffer from a raw pointer.</Abstract>
    <DeclaredIn>MutableSharedBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MutableSharedBuffer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::MutableSharedBuffer</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_mutable_shared_buffer.html</Path>
    <Anchor>a1fa6c38816261973a2567d19db1ad02b</Anchor>
    <Abstract>Constructor of a buffer from a shared_array, shallow copy.</Abstract>
    <DeclaredIn>MutableSharedBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~MutableSharedBuffer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::MutableSharedBuffer</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_mutable_shared_buffer.html</Path>
    <Anchor>a6308d159f563c8ab7737d22b263f530d</Anchor>
    <DeclaredIn>MutableSharedBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MutableSharedBuffer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::MutableSharedBuffer</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_mutable_shared_buffer.html</Path>
    <Anchor>a272a1c4af5120d458d860a224644ad97</Anchor>
    <Abstract>Shallow copy.</Abstract>
    <DeclaredIn>MutableSharedBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::MutableSharedBuffer</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_mutable_shared_buffer.html</Path>
    <Anchor>a853789f052566ca9a53fb127c56cded5</Anchor>
    <DeclaredIn>MutableSharedBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getBuffer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::MutableSharedBuffer</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_mutable_shared_buffer.html</Path>
    <Anchor>accebd61368bc90287d3b71a502938293</Anchor>
    <DeclaredIn>MutableSharedBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getLength</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::MutableSharedBuffer</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_mutable_shared_buffer.html</Path>
    <Anchor>ad888aef6e840be9860cdcb39e3a95618</Anchor>
    <DeclaredIn>MutableSharedBuffer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::NetworkEndpoints</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::NetworkEndpoints</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_network_endpoints.html</Path>
    <Abstract>Represents node network end-points, assuming multiple interfaces and a single port.</Abstract>
    <DeclaredIn>NetworkEndpoints.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NetworkEndpoints</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::NetworkEndpoints</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_network_endpoints.html</Path>
    <Anchor>a9d2be5dae6118f9e70abedde44a85e88</Anchor>
    <DeclaredIn>NetworkEndpoints.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NetworkEndpoints</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::NetworkEndpoints</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_network_endpoints.html</Path>
    <Anchor>a025791a238f18d9a47a9d86747fe5c86</Anchor>
    <Abstract>Construct from a vector of scoped-addresses and a port number.</Abstract>
    <DeclaredIn>NetworkEndpoints.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NetworkEndpoints</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::NetworkEndpoints</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_network_endpoints.html</Path>
    <Anchor>a4d7d1f907dd28f9a7144f099744c6d5a</Anchor>
    <Abstract>Copy constructor.</Abstract>
    <DeclaredIn>NetworkEndpoints.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::NetworkEndpoints</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_network_endpoints.html</Path>
    <Anchor>aa5a54d5c9165146f6a622c5f0eed3cd7</Anchor>
    <Abstract>Assignment operator.</Abstract>
    <DeclaredIn>NetworkEndpoints.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~NetworkEndpoints</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::NetworkEndpoints</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_network_endpoints.html</Path>
    <Anchor>aa02a955fc8e08be7549bdbeb8e172ef7</Anchor>
    <Abstract>Destructor.</Abstract>
    <DeclaredIn>NetworkEndpoints.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getAddresses</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::NetworkEndpoints</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_network_endpoints.html</Path>
    <Anchor>aed1e424c42f62973de69b8d0dcd81e0d</Anchor>
    <Abstract>Get the scoped-address vector.</Abstract>
    <DeclaredIn>NetworkEndpoints.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNumAddresses</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::NetworkEndpoints</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_network_endpoints.html</Path>
    <Anchor>ad8af1203e4cc71284582a3c964a1329a</Anchor>
    <Abstract>Get the number of addresses.</Abstract>
    <DeclaredIn>NetworkEndpoints.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getPort</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::NetworkEndpoints</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_network_endpoints.html</Path>
    <Anchor>a627346d4a490794d8b6c36fd4b31ca64</Anchor>
    <Abstract>Get the port number.</Abstract>
    <DeclaredIn>NetworkEndpoints.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>toString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::NetworkEndpoints</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_network_endpoints.html</Path>
    <Anchor>a85ea408357263b78ba21cc7b06701548</Anchor>
    <Abstract>A string representation of the network end-points.</Abstract>
    <DeclaredIn>NetworkEndpoints.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>ffunc</Type>
      <Scope>spdr::NetworkEndpoints</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_network_endpoints.html</Path>
    <Anchor>aa535a37afaecb6e65d8602927ffd7c43</Anchor>
    <Abstract>Compare two NetworkEndpoints objects for equality.</Abstract>
    <DeclaredIn>NetworkEndpoints.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>ffunc</Type>
      <Scope>spdr::NetworkEndpoints</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_network_endpoints.html</Path>
    <Anchor>a8423911adcd00e1b3d85fa34f214b312</Anchor>
    <Abstract>Compare two NetworkEndpoints objects for inequality.</Abstract>
    <DeclaredIn>NetworkEndpoints.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>ffunc</Type>
      <Scope>spdr::NetworkEndpoints</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_network_endpoints.html</Path>
    <Anchor>ae099c166d08d7455d8025674c53367d0</Anchor>
    <Abstract>Compare two NetworkEndpoints objects for less-than relative order.</Abstract>
    <DeclaredIn>NetworkEndpoints.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>ffunc</Type>
      <Scope>spdr::NetworkEndpoints</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_network_endpoints.html</Path>
    <Anchor>a0e792e129627c9df2a7d27cc7f6ed9ea</Anchor>
    <DeclaredIn>NetworkEndpoints.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>ffunc</Type>
      <Scope>spdr::NetworkEndpoints</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_network_endpoints.html</Path>
    <Anchor>a17174ac7c28766339d8d543a4a0ac331</Anchor>
    <DeclaredIn>NetworkEndpoints.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>ffunc</Type>
      <Scope>spdr::NetworkEndpoints</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_network_endpoints.html</Path>
    <Anchor>ac1c89f6d34881d4b5bc60b8703db6648</Anchor>
    <DeclaredIn>NetworkEndpoints.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::NodeID</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::NodeID</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_node_i_d.html</Path>
    <Abstract>Node ID carries the node&amp;#39;s name (String) and NetworkEndpoints.</Abstract>
    <DeclaredIn>NodeID.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNodeName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::NodeID</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_node_i_d.html</Path>
    <Anchor>a77fae77bf1076df0fd00673633bfb67c</Anchor>
    <Abstract>Get node name.</Abstract>
    <DeclaredIn>NodeID.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNetworkEndpoints</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::NodeID</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_node_i_d.html</Path>
    <Anchor>afeff32909d2d5c7c0cd05f6405aec833</Anchor>
    <Abstract>Get network end-points.</Abstract>
    <DeclaredIn>NodeID.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>toString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::NodeID</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_node_i_d.html</Path>
    <Anchor>a222e9ecbf8fabee4519fdd13f5359efa</Anchor>
    <Abstract>A string representation of the NodeID.</Abstract>
    <DeclaredIn>NodeID.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::NodeID</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_node_i_d.html</Path>
    <Anchor>af8ee5285d8a50c419ab42a7584a8b609</Anchor>
    <Abstract>Equality operator.</Abstract>
    <DeclaredIn>NodeID.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::NodeID</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_node_i_d.html</Path>
    <Anchor>ab0d8c1a0096b83d5a64f5f18b519040e</Anchor>
    <Abstract>Inequality operator.</Abstract>
    <DeclaredIn>NodeID.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::NodeID</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_node_i_d.html</Path>
    <Anchor>ac8cf9525c8ebaade48ef378bb6642f32</Anchor>
    <Abstract>Less than operator.</Abstract>
    <DeclaredIn>NodeID.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::NodeID</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_node_i_d.html</Path>
    <Anchor>a0463b981249a08007e5c5d7286f4424a</Anchor>
    <Abstract>Less than or equal operator.</Abstract>
    <DeclaredIn>NodeID.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::NodeID</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_node_i_d.html</Path>
    <Anchor>a8cebb0314fcd44807eb2d27b597436fe</Anchor>
    <Abstract>Greater than operator.</Abstract>
    <DeclaredIn>NodeID.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::NodeID</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_node_i_d.html</Path>
    <Anchor>a6862e81f1c5aa9a33f4249b13d8d43d5</Anchor>
    <Abstract>Greater than or equal operator.</Abstract>
    <DeclaredIn>NodeID.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hash_value</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::NodeID</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_node_i_d.html</Path>
    <Anchor>af90e63826b4d6b9b2a5b52cb49de01bd</Anchor>
    <Abstract>Returns the hash value.</Abstract>
    <DeclaredIn>NodeID.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~NodeID</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::NodeID</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_node_i_d.html</Path>
    <Anchor>ad8ac952b34bee071100c0799115a2f19</Anchor>
    <DeclaredIn>NodeID.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NodeID</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::NodeID</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_node_i_d.html</Path>
    <Anchor>a7bc9bea7c6e2eef211f8af13ead7fa89</Anchor>
    <Abstract>Default constructor.</Abstract>
    <DeclaredIn>NodeID.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::NodeID::SPtr_Equals</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::NodeID::SPtr_Equals</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_node_i_d_1_1_s_ptr___equals.html</Path>
    <Abstract>A helper function object for STL associative containers.</Abstract>
    <DeclaredIn>NodeID.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::NodeID::SPtr_Equals</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_node_i_d_1_1_s_ptr___equals.html</Path>
    <Anchor>ac5813bd41ade7711496ba08f13405ec0</Anchor>
    <Abstract>Compares the two NodeID objects with ==.</Abstract>
    <DeclaredIn>NodeID.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::NodeID::SPtr_Greater</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::NodeID::SPtr_Greater</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_node_i_d_1_1_s_ptr___greater.html</Path>
    <Abstract>A helper function object for STL container sort.</Abstract>
    <DeclaredIn>NodeID.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::NodeID::SPtr_Greater</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_node_i_d_1_1_s_ptr___greater.html</Path>
    <Anchor>a352fd0d2990f263c7a7b52ef1375c651</Anchor>
    <Abstract>Compares the two NodeID objects with &amp;gt;.</Abstract>
    <DeclaredIn>NodeID.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::NodeID::SPtr_Hash</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::NodeID::SPtr_Hash</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_node_i_d_1_1_s_ptr___hash.html</Path>
    <Abstract>A helper function object for STL associative containers.</Abstract>
    <DeclaredIn>NodeID.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::NodeID::SPtr_Hash</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_node_i_d_1_1_s_ptr___hash.html</Path>
    <Anchor>ae5fa972e1e1b7d8f1be5dbeaab950963</Anchor>
    <Abstract>Compute the hash value of a NodeID object.</Abstract>
    <DeclaredIn>NodeID.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::NodeID::SPtr_Less</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::NodeID::SPtr_Less</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_node_i_d_1_1_s_ptr___less.html</Path>
    <Abstract>A helper function object for STL container sort.</Abstract>
    <DeclaredIn>NodeID.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator()</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::NodeID::SPtr_Less</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_node_i_d_1_1_s_ptr___less.html</Path>
    <Anchor>a717a4d8df7cf0b59978f42fdb6760cba</Anchor>
    <Abstract>Compares the two NodeID objects with &amp;lt;.</Abstract>
    <DeclaredIn>NodeID.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::PropertyMap</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::PropertyMap</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_property_map.html</Path>
    <Abstract>This object is a map that holds string key-value pairs.</Abstract>
    <DeclaredIn>PropertyMap.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PropertyMap</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::PropertyMap</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_property_map.html</Path>
    <Anchor>a05e183cc97ca19481e4dcb6746af1312</Anchor>
    <Abstract>Construct with empty map.</Abstract>
    <DeclaredIn>PropertyMap.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PropertyMap</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::PropertyMap</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_property_map.html</Path>
    <Anchor>a1ae195ad5ac7d4741ac3c1509561993c</Anchor>
    <Abstract>Construct from a map.</Abstract>
    <DeclaredIn>PropertyMap.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PropertyMap</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::PropertyMap</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_property_map.html</Path>
    <Anchor>aebf16f987918d35b52cbccb40341a7bb</Anchor>
    <Abstract>Copy constructor.</Abstract>
    <DeclaredIn>PropertyMap.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::PropertyMap</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_property_map.html</Path>
    <Anchor>a8926d2abc78ef9146dff7a1d2cb6f1b6</Anchor>
    <Abstract>Assignment operator.</Abstract>
    <DeclaredIn>PropertyMap.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~PropertyMap</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::PropertyMap</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_property_map.html</Path>
    <Anchor>a5bca7376bb1c9af17ba18456f26cfa79</Anchor>
    <DeclaredIn>PropertyMap.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setProperty</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::PropertyMap</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_property_map.html</Path>
    <Anchor>a8d89d8c455644c8cf62e331561f6806f</Anchor>
    <Abstract>Set (and replace) a key-value pair, returning the old value.</Abstract>
    <DeclaredIn>PropertyMap.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getProperty</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::PropertyMap</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_property_map.html</Path>
    <Anchor>a8b81aa50a72d025c6d400ff9cc0cf21c</Anchor>
    <Abstract>Get a value by its key.</Abstract>
    <DeclaredIn>PropertyMap.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>removeProperty</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::PropertyMap</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_property_map.html</Path>
    <Anchor>a6ab1a3778781cb04ea1475e851a380a3</Anchor>
    <Abstract>Remove a pair according to key, returning the old value.</Abstract>
    <DeclaredIn>PropertyMap.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>containsKey</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::PropertyMap</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_property_map.html</Path>
    <Anchor>a7d970733a476e7f1f5abfe1c0148aea7</Anchor>
    <Abstract>Whether a key exists.</Abstract>
    <DeclaredIn>PropertyMap.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>load</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::PropertyMap</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_property_map.html</Path>
    <Anchor>ac047a97f45274cbb6c9c20e872ca4943</Anchor>
    <Abstract>Loads properties from an input stream.</Abstract>
    <DeclaredIn>PropertyMap.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>toString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::PropertyMap</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_property_map.html</Path>
    <Anchor>a50a16b0e9e0ca4ff4e2c3f4cbd190bd6</Anchor>
    <Abstract>A string representation of the map.</Abstract>
    <DeclaredIn>PropertyMap.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;&lt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>ffunc</Type>
      <Scope>spdr::PropertyMap</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_property_map.html</Path>
    <Anchor>acb72a5fd4e841e3419f3ae292cf357b0</Anchor>
    <Abstract>Send to an output stream operator.</Abstract>
    <DeclaredIn>PropertyMap.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::SpiderCast</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::SpiderCast</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast.html</Path>
    <Abstract>SpiderCast represents a node in the overlay and creates membership and communication services...</Abstract>
    <DeclaredIn>SpiderCast.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~SpiderCast</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCast</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast.html</Path>
    <Anchor>aee55f6202810e73bb0550ceefcb30fb2</Anchor>
    <DeclaredIn>SpiderCast.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>start</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCast</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast.html</Path>
    <Anchor>ade162db316c5343539a265ea4a4dc792</Anchor>
    <Abstract>Start SpiderCast, join the overlay.</Abstract>
    <DeclaredIn>SpiderCast.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>close</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCast</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast.html</Path>
    <Anchor>a80622281424b71ca32f3ddf6dfb243a5</Anchor>
    <Abstract>Close SpiderCast, leave the overlay.</Abstract>
    <DeclaredIn>SpiderCast.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createMembershipService</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCast</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast.html</Path>
    <Anchor>a02a125db5f7c1b114ae9cc7f1ff4c8e1</Anchor>
    <Abstract>Create the membership service.</Abstract>
    <DeclaredIn>SpiderCast.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createDHTService</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCast</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast.html</Path>
    <Anchor>a2c6ba96b954b6ea4ce42a379daaba489</Anchor>
    <Abstract>Create the DHT service.</Abstract>
    <DeclaredIn>SpiderCast.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createDHTServer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCast</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast.html</Path>
    <Anchor>a257cfc9c0042a0ba7882590c12bb8a9f</Anchor>
    <Abstract>Create a DHT server.</Abstract>
    <DeclaredIn>SpiderCast.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createTopic</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCast</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast.html</Path>
    <Anchor>aac9de5b8e21ccbc9035957fb63cbbf58</Anchor>
    <Abstract>Create a Topic.</Abstract>
    <DeclaredIn>SpiderCast.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createTopicPublisher</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCast</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast.html</Path>
    <Anchor>a0925d1e32d0b1b192b5fc913bc9b48fd</Anchor>
    <Abstract>Create a TopicPublisher.</Abstract>
    <DeclaredIn>SpiderCast.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createTopicSubscriber</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCast</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast.html</Path>
    <Anchor>a1a8b6229e5b61919a39fa7c669581c90</Anchor>
    <Abstract>Create a TopicSubscriber.</Abstract>
    <DeclaredIn>SpiderCast.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createLeaderElectionService</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCast</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast.html</Path>
    <Anchor>a7152f537afa76cf4e540403d2dc4bf5b</Anchor>
    <Abstract>Create the leader election service.</Abstract>
    <DeclaredIn>SpiderCast.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createP2PStreamTx</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCast</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast.html</Path>
    <Anchor>a5f0709cb371afb09d07bd7d16fa49bc8</Anchor>
    <DeclaredIn>SpiderCast.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createP2PStreamRcv</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCast</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast.html</Path>
    <Anchor>a337ab4e005ab75845a3f3d10e340e83c</Anchor>
    <DeclaredIn>SpiderCast.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNodeState</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCast</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast.html</Path>
    <Anchor>a54481de2e2d72a1a32ce2f75e264a1ce</Anchor>
    <Abstract>Get the node&amp;#39;s state.</Abstract>
    <DeclaredIn>SpiderCast.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>toString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCast</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast.html</Path>
    <Anchor>a10623dac9c5656b1379c7c1569d76778</Anchor>
    <Abstract>A string representation of the node identity and state.</Abstract>
    <DeclaredIn>SpiderCast.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNodeID</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCast</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast.html</Path>
    <Anchor>a7fa7d1cf84d84d0b3d0403989ab72fc4</Anchor>
    <Abstract>Get the node&amp;#39;s NodeID, carrying the node name and network end-points.</Abstract>
    <DeclaredIn>SpiderCast.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getBusName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCast</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast.html</Path>
    <Anchor>a232f59de094fd2aed8680dd3f98d250a</Anchor>
    <Abstract>Get the node&amp;#39;s bus-name.</Abstract>
    <DeclaredIn>SpiderCast.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNodeStateName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>spdr::SpiderCast</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast.html</Path>
    <Anchor>a18893820c0f4c926ff108047f634b7f8</Anchor>
    <Abstract>Convert the NodeState enum value to a string.</Abstract>
    <DeclaredIn>SpiderCast.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SpiderCast</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCast</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast.html</Path>
    <Anchor>a43c8a5f7a1e9854ec6e0733bd4f5efd6</Anchor>
    <Abstract>Default constructor.</Abstract>
    <DeclaredIn>SpiderCast.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>nodeStateName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::SpiderCast</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast.html</Path>
    <Anchor>ab9c8b8de5e4f37776dd14881d9687c8a</Anchor>
    <Abstract>NodeState name array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Init</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>spdr::SpiderCast</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast.html</Path>
    <Anchor>ac97d450d15d3c0347cf17836fd38828ea51c9a7fd85d6008fe90cf434e78626c5</Anchor>
    <Abstract>After creation, before start.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Started</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>spdr::SpiderCast</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast.html</Path>
    <Anchor>ac97d450d15d3c0347cf17836fd38828ea7ae40378c7e8db43d058f09359f2d8c3</Anchor>
    <Abstract>After start, working normally.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Closed</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>spdr::SpiderCast</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast.html</Path>
    <Anchor>ac97d450d15d3c0347cf17836fd38828ea906cd12c81cbb0873f49a58d60951633</Anchor>
    <Abstract>After close.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Error</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>spdr::SpiderCast</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast.html</Path>
    <Anchor>ac97d450d15d3c0347cf17836fd38828eac4f5e663a172333306612f2435731261</Anchor>
    <Abstract>In an error state (closed).</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::SpiderCastConfig</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::SpiderCastConfig</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_config.html</Path>
    <Abstract>SpiderCast main configuration object.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~SpiderCastConfig</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastConfig</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_config.html</Path>
    <Anchor>a233c9b1ff067dfcecd60559df1e7c966</Anchor>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>toString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastConfig</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_config.html</Path>
    <Anchor>a6a2a2f43c0e20fea5346bad421d56503</Anchor>
    <Abstract>A string representation of the configuration.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BasicConfig</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::BasicConfig</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_basic_config.html</Path>
    <Anchor>a2ffbb91a7de3943c0093cec39bee8949</Anchor>
    <Abstract>Construct from a PropertyMap.</Abstract>
    <DeclaredIn>BasicConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BasicConfig</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::BasicConfig</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_basic_config.html</Path>
    <Anchor>a92098687225b7a22736ee5c9e849da11</Anchor>
    <Abstract>Copy constructor.</Abstract>
    <DeclaredIn>BasicConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::BasicConfig</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_basic_config.html</Path>
    <Anchor>a7ff297c329b192b4dc1545d1cd876b3c</Anchor>
    <Abstract>Assignment operator.</Abstract>
    <DeclaredIn>BasicConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~BasicConfig</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::BasicConfig</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_basic_config.html</Path>
    <Anchor>afe33f8923a4eb94d2e9c2aefb8fe5023</Anchor>
    <Abstract>Destructor.</Abstract>
    <DeclaredIn>BasicConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getProperty</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::BasicConfig</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_basic_config.html</Path>
    <Anchor>a45256252330974a1887a8aa2e9b40a51</Anchor>
    <Abstract>Get the value that corresponds to the property key.</Abstract>
    <DeclaredIn>BasicConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getMandatoryDoubleProperty</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::BasicConfig</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_basic_config.html</Path>
    <Anchor>a5d1b196274971f4b353ed79cd325ab13</Anchor>
    <Abstract>Get the value of a mandatory property, parsed as a double.</Abstract>
    <DeclaredIn>BasicConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getMandatoryInt64Property</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::BasicConfig</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_basic_config.html</Path>
    <Anchor>a55e420d7b111103c9d60931f306250be</Anchor>
    <Abstract>Get the value of a mandatory property, parsed as a int64_t.</Abstract>
    <DeclaredIn>BasicConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getMandatoryInt32Property</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::BasicConfig</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_basic_config.html</Path>
    <Anchor>ae47f0e0d105ac54c9eb65c93888ef0f5</Anchor>
    <Abstract>Get the value of a mandatory property, parsed as a int32_t.</Abstract>
    <DeclaredIn>BasicConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getMandatoryProperty</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::BasicConfig</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_basic_config.html</Path>
    <Anchor>a84b5afcb54ee082737cadf2bbbbf924e</Anchor>
    <Abstract>Get the String value of a mandatory property.</Abstract>
    <DeclaredIn>BasicConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOptionalInt64Property</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::BasicConfig</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_basic_config.html</Path>
    <Anchor>ad773eb9fc41e22d93c5e41ff5a89ec46</Anchor>
    <Abstract>Get an optional 64 bit integer property.</Abstract>
    <DeclaredIn>BasicConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOptionalInt32Property</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::BasicConfig</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_basic_config.html</Path>
    <Anchor>a442d05305baaac69e9e4ceafc84067cb</Anchor>
    <Abstract>Get an optional 32 bit integer property.</Abstract>
    <DeclaredIn>BasicConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOptionalDoubleProperty</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::BasicConfig</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_basic_config.html</Path>
    <Anchor>a910f2fef60990133cbd4858923139559</Anchor>
    <Abstract>Get an optional double property.</Abstract>
    <DeclaredIn>BasicConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOptionalBooleanProperty</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::BasicConfig</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_basic_config.html</Path>
    <Anchor>a84736b3ff320eff4d7f8bec2f3d5ea43</Anchor>
    <Abstract>Get an optional boolean property.</Abstract>
    <DeclaredIn>BasicConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOptionalProperty</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::BasicConfig</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_basic_config.html</Path>
    <Anchor>a826b1e4003b8f3c0c206a23d5567f990</Anchor>
    <Abstract>Get an optional String property.</Abstract>
    <DeclaredIn>BasicConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>size</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::BasicConfig</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_basic_config.html</Path>
    <Anchor>a9e292cd557bb7aeefb4268c637168a5f</Anchor>
    <Abstract>The size of the property map.</Abstract>
    <DeclaredIn>BasicConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>empty</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::BasicConfig</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_basic_config.html</Path>
    <Anchor>a1ae5eb32819a10b2e116cbe988e09eeb</Anchor>
    <Abstract>Is the property map empty?</Abstract>
    <DeclaredIn>BasicConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SpiderCastConfig</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastConfig</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_config.html</Path>
    <Anchor>a070f50791b93d19368ed476335283a67</Anchor>
    <Abstract>Construct from properties.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SpiderCastConfig</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastConfig</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_config.html</Path>
    <Anchor>a055698e8f0da84e36ca29181d86ce7e4</Anchor>
    <Abstract>Copy constructor.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>reportIllegalNumberFormat</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>spdr::BasicConfig</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_basic_config.html</Path>
    <Anchor>a8e314ebf17ec2156bb2c3d1d182f7f3f</Anchor>
    <Abstract>Re-throw the bad_lexical_cast exception as an IllegalConfigException, with the name of the property a...</Abstract>
    <DeclaredIn>BasicConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>prop</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::BasicConfig</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_basic_config.html</Path>
    <Anchor>a1d94d270f92968fb5287b0d0741be474</Anchor>
    <Abstract>The internal property map.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::SpiderCastEventListener</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::SpiderCastEventListener</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_event_listener.html</Path>
    <Abstract>An interface for receiving life-cycle events from the SpiderCast instance.</Abstract>
    <DeclaredIn>SpiderCastEventListener.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SpiderCastEventListener</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastEventListener</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_event_listener.html</Path>
    <Anchor>a3a5e43dfad1e812d2ac179ce14a717eb</Anchor>
    <DeclaredIn>SpiderCastEventListener.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~SpiderCastEventListener</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastEventListener</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_event_listener.html</Path>
    <Anchor>a816fa244f74902b79850f171d36034ab</Anchor>
    <DeclaredIn>SpiderCastEventListener.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>onEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastEventListener</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_event_listener.html</Path>
    <Anchor>a3da3d6ee988f67cffd93050c0ab700e2</Anchor>
    <Abstract>Delivers a SpiderCast life-cycle event.</Abstract>
    <DeclaredIn>SpiderCastEventListener.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::SpiderCastFactory</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::SpiderCastFactory</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_factory.html</Path>
    <Abstract>A factory for SpiderCast instances, configuration objects, and other utilities.</Abstract>
    <DeclaredIn>SpiderCastFactory.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~SpiderCastFactory</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastFactory</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_factory.html</Path>
    <Anchor>a804154f9eeebf550cbcc01a08311ae2f</Anchor>
    <Abstract>Destructor.</Abstract>
    <DeclaredIn>SpiderCastFactory.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createSpiderCast</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastFactory</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_factory.html</Path>
    <Anchor>ab643c28920c170bdc8ab948ad1671d7f</Anchor>
    <Abstract>Create a SpiderCast instance.</Abstract>
    <DeclaredIn>SpiderCastFactory.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createSpiderCastConfig</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastFactory</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_factory.html</Path>
    <Anchor>abf1787bf383da60bfc3408f184acfe17</Anchor>
    <Abstract>Create a SpiderCast configuration object.</Abstract>
    <DeclaredIn>SpiderCastFactory.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createSpiderCastConfig</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastFactory</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_factory.html</Path>
    <Anchor>a3cb477ac83959fb3d0549d8b7059df90</Anchor>
    <Abstract>Create a SpiderCast configuration object, with supervisor bootstrap.</Abstract>
    <DeclaredIn>SpiderCastFactory.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>createNodeID_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastFactory</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_factory.html</Path>
    <Anchor>a403f40ea32e48903db780cb36076cdf9</Anchor>
    <Abstract>Create a NodeID implementation from a string.</Abstract>
    <DeclaredIn>SpiderCastFactory.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>loadBootstrapSet</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastFactory</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_factory.html</Path>
    <Anchor>a6f0975d026c2b61f45f73658bfe96b43</Anchor>
    <Abstract>Load the bootstrap-set from an input stream.</Abstract>
    <DeclaredIn>SpiderCastFactory.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>registerLogListener</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastFactory</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_factory.html</Path>
    <Anchor>a4b036c6ac7190740914f49c1063b39e6</Anchor>
    <Abstract>Register a log listener to receive internal log events.</Abstract>
    <DeclaredIn>SpiderCastFactory.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>changeLogLevel</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastFactory</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_factory.html</Path>
    <Anchor>a7a12f20b52dfc42fabf7a05164c0690f</Anchor>
    <Abstract>Change the log level.</Abstract>
    <DeclaredIn>SpiderCastFactory.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getInstance</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>spdr::SpiderCastFactory</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_factory.html</Path>
    <Anchor>a5bbf37e4981d1c02499563b413f63399</Anchor>
    <Abstract>Get the singleton factory instance.</Abstract>
    <DeclaredIn>SpiderCastFactory.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SpiderCastFactory</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastFactory</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_factory.html</Path>
    <Anchor>a9a720a039cca02b327cac000a09a1fea</Anchor>
    <DeclaredIn>SpiderCastFactory.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::SpiderCastLogicError</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::SpiderCastLogicError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_logic_error.html</Path>
    <Abstract>Super-class of all SpiderCast logic errors type exceptions.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SpiderCastLogicError</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastLogicError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_logic_error.html</Path>
    <Anchor>a2f506f28d1d4aca2f42d997dfedaf17a</Anchor>
    <Abstract>Construct with a &amp;quot;what&amp;quot; string.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SpiderCastLogicError</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastLogicError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_logic_error.html</Path>
    <Anchor>a902925d2ef6fce3e92b1031e853d503a</Anchor>
    <Abstract>Copy constructor.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastLogicError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_logic_error.html</Path>
    <Anchor>a2260c75b18818c10975ded91a91a904b</Anchor>
    <Abstract>Assignment operator.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~SpiderCastLogicError</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastLogicError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_logic_error.html</Path>
    <Anchor>ab6f9a55b8af0c4f701cf316beb6a9b5d</Anchor>
    <Abstract>Destructor.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getStackTrace</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastLogicError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_logic_error.html</Path>
    <Anchor>a9f8dab781baf3cf4519898bee33dfba2</Anchor>
    <Abstract>Get a string representation of the stack back-trace.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>printStackTrace</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastLogicError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_logic_error.html</Path>
    <Anchor>a89f9d626148e788df23c3a34ce36a83f</Anchor>
    <Abstract>Print the stack back trace to the standard error.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>printStackTrace</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastLogicError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_logic_error.html</Path>
    <Anchor>a6ed015eb5e992eebda6cdca56a020142</Anchor>
    <Abstract>Print the stack back trace to the output stream.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::IllegalArgumentException</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::IllegalArgumentException</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_illegal_argument_exception.html</Path>
    <Abstract>Thrown when an illegal argument is passed to method.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IllegalArgumentException</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::IllegalArgumentException</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_illegal_argument_exception.html</Path>
    <Anchor>ab2033e86f86b241452545ef0297856fe</Anchor>
    <Abstract>Construct with a &amp;quot;what&amp;quot; string.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~IllegalArgumentException</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::IllegalArgumentException</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_illegal_argument_exception.html</Path>
    <Anchor>ac3fada038bf14343beb3db8908463c67</Anchor>
    <Abstract>Destructor.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SpiderCastLogicError</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastLogicError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_logic_error.html</Path>
    <Anchor>a2f506f28d1d4aca2f42d997dfedaf17a</Anchor>
    <Abstract>Construct with a &amp;quot;what&amp;quot; string.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SpiderCastLogicError</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastLogicError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_logic_error.html</Path>
    <Anchor>a902925d2ef6fce3e92b1031e853d503a</Anchor>
    <Abstract>Copy constructor.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastLogicError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_logic_error.html</Path>
    <Anchor>a2260c75b18818c10975ded91a91a904b</Anchor>
    <Abstract>Assignment operator.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~SpiderCastLogicError</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastLogicError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_logic_error.html</Path>
    <Anchor>ab6f9a55b8af0c4f701cf316beb6a9b5d</Anchor>
    <Abstract>Destructor.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getStackTrace</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastLogicError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_logic_error.html</Path>
    <Anchor>a9f8dab781baf3cf4519898bee33dfba2</Anchor>
    <Abstract>Get a string representation of the stack back-trace.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>printStackTrace</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastLogicError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_logic_error.html</Path>
    <Anchor>a89f9d626148e788df23c3a34ce36a83f</Anchor>
    <Abstract>Print the stack back trace to the standard error.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>printStackTrace</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastLogicError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_logic_error.html</Path>
    <Anchor>a6ed015eb5e992eebda6cdca56a020142</Anchor>
    <Abstract>Print the stack back trace to the output stream.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::IllegalStateException</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::IllegalStateException</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_illegal_state_exception.html</Path>
    <Abstract>Thrown when an operation is performed on an object with illegal state.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IllegalStateException</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::IllegalStateException</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_illegal_state_exception.html</Path>
    <Anchor>adf3cec96ac0dab932a8f8457a4878ff1</Anchor>
    <Abstract>Construct with a &amp;quot;what&amp;quot; string.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~IllegalStateException</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::IllegalStateException</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_illegal_state_exception.html</Path>
    <Anchor>af9befea778212b9dbfb0f7f5b0db7740</Anchor>
    <Abstract>Destructor.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SpiderCastLogicError</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastLogicError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_logic_error.html</Path>
    <Anchor>a2f506f28d1d4aca2f42d997dfedaf17a</Anchor>
    <Abstract>Construct with a &amp;quot;what&amp;quot; string.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SpiderCastLogicError</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastLogicError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_logic_error.html</Path>
    <Anchor>a902925d2ef6fce3e92b1031e853d503a</Anchor>
    <Abstract>Copy constructor.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastLogicError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_logic_error.html</Path>
    <Anchor>a2260c75b18818c10975ded91a91a904b</Anchor>
    <Abstract>Assignment operator.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~SpiderCastLogicError</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastLogicError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_logic_error.html</Path>
    <Anchor>ab6f9a55b8af0c4f701cf316beb6a9b5d</Anchor>
    <Abstract>Destructor.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getStackTrace</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastLogicError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_logic_error.html</Path>
    <Anchor>a9f8dab781baf3cf4519898bee33dfba2</Anchor>
    <Abstract>Get a string representation of the stack back-trace.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>printStackTrace</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastLogicError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_logic_error.html</Path>
    <Anchor>a89f9d626148e788df23c3a34ce36a83f</Anchor>
    <Abstract>Print the stack back trace to the standard error.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>printStackTrace</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastLogicError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_logic_error.html</Path>
    <Anchor>a6ed015eb5e992eebda6cdca56a020142</Anchor>
    <Abstract>Print the stack back trace to the output stream.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::IllegalConfigException</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::IllegalConfigException</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_illegal_config_exception.html</Path>
    <Abstract>Thrown when an attempt to create a configuration object fails due to wrong parameters or relations be...</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IllegalConfigException</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::IllegalConfigException</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_illegal_config_exception.html</Path>
    <Anchor>a99a7bd2a02954636eb467979e8009b2c</Anchor>
    <Abstract>Construct with a &amp;quot;what&amp;quot; string.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~IllegalConfigException</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::IllegalConfigException</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_illegal_config_exception.html</Path>
    <Anchor>aaff748f86bceb9d4d9b1c5c4c58a2e09</Anchor>
    <Abstract>Destructor.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SpiderCastLogicError</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastLogicError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_logic_error.html</Path>
    <Anchor>a2f506f28d1d4aca2f42d997dfedaf17a</Anchor>
    <Abstract>Construct with a &amp;quot;what&amp;quot; string.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SpiderCastLogicError</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastLogicError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_logic_error.html</Path>
    <Anchor>a902925d2ef6fce3e92b1031e853d503a</Anchor>
    <Abstract>Copy constructor.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastLogicError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_logic_error.html</Path>
    <Anchor>a2260c75b18818c10975ded91a91a904b</Anchor>
    <Abstract>Assignment operator.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~SpiderCastLogicError</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastLogicError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_logic_error.html</Path>
    <Anchor>ab6f9a55b8af0c4f701cf316beb6a9b5d</Anchor>
    <Abstract>Destructor.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getStackTrace</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastLogicError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_logic_error.html</Path>
    <Anchor>a9f8dab781baf3cf4519898bee33dfba2</Anchor>
    <Abstract>Get a string representation of the stack back-trace.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>printStackTrace</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastLogicError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_logic_error.html</Path>
    <Anchor>a89f9d626148e788df23c3a34ce36a83f</Anchor>
    <Abstract>Print the stack back trace to the standard error.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>printStackTrace</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastLogicError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_logic_error.html</Path>
    <Anchor>a6ed015eb5e992eebda6cdca56a020142</Anchor>
    <Abstract>Print the stack back trace to the output stream.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::BufferNotWriteableException</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::BufferNotWriteableException</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_buffer_not_writeable_exception.html</Path>
    <Abstract>Thrown when a read-only ByteBuffer is tried to be written.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BufferNotWriteableException</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::BufferNotWriteableException</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_buffer_not_writeable_exception.html</Path>
    <Anchor>af19de9db75194ad0091b5ecefbfe7136</Anchor>
    <Abstract>Construct with a &amp;quot;what&amp;quot; string.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~BufferNotWriteableException</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::BufferNotWriteableException</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_buffer_not_writeable_exception.html</Path>
    <Anchor>aa3e3b807534da418ac8647c11411b660</Anchor>
    <Abstract>Destructor.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SpiderCastLogicError</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastLogicError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_logic_error.html</Path>
    <Anchor>a2f506f28d1d4aca2f42d997dfedaf17a</Anchor>
    <Abstract>Construct with a &amp;quot;what&amp;quot; string.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SpiderCastLogicError</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastLogicError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_logic_error.html</Path>
    <Anchor>a902925d2ef6fce3e92b1031e853d503a</Anchor>
    <Abstract>Copy constructor.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastLogicError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_logic_error.html</Path>
    <Anchor>a2260c75b18818c10975ded91a91a904b</Anchor>
    <Abstract>Assignment operator.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~SpiderCastLogicError</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastLogicError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_logic_error.html</Path>
    <Anchor>ab6f9a55b8af0c4f701cf316beb6a9b5d</Anchor>
    <Abstract>Destructor.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getStackTrace</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastLogicError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_logic_error.html</Path>
    <Anchor>a9f8dab781baf3cf4519898bee33dfba2</Anchor>
    <Abstract>Get a string representation of the stack back-trace.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>printStackTrace</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastLogicError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_logic_error.html</Path>
    <Anchor>a89f9d626148e788df23c3a34ce36a83f</Anchor>
    <Abstract>Print the stack back trace to the standard error.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>printStackTrace</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastLogicError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_logic_error.html</Path>
    <Anchor>a6ed015eb5e992eebda6cdca56a020142</Anchor>
    <Abstract>Print the stack back trace to the output stream.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::IndexOutOfBoundsException</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::IndexOutOfBoundsException</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_index_out_of_bounds_exception.html</Path>
    <Abstract>Thrown when a ByteBuffer (or any other sequence container that supports this) is read or written past...</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>IndexOutOfBoundsException</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::IndexOutOfBoundsException</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_index_out_of_bounds_exception.html</Path>
    <Anchor>a6ffc5e6529b592602c160ff267e1e7cd</Anchor>
    <Abstract>Construct with a &amp;quot;what&amp;quot; string.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~IndexOutOfBoundsException</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::IndexOutOfBoundsException</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_index_out_of_bounds_exception.html</Path>
    <Anchor>a5a15335d287dd76ec8570d0ca755343b</Anchor>
    <Abstract>Destructor.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SpiderCastLogicError</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastLogicError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_logic_error.html</Path>
    <Anchor>a2f506f28d1d4aca2f42d997dfedaf17a</Anchor>
    <Abstract>Construct with a &amp;quot;what&amp;quot; string.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SpiderCastLogicError</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastLogicError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_logic_error.html</Path>
    <Anchor>a902925d2ef6fce3e92b1031e853d503a</Anchor>
    <Abstract>Copy constructor.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastLogicError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_logic_error.html</Path>
    <Anchor>a2260c75b18818c10975ded91a91a904b</Anchor>
    <Abstract>Assignment operator.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~SpiderCastLogicError</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastLogicError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_logic_error.html</Path>
    <Anchor>ab6f9a55b8af0c4f701cf316beb6a9b5d</Anchor>
    <Abstract>Destructor.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getStackTrace</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastLogicError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_logic_error.html</Path>
    <Anchor>a9f8dab781baf3cf4519898bee33dfba2</Anchor>
    <Abstract>Get a string representation of the stack back-trace.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>printStackTrace</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastLogicError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_logic_error.html</Path>
    <Anchor>a89f9d626148e788df23c3a34ce36a83f</Anchor>
    <Abstract>Print the stack back trace to the standard error.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>printStackTrace</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastLogicError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_logic_error.html</Path>
    <Anchor>a6ed015eb5e992eebda6cdca56a020142</Anchor>
    <Abstract>Print the stack back trace to the output stream.</Abstract>
    <DeclaredIn>SpiderCastLogicError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::SpiderCastRuntimeError</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::SpiderCastRuntimeError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_runtime_error.html</Path>
    <Abstract>Super-class of all SpiderCast runtime error type exceptions.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SpiderCastRuntimeError</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastRuntimeError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_runtime_error.html</Path>
    <Anchor>afd2335a17644f2da0c72e6d8d3cabbd7</Anchor>
    <Abstract>Construct with a &amp;quot;what&amp;quot; string.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SpiderCastRuntimeError</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastRuntimeError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_runtime_error.html</Path>
    <Anchor>a36217770d6178002cc70848d26ad8db4</Anchor>
    <Abstract>Copy constructor.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastRuntimeError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_runtime_error.html</Path>
    <Anchor>ad1783c67a6cc25e76a0d2b8ee59a3633</Anchor>
    <Abstract>Assignment operator.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~SpiderCastRuntimeError</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastRuntimeError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_runtime_error.html</Path>
    <Anchor>a480e6a67b6e9c27d19eaf2371155dcc6</Anchor>
    <Abstract>Destructor.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getStackTrace</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastRuntimeError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_runtime_error.html</Path>
    <Anchor>aa6178f9f35f9f534b250d7a4b74a87bc</Anchor>
    <Abstract>Get a string representation of the stack back-trace.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>printStackTrace</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastRuntimeError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_runtime_error.html</Path>
    <Anchor>ae45de76a4251d1b6f5823eb734165fe9</Anchor>
    <Abstract>Print the stack back trace to the standard error.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>printStackTrace</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastRuntimeError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_runtime_error.html</Path>
    <Anchor>a7e037dcb9297108b6686f45cb08e062c</Anchor>
    <Abstract>Print the stack back trace to the output stream.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::NullPointerException</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::NullPointerException</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_null_pointer_exception.html</Path>
    <Abstract>Thrown when an NULL pointer (or boost::shared_ptr) is used inappropriately.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NullPointerException</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::NullPointerException</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_null_pointer_exception.html</Path>
    <Anchor>a0158d376601828c7a006391dc6edc3f3</Anchor>
    <Abstract>Construct with a &amp;quot;what&amp;quot; string.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~NullPointerException</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::NullPointerException</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_null_pointer_exception.html</Path>
    <Anchor>a94e3c384372a3f15f6a3ed641b176e19</Anchor>
    <Abstract>Destructor.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SpiderCastRuntimeError</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastRuntimeError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_runtime_error.html</Path>
    <Anchor>afd2335a17644f2da0c72e6d8d3cabbd7</Anchor>
    <Abstract>Construct with a &amp;quot;what&amp;quot; string.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SpiderCastRuntimeError</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastRuntimeError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_runtime_error.html</Path>
    <Anchor>a36217770d6178002cc70848d26ad8db4</Anchor>
    <Abstract>Copy constructor.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastRuntimeError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_runtime_error.html</Path>
    <Anchor>ad1783c67a6cc25e76a0d2b8ee59a3633</Anchor>
    <Abstract>Assignment operator.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~SpiderCastRuntimeError</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastRuntimeError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_runtime_error.html</Path>
    <Anchor>a480e6a67b6e9c27d19eaf2371155dcc6</Anchor>
    <Abstract>Destructor.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getStackTrace</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastRuntimeError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_runtime_error.html</Path>
    <Anchor>aa6178f9f35f9f534b250d7a4b74a87bc</Anchor>
    <Abstract>Get a string representation of the stack back-trace.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>printStackTrace</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastRuntimeError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_runtime_error.html</Path>
    <Anchor>ae45de76a4251d1b6f5823eb734165fe9</Anchor>
    <Abstract>Print the stack back trace to the standard error.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>printStackTrace</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastRuntimeError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_runtime_error.html</Path>
    <Anchor>a7e037dcb9297108b6686f45cb08e062c</Anchor>
    <Abstract>Print the stack back trace to the output stream.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::OutOfMemoryException</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::OutOfMemoryException</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_out_of_memory_exception.html</Path>
    <Abstract>Thrown when memory allocation fails.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>OutOfMemoryException</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::OutOfMemoryException</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_out_of_memory_exception.html</Path>
    <Anchor>a11a9af03b6191ac773d7df6755ec29a8</Anchor>
    <Abstract>Construct with a &amp;quot;what&amp;quot; string.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~OutOfMemoryException</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::OutOfMemoryException</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_out_of_memory_exception.html</Path>
    <Anchor>af7c342b331ead1799aec409dd373ef71</Anchor>
    <Abstract>Destructor.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SpiderCastRuntimeError</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastRuntimeError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_runtime_error.html</Path>
    <Anchor>afd2335a17644f2da0c72e6d8d3cabbd7</Anchor>
    <Abstract>Construct with a &amp;quot;what&amp;quot; string.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SpiderCastRuntimeError</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastRuntimeError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_runtime_error.html</Path>
    <Anchor>a36217770d6178002cc70848d26ad8db4</Anchor>
    <Abstract>Copy constructor.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastRuntimeError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_runtime_error.html</Path>
    <Anchor>ad1783c67a6cc25e76a0d2b8ee59a3633</Anchor>
    <Abstract>Assignment operator.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~SpiderCastRuntimeError</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastRuntimeError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_runtime_error.html</Path>
    <Anchor>a480e6a67b6e9c27d19eaf2371155dcc6</Anchor>
    <Abstract>Destructor.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getStackTrace</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastRuntimeError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_runtime_error.html</Path>
    <Anchor>aa6178f9f35f9f534b250d7a4b74a87bc</Anchor>
    <Abstract>Get a string representation of the stack back-trace.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>printStackTrace</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastRuntimeError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_runtime_error.html</Path>
    <Anchor>ae45de76a4251d1b6f5823eb734165fe9</Anchor>
    <Abstract>Print the stack back trace to the standard error.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>printStackTrace</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastRuntimeError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_runtime_error.html</Path>
    <Anchor>a7e037dcb9297108b6686f45cb08e062c</Anchor>
    <Abstract>Print the stack back trace to the output stream.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::MessageUnmarshlingException</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::MessageUnmarshlingException</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_message_unmarshling_exception.html</Path>
    <Abstract>Thrown when message unmarshaling fails.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MessageUnmarshlingException</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::MessageUnmarshlingException</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_message_unmarshling_exception.html</Path>
    <Anchor>ac724df4d6df99392e20ccbed0f1b7f84</Anchor>
    <Abstract>Construct with a &amp;quot;what&amp;quot; string.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~MessageUnmarshlingException</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::MessageUnmarshlingException</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_message_unmarshling_exception.html</Path>
    <Anchor>af650e513fc49afeafa40c32a88b87b4d</Anchor>
    <Abstract>Destructor.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SpiderCastRuntimeError</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastRuntimeError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_runtime_error.html</Path>
    <Anchor>afd2335a17644f2da0c72e6d8d3cabbd7</Anchor>
    <Abstract>Construct with a &amp;quot;what&amp;quot; string.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SpiderCastRuntimeError</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastRuntimeError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_runtime_error.html</Path>
    <Anchor>a36217770d6178002cc70848d26ad8db4</Anchor>
    <Abstract>Copy constructor.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastRuntimeError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_runtime_error.html</Path>
    <Anchor>ad1783c67a6cc25e76a0d2b8ee59a3633</Anchor>
    <Abstract>Assignment operator.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~SpiderCastRuntimeError</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastRuntimeError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_runtime_error.html</Path>
    <Anchor>a480e6a67b6e9c27d19eaf2371155dcc6</Anchor>
    <Abstract>Destructor.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getStackTrace</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastRuntimeError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_runtime_error.html</Path>
    <Anchor>aa6178f9f35f9f534b250d7a4b74a87bc</Anchor>
    <Abstract>Get a string representation of the stack back-trace.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>printStackTrace</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastRuntimeError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_runtime_error.html</Path>
    <Anchor>ae45de76a4251d1b6f5823eb734165fe9</Anchor>
    <Abstract>Print the stack back trace to the standard error.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>printStackTrace</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastRuntimeError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_runtime_error.html</Path>
    <Anchor>a7e037dcb9297108b6686f45cb08e062c</Anchor>
    <Abstract>Print the stack back trace to the output stream.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::MessageMarshlingException</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::MessageMarshlingException</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_message_marshling_exception.html</Path>
    <Abstract>Thrown when message marshaling fails.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MessageMarshlingException</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::MessageMarshlingException</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_message_marshling_exception.html</Path>
    <Anchor>ad094df3c37a323e1dc11c69d74b6fe71</Anchor>
    <Abstract>Construct with a &amp;quot;what&amp;quot; string.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~MessageMarshlingException</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::MessageMarshlingException</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_message_marshling_exception.html</Path>
    <Anchor>a7e5dff0ebde4f967e8183709f1dd102d</Anchor>
    <Abstract>Destructor.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SpiderCastRuntimeError</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastRuntimeError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_runtime_error.html</Path>
    <Anchor>afd2335a17644f2da0c72e6d8d3cabbd7</Anchor>
    <Abstract>Construct with a &amp;quot;what&amp;quot; string.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SpiderCastRuntimeError</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastRuntimeError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_runtime_error.html</Path>
    <Anchor>a36217770d6178002cc70848d26ad8db4</Anchor>
    <Abstract>Copy constructor.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastRuntimeError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_runtime_error.html</Path>
    <Anchor>ad1783c67a6cc25e76a0d2b8ee59a3633</Anchor>
    <Abstract>Assignment operator.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~SpiderCastRuntimeError</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastRuntimeError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_runtime_error.html</Path>
    <Anchor>a480e6a67b6e9c27d19eaf2371155dcc6</Anchor>
    <Abstract>Destructor.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getStackTrace</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastRuntimeError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_runtime_error.html</Path>
    <Anchor>aa6178f9f35f9f534b250d7a4b74a87bc</Anchor>
    <Abstract>Get a string representation of the stack back-trace.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>printStackTrace</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastRuntimeError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_runtime_error.html</Path>
    <Anchor>ae45de76a4251d1b6f5823eb734165fe9</Anchor>
    <Abstract>Print the stack back trace to the standard error.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>printStackTrace</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastRuntimeError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_runtime_error.html</Path>
    <Anchor>a7e037dcb9297108b6686f45cb08e062c</Anchor>
    <Abstract>Print the stack back trace to the output stream.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::StackBackTrace</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::StackBackTrace</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_stack_back_trace.html</Path>
    <Abstract>Extracts and holds the stack back trace.</Abstract>
    <DeclaredIn>StackBackTrace.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~StackBackTrace</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::StackBackTrace</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_stack_back_trace.html</Path>
    <Anchor>a4246f8333b4a1a1e075ff945449823f5</Anchor>
    <Abstract>Destructor.</Abstract>
    <DeclaredIn>StackBackTrace.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>print</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::StackBackTrace</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_stack_back_trace.html</Path>
    <Anchor>a2c5f1064a4442548346a9006d7848fcf</Anchor>
    <Abstract>Print the stack trace to the standard error.</Abstract>
    <DeclaredIn>StackBackTrace.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>print</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::StackBackTrace</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_stack_back_trace.html</Path>
    <Anchor>a37a7f2506948acc7304dab633e4d0ff2</Anchor>
    <Abstract>Print the stack trace to the output stream.</Abstract>
    <DeclaredIn>StackBackTrace.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>toString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::StackBackTrace</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_stack_back_trace.html</Path>
    <Anchor>a79cd469e1a2f53d682795ede6b7d9926</Anchor>
    <Abstract>Get the stack trace in a string.</Abstract>
    <DeclaredIn>StackBackTrace.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getStackBackTrace</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>spdr::StackBackTrace</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_stack_back_trace.html</Path>
    <Anchor>a80714ec2b12689f318ef40b6ce36b752</Anchor>
    <Abstract>Create the stack trace of the calling thread.</Abstract>
    <DeclaredIn>StackBackTrace.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::config</Name>
      <APILanguage>c</APILanguage>
      <Type>ns</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Abstract>Documented configuration property keys.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NodeName_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>ace27d93be2a7d8e5425a1e7ec859d54d</Anchor>
    <Abstract>Node&amp;#39;s name.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BusName_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a349d1c9bc5117f50ce61d08d0fc40a22</Anchor>
    <Abstract>Bus name.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NetworkInterface_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a9eeaad1234bceacae759d769e44076a1</Anchor>
    <Abstract>Node&amp;#39;s network interfaces (IP address) and their network-ID.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TCPReceiverPort_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>acc7ede5b9ec44de49325afb079aa2272</Anchor>
    <Abstract>TCP Receiver port.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BindAllInterfaces_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a7cfb3cf288cc444b37ce19689bc9f9d9</Anchor>
    <Abstract>Bind all interfaces.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BindAllInterfaces_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a60ea3fd484c4af3ad69683af881c61db</Anchor>
    <Abstract>Default value of BindAllInterfaces_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HeartbeatIntervalMillis_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a962427e2d0ef074e922c0c68ed242091</Anchor>
    <Abstract>Heart-beat interval, in milliseconds.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HeartbeatIntervalMillis_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a5d7d4f523d956549900839c82b446ee7</Anchor>
    <Abstract>Default value of HeartbeatIntervalMillis_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HeartbeatTimeoutMillis_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>afb5707c84b919d01eecd2afb63268035</Anchor>
    <Abstract>Heart-beat timeout, in milliseconds.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HeartbeatTimeoutMillis_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>adfa6e346e4db565a955fa601b11ee3df</Anchor>
    <Abstract>Default value of HeartbeatTimeoutMillis_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ConnectionEstablishTimeoutMillis_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a629d812225f3d82f447309ae506e19b9</Anchor>
    <Abstract>Connection establish timeout, in milliseconds.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ConnectionEstablishTimeoutMillis_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a1bd0482403af41a84b5f89e50986a96a</Anchor>
    <Abstract>Default value of ConnectionEstablishTimeoutMillis_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MaxMemoryAllowedMBytes_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>aa992e2ec001bb2436fb186da04594f6e</Anchor>
    <Abstract>Maximal memory allowed for Comm provider, in Mega Bytes.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MaxMemoryAllowedMBytes_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>aa50fd8d8761e2152a61c6ee3f4575395</Anchor>
    <Abstract>Default value of MaxMemoryAllowedMBytes_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>RUMLogLevel_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a996a4a4e9f436fe39ac1e4f3b4e42f74</Anchor>
    <Abstract>RUM log level.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>RUMLogLevel_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a716bb010662975ec1dfda5a925207879</Anchor>
    <Abstract>Default value of RUMLogLevel_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>UDPPacketSizeBytes_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a55d9ce74832c2957e5e18d9e2d2fcd65</Anchor>
    <Abstract>UDP packet size.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>UDPPacketSizeBytes_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a12bd198ae1a2686b708386c8eafaef90</Anchor>
    <Abstract>Default value of RUMLogLevel_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MembershipGossipIntervalMillis_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a4914beb81882f2d9203e6312462f95d6</Anchor>
    <Abstract>Membership gossip interval in milliseconds.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MembershipGossipIntervalMillis_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a677ad93ea99e773a3bf697ec75d030eb</Anchor>
    <Abstract>Default value of MembershipGossipIntervalMillis_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NodeHistoryRetentionTimeSec_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>abb48c2c0249685731ad0f0413f54bdf0</Anchor>
    <Abstract>Node history retention time in seconds.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NodeHistoryRetentionTimeSec_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a818bbb72dea27e7e151ac3029b5ba23e</Anchor>
    <Abstract>Default value of NodeHistoryRetentionTimeSec_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SuspicionThreshold_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a166cd6da5aa9aed759116d06f792ce57</Anchor>
    <Abstract>Suspicion threshold.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SuspicionThreshold_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>aa43e36cb2509c0868472e11fa1a88d3d</Anchor>
    <Abstract>Default value of SuspicionThreshold_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FullViewBootstrapSet_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a5a12181639585d07d419cbb1e84ccb3c</Anchor>
    <Abstract>Whether the bootstrap set given to SpiderCast represents an expected full view.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FullViewBootstrapSet_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a044fc1b5d44d5cc0e4cb527d364ccde7</Anchor>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FullViewBootstrapPolicy_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>afac54cfed6a42cd21b6ae883682a39a6</Anchor>
    <Abstract>How to use a full view bootstrap.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FullViewBootstrapPolicy_Random_VALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a259c41236b2d721e3c853d5009dc7c6a</Anchor>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FullViewBootstrapPolicy_Random1_VALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a515a46e517456926e106e0e812148121</Anchor>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FullViewBootstrapPolicy_Tree_VALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a72b12f8ab28d240858c3597f45d5088f</Anchor>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FullViewBootstrapPolicy_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>abb6906b45cc36d211e04054cb3c0b782</Anchor>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FullViewBootstrapTimeoutSec_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a47a98e0503e372a8795716dfb4b82aed</Anchor>
    <Abstract>The time after which discovery policy returns to Random.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FullViewBootstrapTimeoutSec_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a3e72756ca3b6f62d73e316733b180065</Anchor>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HighPriorityMonitoringEnabled_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>abe653420a8086faf609b5ffd9b4f882f</Anchor>
    <Abstract>Whether high priority monitoring is permitted on this node.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HighPriorityMonitoringEnabled_PROP_KEY_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a9929d9ca5cf41b2150dc197592bac23e</Anchor>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TopologyPeriodicTaskIntervalMillis_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a53e3f152f5504471ebf935aa32614b93</Anchor>
    <Abstract>Topology periodic task interval in milliseconds.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TopologyPeriodicTaskIntervalMillis_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a09c63acb9069e681fe976f9883304c77</Anchor>
    <Abstract>Default value of TopologyPeriodicTaskIntervalMillis_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FrequentDiscoveryIntervalMillis_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a1f4577c874e34d257e3dd89cfc4d209c</Anchor>
    <Abstract>Frequent discovery task interval in milliseconds.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FrequentDiscoveryIntervalMillis_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>ab2cfe86ef1c4294aba327ad47a3f286a</Anchor>
    <Abstract>Default value of FrequentDiscoveryIntervalMillis_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FrequentDiscoveryMinimalDurationMillis_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a5a0902581dc9f5e6754122774177d80b</Anchor>
    <Abstract>Frequent discovery task minimal duration in milliseconds.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FrequentDiscoveryMinimalDurationMillis_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a14a65cb7b8b05ac4bf689039b6a74bf9</Anchor>
    <Abstract>Default value of FrequentDiscoveryMinimalDurationMillis_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NormalDiscoveryIntervalMillis_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a351ab918a85bc2cb36a6c5b32b1df924</Anchor>
    <Abstract>Normal discovery task interval in milliseconds.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NormalDiscoveryIntervalMillis_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>ad1dfb17567ffe6beacba13c45866506a</Anchor>
    <Abstract>Default value of NormalDiscoveryIntervalMillis_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DiscoveryProtocol_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a5f4bc7bb53ffa66a0aa992c70d1ed6ad</Anchor>
    <Abstract>Discovery protocol.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DiscoveryProtocol_UDP_VALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a1cd4d584ce0030c2d69683e27c0af774</Anchor>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DiscoveryProtocol_TCP_VALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>ab4ba6e6645d6e1a4fba5e539733f556b</Anchor>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DiscoveryProtocol_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a47b8c0945d16eb41bd5d452533db7c62</Anchor>
    <Abstract>Default value of DiscoveryProtocol_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StructTopoEnabled_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>aecb31a9e96a4c01d4ffa33793d03e631</Anchor>
    <Abstract>Structured topology enabled.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StructTopoEnabled_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a71bfd0a5d2e3db218feaa19446f55fe4</Anchor>
    <Abstract>Default value of DHTEnabled_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StructDegreeTarget_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a6e436ea366cfa6316ea32196855254cb</Anchor>
    <Abstract>structured topo node degree target.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StructDegreeTarget_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>ae737d3dff3472c51ce212ff364d9eaf3</Anchor>
    <Abstract>Default value of StructDegreeTarget_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>RandomDegreeTarget_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a9fced148788499e878bbe1ebd5e039ba</Anchor>
    <Abstract>Random node degree target.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>RandomDegreeTarget_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a0f769b270e91a2b303ad2d3fb64bcd3e</Anchor>
    <Abstract>Default value of RandomDegreeTarget_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>RandomDegreeMargin_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a2d6a02417a2699ad1a11a12d91d6f3e8</Anchor>
    <Abstract>Random node degree margin (above target).</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>RandomDegreeMargin_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>ae05b85e90ac8a2adf939f1fd2b6f313d</Anchor>
    <Abstract>Default value of RandomDegreeMargin_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DHTEnabled_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>aa94a1a681b73ec2aa72d1f147a03a532</Anchor>
    <Abstract>DHT enabled.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DHTEnabled_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a1fecef8b4533840a48bbd448dc2719a0</Anchor>
    <Abstract>Default value of DHTEnabled_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DHTMaxConnections_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>aa6527cd4ba4ec4ad46ff89eac41e5a3a</Anchor>
    <Abstract>Maximum number of DHT related connections.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DHTMaxConnections_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a6549e0b4d7d6909a7a3bfb5b6067790d</Anchor>
    <Abstract>Default value of DHTMaxConnections_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DHTServiceRequestTimeoutMillis_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a316c59f88fae77dc929736a09b49e88b</Anchor>
    <Abstract>DHTService request time-out in milliseconds.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DHTServiceRequestTimeoutMillis_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>ac8b840eb38a450fda76de6757b2d3e16</Anchor>
    <Abstract>Default value of DHTServiceRequestTimeoutMillis_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DHTServiceRequestRetransmissionIntervalMillis_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a583a1f42baef0be3276a6f46c3f2ae99</Anchor>
    <Abstract>DHTService request retransmission in milliseconds.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DHTServiceRequestRetransmissionIntervalMillis_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a249ce5c93cad7d93f24a93a6be698f7e</Anchor>
    <Abstract>Default value of DHTServiceRequestRetransmissionIntervalMillis_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DHTServerHandoffChunkSizeKB_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a581e9b90b0885873457616cb9b5c875d</Anchor>
    <Abstract>DHT Server handoff chunk size in KB.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DHTServerHandoffChunkSizeKB_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>ac3a82970c5e31f03e0c1798d6b40e4fc</Anchor>
    <Abstract>Default value of DHTServerHandoffChunkSizeKB_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>RoutingEnabled_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>abe14d1a59c5ca2234adb712d22610cb6</Anchor>
    <Abstract>Routing enabled.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>RoutingEnabled_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>ab822f8a607312de429ae6f493053a030</Anchor>
    <Abstract>Default value of RoutingEnabled_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PublisherReliabilityMode_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a0b0aed64894a11245b51bf2457a97b8d</Anchor>
    <Abstract>The reliability mode the publisher is using.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ReliabilityMode_BestEffort_VALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>ab030b8dad22319182d71cece10643a34</Anchor>
    <Abstract>The value of a &amp;quot;best effort&amp;quot; reliability mode.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ReliabilityMode_NackBased_VALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>aaf6a424efad33d288c52f28c7cace548</Anchor>
    <Abstract>The value of a &amp;quot;NACK-based&amp;quot; reliability mode.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PublisherReliabilityMode_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a7be1cae90a90af251e75e522638113bb</Anchor>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TopicGlobalScope_Prop_Key</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a9ab1e9e97af11d60540ac44d9fdc330c</Anchor>
    <Abstract>Topic global scope.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TopicGlobalScope_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>ac0ec029f3481fefe383369b1eaf1211e</Anchor>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>LeaderElectionEnabled_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>abc0669dc3f3dd99c715274eded5962a4</Anchor>
    <Abstract>Leader election enabled.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>LeaderElectionEnabled_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a317f535d6b1adf0936bbe0cf03457f3b</Anchor>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>LeaderElectionWarmupTimeoutMillis_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a866067ab9ff539250cc7a1973d1b1676</Anchor>
    <Abstract>Leader election warm up timeout, in milliseconds.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>LeaderElectionWarmupTimeoutMillis_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a5dca7817256f3da20595cf34757439a5</Anchor>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HierarchyNumberOfDelegates_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a361ffb88b12a731da1c9ccca1a5e8ea7</Anchor>
    <Abstract>Number of delegates per base zone.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HierarchyNumberOfDelegates_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a96f74d8a6350c18a48e231b0aa96e1c2</Anchor>
    <Abstract>Default value of HierarchyNumberOfDelegates_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HierarchyNumberOfSupervisors_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>aa81e4d33653a5d3bbb261a8fd1495df7</Anchor>
    <Abstract>Number of supervisors per base zone.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HierarchyNumberOfSupervisors_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>ae6bd7c70dc8622daaee7c773ece45296</Anchor>
    <Abstract>Default value of HierarchyNumberOfSupervisors_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HierarchyNumberOfActiveDelegates_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>aa92ca8043ecd1b93398ba02df0ddf37f</Anchor>
    <Abstract>Number of active delegates per base zone.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HierarchyNumberOfActiveDelegates_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>acb553a605b38bdba52b02f9afc239244</Anchor>
    <Abstract>Default value of HierarchyNumberOfActiveDelegates_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HierarchyIncludeAttributes_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a2213cc4607db5db6ca5c688dc9b56682</Anchor>
    <Abstract>Ask delegate to include attributes in the periodic embership updates.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HierarchyIncludeAttributes_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a60a558475e3ac6059fab0ebdf128f20c</Anchor>
    <Abstract>Default value of HierarchyIncludeAttributes_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HierarchyForeignZoneMemberhipTimeOut_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>ac4fad3401c46b7a6f78fff6e70c45bc8</Anchor>
    <Abstract>TimeOut for foreign zone membership requests.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HierarchyForeignZoneMemberhipTimeOut_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a450a484ce562aca77244b40f1c37071e</Anchor>
    <Abstract>Default value of HierarchyMemberhipUpdateAggregationInterval_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HierarchyMemberhipUpdateAggregationInterval_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a5da556c9c1635ea3fef785bb859dbeda</Anchor>
    <Abstract>aggregation time in milliseconds of membership updates between the delegate and its supervisor...</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HierarchyMemberhipUpdateAggregationInterval_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a1f77a62baec1ed3e0d3f188a8b3baec0</Anchor>
    <Abstract>Default value of HierarchyMemberhipUpdateAggregationInterval_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HierarchyConnectIntervalMillis_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a7baf68cb2193ff9159e19767124e6e52</Anchor>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HierarchyConnectIntervalMillis_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a8a956a14ffc5ff830364bbe853572c1c</Anchor>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HierarchySupervisorQuarantineIntervalMillis_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>ac7fb1b84c09bbb2c576c17fe65c2deb9</Anchor>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HierarchySupervisorQuarantineIntervalMillis_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>aa7d7fdc59da95723adfa8c84cd7d7988</Anchor>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HierarchyEnabled_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a133b311bcf1494e78a8f6670042737dd</Anchor>
    <Abstract>Enable hierarchy.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>HierarchyEnabled_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a7c909cf110f13e3d2cf881cbd690e37c</Anchor>
    <Abstract>Default value of HierarchyNumberOfSupervisors_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StatisticsEnabled_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a9d06e482d0dd4268b66b18fc34f332ed</Anchor>
    <Abstract>Statistics enabled.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StatisticsEnabled_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>ac9a4c121a6af9514fc7c0308b5723099</Anchor>
    <Abstract>Default value of StatisticsEnabled_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StatisticsPeriodMillis_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a0adb7f852b04ea9c8f0c2f6e70f9b1b4</Anchor>
    <Abstract>Statistics period in milliseconds.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StatisticsPeriodMillis_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a554dd877cb8968f2925b81278229f1a9</Anchor>
    <Abstract>Default value of StatisticsPeriodMillis_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StatisticsTaskTardinessThresholdMillis_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a39d82073fc30bf26da17f184db09328c</Anchor>
    <Abstract>Task tardiness threshold in milliseconds.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StatisticsTaskTardinessThresholdMillis_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a3175837d78408cbbe55a061e1e36622f</Anchor>
    <Abstract>Default value of StatisticsPeriodMillis_PROP_KEY.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CRC_MemTopoMsg_Enabled_PROP_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a4f754f0c1567280556c0ba44c6f0bc5c</Anchor>
    <Abstract>Enable CRC on membership and topology messages.</Abstract>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CRC_MemTopoMsg_Enabled_DEFVALUE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::config</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1config.html</Path>
    <Anchor>a8d37d0a39b07102c926b168bfba7a4ec</Anchor>
    <DeclaredIn>SpiderCastConfig.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::dht</Name>
      <APILanguage>c</APILanguage>
      <Type>ns</Type>
      <Scope>spdr::dht</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1dht.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DHTServer_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::dht</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1dht.html</Path>
    <Anchor>a1de48921e38fd03a42ab9ece584f92c5</Anchor>
    <DeclaredIn>DHTServer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DHTService_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::dht</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1dht.html</Path>
    <Anchor>af8e2c5bfaf154591c3e8cd59392bf78a</Anchor>
    <DeclaredIn>DHTService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::dht::DHTServer</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::dht::DHTServer</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_server.html</Path>
    <Abstract>Represents a DHT server.</Abstract>
    <DeclaredIn>DHTServer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~DHTServer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::dht::DHTServer</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_server.html</Path>
    <Anchor>ab66a46633222a20c964a30fbba21b0fb</Anchor>
    <DeclaredIn>DHTServer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>close</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::dht::DHTServer</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_server.html</Path>
    <Anchor>a82717cd7ab4487ed48edc1d35ab19c34</Anchor>
    <DeclaredIn>DHTServer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isClosed</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::dht::DHTServer</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_server.html</Path>
    <Anchor>a52129c32bb4c63d416e683254586dd30</Anchor>
    <DeclaredIn>DHTServer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DHTServer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::dht::DHTServer</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_server.html</Path>
    <Anchor>a4772437dd216aa9db30c69d53dfe5571</Anchor>
    <DeclaredIn>DHTServer.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::dht::DHTServerListener</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::dht::DHTServerListener</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_server_listener.html</Path>
    <DeclaredIn>DHTServerListener.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~DHTServerListener</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::dht::DHTServerListener</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_server_listener.html</Path>
    <Anchor>a0088798a695ea074a07dff3a2be56a84</Anchor>
    <DeclaredIn>DHTServerListener.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>onEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::dht::DHTServerListener</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_server_listener.html</Path>
    <Anchor>a50b9c5828c97f90147d3b66d20d72065</Anchor>
    <Abstract>Life cycle events.</Abstract>
    <DeclaredIn>DHTServerListener.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DHTServerListener</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::dht::DHTServerListener</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_server_listener.html</Path>
    <Anchor>aba49218b67df8fc1b704cb9bc60f8807</Anchor>
    <DeclaredIn>DHTServerListener.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::dht::DHTService</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::dht::DHTService</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_service.html</Path>
    <Abstract>The DHT service interface provides an access point to the DHT API.</Abstract>
    <DeclaredIn>DHTService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~DHTService</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::dht::DHTService</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_service.html</Path>
    <Anchor>a86bb3e302f24b0abb0391059104701b7</Anchor>
    <DeclaredIn>DHTService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>close</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::dht::DHTService</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_service.html</Path>
    <Anchor>aab586e4acfa47cd2c90c29b53c71b503</Anchor>
    <Abstract>Close the service.</Abstract>
    <DeclaredIn>DHTService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isClosed</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::dht::DHTService</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_service.html</Path>
    <Anchor>a1e5d290a804fa8f69c4bebca61346a3c</Anchor>
    <Abstract>Is the service closed?</Abstract>
    <DeclaredIn>DHTService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>put</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::dht::DHTService</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_service.html</Path>
    <Anchor>a347079949523450eb652eb50ac46d4c4</Anchor>
    <Abstract>Insert or replace a key-value pair.</Abstract>
    <DeclaredIn>DHTService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>get</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::dht::DHTService</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_service.html</Path>
    <Anchor>a02bab4234a458a18b439f9ddb66a4001</Anchor>
    <Abstract>Get a key-value pair.</Abstract>
    <DeclaredIn>DHTService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>contains</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::dht::DHTService</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_service.html</Path>
    <Anchor>a3548dc44af5cfb84ff4f00c62c801daf</Anchor>
    <Abstract>Test if the DHT contains a key-value pair.</Abstract>
    <DeclaredIn>DHTService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>remove</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::dht::DHTService</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_service.html</Path>
    <Anchor>a5e91455bf94569745c94265330afd298</Anchor>
    <Abstract>Remove a key-value pair.</Abstract>
    <DeclaredIn>DHTService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>putIfAbsent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::dht::DHTService</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_service.html</Path>
    <Anchor>acbdc36b2a3acff100c013586c859a146</Anchor>
    <Abstract>Put the key-value pair only if the key is absent.</Abstract>
    <DeclaredIn>DHTService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>replace</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::dht::DHTService</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_service.html</Path>
    <Anchor>a8533d161b673e4135930e3a19240d51a</Anchor>
    <Abstract>Replace a keys value with a new value only if a value exists.</Abstract>
    <DeclaredIn>DHTService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>replaceTest</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::dht::DHTService</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_service.html</Path>
    <Anchor>acfa1d9686e2f3c392720d9e4fce909c8</Anchor>
    <Abstract>Replace a keys value with a new value only if the current version in the table equals the test versio...</Abstract>
    <DeclaredIn>DHTService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>removeTest</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::dht::DHTService</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_service.html</Path>
    <Anchor>aabc37c7f108ddcce5d797144d9dac7ae</Anchor>
    <Abstract>Remove a key-value pair, only if the key is currently mapped to a value with the given test version...</Abstract>
    <DeclaredIn>DHTService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>reqTypeName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::dht::DHTService</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_service.html</Path>
    <Anchor>aff817cab5596f64b6ce58db8012fc479</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DHTService</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::dht::DHTService</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_service.html</Path>
    <Anchor>a2ca87c1837fe50d0aea3b75ea652bdb6</Anchor>
    <DeclaredIn>DHTService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ReqType_put</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>spdr::dht::DHTService</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_service.html</Path>
    <Anchor>a8aa4571bca1736691f9f2774ec3dbe27acd229871dbba916326661fba4ad53897</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ReqType_get</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>spdr::dht::DHTService</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_service.html</Path>
    <Anchor>a8aa4571bca1736691f9f2774ec3dbe27a197b637c10d68348b5d261edb3c3232c</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ReqType_contains</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>spdr::dht::DHTService</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_service.html</Path>
    <Anchor>a8aa4571bca1736691f9f2774ec3dbe27a64e5e1c913f8f49d5056d210ba547719</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ReqType_remove</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>spdr::dht::DHTService</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_service.html</Path>
    <Anchor>a8aa4571bca1736691f9f2774ec3dbe27ab96362ffde23587887b4017c3bc135c5</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ReqType_putIfAbsent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>spdr::dht::DHTService</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_service.html</Path>
    <Anchor>a8aa4571bca1736691f9f2774ec3dbe27a030466d404e60e5273d617238fae95c1</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ReqType_replace</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>spdr::dht::DHTService</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_service.html</Path>
    <Anchor>a8aa4571bca1736691f9f2774ec3dbe27a1a74470d8f6ad79155f1f7293d45f3f3</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ReqType_replaceTest</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>spdr::dht::DHTService</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_service.html</Path>
    <Anchor>a8aa4571bca1736691f9f2774ec3dbe27aa8db9dc11ea454db0839ddec474e7f05</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ReqType_removeTest</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>spdr::dht::DHTService</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_service.html</Path>
    <Anchor>a8aa4571bca1736691f9f2774ec3dbe27a7038d4e12331e1fb6000b3d4dab5c2bf</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::dht::DHTServiceListener</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::dht::DHTServiceListener</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_service_listener.html</Path>
    <DeclaredIn>DHTServiceListener.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~DHTServiceListener</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::dht::DHTServiceListener</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_service_listener.html</Path>
    <Anchor>a7ac6185f7a670f46a8ef399a4b58d219</Anchor>
    <DeclaredIn>DHTServiceListener.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>onEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::dht::DHTServiceListener</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_service_listener.html</Path>
    <Anchor>a0361d6dcc09a37f08f98ad288274f142</Anchor>
    <Abstract>Life cycle events.</Abstract>
    <DeclaredIn>DHTServiceListener.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>onSuccess</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::dht::DHTServiceListener</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_service_listener.html</Path>
    <Anchor>a4b97749f6208f6929184c7c61eea07fe</Anchor>
    <Abstract>On request successful completion.</Abstract>
    <DeclaredIn>DHTServiceListener.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>onFailure</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::dht::DHTServiceListener</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_service_listener.html</Path>
    <Anchor>a021157e1c602c8d3f057f82493b04501</Anchor>
    <Abstract>On request failure completion.</Abstract>
    <DeclaredIn>DHTServiceListener.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DHTServiceListener</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::dht::DHTServiceListener</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_service_listener.html</Path>
    <Anchor>aa1cc408b45728f80fa119d5e87cc2d20</Anchor>
    <DeclaredIn>DHTServiceListener.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::dht::DHTVersion</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::dht::DHTVersion</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_version.html</Path>
    <Abstract>Represents the version of a key-value pair in the table.</Abstract>
    <DeclaredIn>DHTVersion.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DHTVersion</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::dht::DHTVersion</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_version.html</Path>
    <Anchor>aee932da85c446af8a9c8b4323a688f31</Anchor>
    <Abstract>Default constructor return a &amp;quot;Missing&amp;quot; version.</Abstract>
    <DeclaredIn>DHTVersion.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DHTVersion</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::dht::DHTVersion</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_version.html</Path>
    <Anchor>aed7e9e98aa5e6d92ffb3f51c1228731f</Anchor>
    <DeclaredIn>DHTVersion.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DHTVersion</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::dht::DHTVersion</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_version.html</Path>
    <Anchor>a75f19a3567c8ce5d296e57c669b50034</Anchor>
    <DeclaredIn>DHTVersion.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::dht::DHTVersion</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_version.html</Path>
    <Anchor>a56bcfe7c424fa23eff0d7c747ccfc879</Anchor>
    <DeclaredIn>DHTVersion.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~DHTVersion</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::dht::DHTVersion</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_version.html</Path>
    <Anchor>a5e0d879b0a8d99187d1fec55bc448959</Anchor>
    <DeclaredIn>DHTVersion.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isMissing</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::dht::DHTVersion</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_version.html</Path>
    <Anchor>a16a223363504f28af4a240289aba9093</Anchor>
    <DeclaredIn>DHTVersion.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>intValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::dht::DHTVersion</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_version.html</Path>
    <Anchor>a395e8df1623113981c525571634e0fbf</Anchor>
    <DeclaredIn>DHTVersion.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>toString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::dht::DHTVersion</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_version.html</Path>
    <Anchor>ab7ecd9a8bdece95829a0664e3983544c</Anchor>
    <Abstract>A string representation of the DHTVersion.</Abstract>
    <DeclaredIn>DHTVersion.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::dht::DHTVersion</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_version.html</Path>
    <Anchor>aabda7d3d0f7176b796b9d4baf7be54df</Anchor>
    <Abstract>Equality operator.</Abstract>
    <DeclaredIn>DHTVersion.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::dht::DHTVersion</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_version.html</Path>
    <Anchor>a2f6d8f1063d45e108962bdb9d8f5dbd6</Anchor>
    <Abstract>Inequality operator.</Abstract>
    <DeclaredIn>DHTVersion.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::dht::DHTVersion</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_version.html</Path>
    <Anchor>a5e90fbd1c5a61f89608c8c26f03a8a07</Anchor>
    <Abstract>Less than operator.</Abstract>
    <DeclaredIn>DHTVersion.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::dht::DHTVersion</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_version.html</Path>
    <Anchor>a544b427bcc9980f17ad14b715cf3a441</Anchor>
    <Abstract>Less than or equal operator.</Abstract>
    <DeclaredIn>DHTVersion.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::dht::DHTVersion</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_version.html</Path>
    <Anchor>afb36dc279d8488744646303dccf29cf2</Anchor>
    <Abstract>Greater than operator.</Abstract>
    <DeclaredIn>DHTVersion.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::dht::DHTVersion</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_version.html</Path>
    <Anchor>a4bf574132ad3a5013328a7620d46e3d8</Anchor>
    <Abstract>Greater than or equal operator.</Abstract>
    <DeclaredIn>DHTVersion.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Missing</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::dht::DHTVersion</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_version.html</Path>
    <Anchor>afa845448a6fd6769bed5089ebb8488f1</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ver_</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::dht::DHTVersion</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_version.html</Path>
    <Anchor>a47006dbcd206d40970bd24ebccfdec68</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::dht::DHTUnavailableException</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::dht::DHTUnavailableException</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_unavailable_exception.html</Path>
    <Abstract>Thrown when the DHT service is unavailable.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DHTUnavailableException</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::dht::DHTUnavailableException</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_unavailable_exception.html</Path>
    <Anchor>a7fd323851427117157f72a5f18120603</Anchor>
    <Abstract>Construct with a &amp;quot;what&amp;quot; string.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~DHTUnavailableException</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::dht::DHTUnavailableException</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1dht_1_1_d_h_t_unavailable_exception.html</Path>
    <Anchor>abe00f5b10594ed6e762882bdbb991ce1</Anchor>
    <Abstract>Destructor.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SpiderCastRuntimeError</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastRuntimeError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_runtime_error.html</Path>
    <Anchor>afd2335a17644f2da0c72e6d8d3cabbd7</Anchor>
    <Abstract>Construct with a &amp;quot;what&amp;quot; string.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SpiderCastRuntimeError</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastRuntimeError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_runtime_error.html</Path>
    <Anchor>a36217770d6178002cc70848d26ad8db4</Anchor>
    <Abstract>Copy constructor.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastRuntimeError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_runtime_error.html</Path>
    <Anchor>ad1783c67a6cc25e76a0d2b8ee59a3633</Anchor>
    <Abstract>Assignment operator.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~SpiderCastRuntimeError</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastRuntimeError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_runtime_error.html</Path>
    <Anchor>a480e6a67b6e9c27d19eaf2371155dcc6</Anchor>
    <Abstract>Destructor.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getStackTrace</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastRuntimeError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_runtime_error.html</Path>
    <Anchor>aa6178f9f35f9f534b250d7a4b74a87bc</Anchor>
    <Abstract>Get a string representation of the stack back-trace.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>printStackTrace</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastRuntimeError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_runtime_error.html</Path>
    <Anchor>ae45de76a4251d1b6f5823eb734165fe9</Anchor>
    <Abstract>Print the stack back trace to the standard error.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>printStackTrace</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::SpiderCastRuntimeError</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1_spider_cast_runtime_error.html</Path>
    <Anchor>a7e037dcb9297108b6686f45cb08e062c</Anchor>
    <Abstract>Print the stack back trace to the output stream.</Abstract>
    <DeclaredIn>SpiderCastRuntimeError.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::event</Name>
      <APILanguage>c</APILanguage>
      <Type>ns</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Abstract>All SpiderCast events are defined under this namespace.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AttributeMap_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a4ef1400f42e4f326de420c2fd433b417</Anchor>
    <Abstract>A shared pointer to an AttributeMap.</Abstract>
    <DeclaredIn>AttributeMap.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ConstAttributeMap_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>ae4e01e53905c53c99c2f0d9a8cdad567</Anchor>
    <Abstract>A shared pointer to a const AttributeMap.</Abstract>
    <DeclaredIn>AttributeMap.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ConnectivityEvent_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a58425ea81e046ef24b741be616de3827</Anchor>
    <Abstract>A boost::shared_ptr to a ConnectivityEvent.</Abstract>
    <DeclaredIn>ConnectivityEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DHTEvent_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a90fc7d7fbdceafaf819589f3eab62826</Anchor>
    <DeclaredIn>DHTEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DHTServiceReadyEvent_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a2375dddcd8e0188d3a99934e45e1bc33</Anchor>
    <DeclaredIn>DHTEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DHTServiceUnavailableEvent_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>ac130fb69f9c75ed2fe8f9a993a1bb9fc</Anchor>
    <DeclaredIn>DHTEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FatalErrorEvent_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a566c33059b5560ccc5760818f1662be3</Anchor>
    <Abstract>A boost::shared_ptr to a FatalErrorEvent.</Abstract>
    <DeclaredIn>FatalErrorEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ViewMap</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a93ab8d7fd108603478b968b59b40fed8</Anchor>
    <Abstract>A map that holds the node membership view.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ViewMap_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a02d9302846d76e995133fb4d108355cb</Anchor>
    <Abstract>A boost::shared_ptr to a ViewMap.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NodeIDSet</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>ad23e5456fa2bd47237bf108650f25592</Anchor>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NodeIDSet_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>aeb88d9020db40208da9320b84fcbb0b5</Anchor>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ZoneCensusData</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>adc74a275fc33900f03d840bcba3749b1</Anchor>
    <Abstract>Zone census values are node counts.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ZoneCensus</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>ac613da21234d3f410e6e279bfa3702c6</Anchor>
    <Abstract>A map where the keys are zone-bus-names and the values are zone census data.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ZoneCensus_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a2b72a2ff24cbe72d49b11f5ba2b900a8</Anchor>
    <Abstract>A boost::shared_ptr to ZoneCensus.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MembershipEvent_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>aa0e3e31f7cf429da0edae2e47e5ac375</Anchor>
    <Abstract>A boost::shared_ptr to a MembershipEvent.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NodeJoinEvent_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a4b69f009be59f3fce4d704d40674f701</Anchor>
    <Abstract>A boost::shared_ptr to a NodeJoinEvent.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NodeLeaveEvent_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a401cd3ddbd976590a75a4d1c9e593399</Anchor>
    <Abstract>A boost::shared_ptr to a NodeLeaveEvent.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ViewChangeEvent_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a1e7b81ff9d18a060b969552f3af42255</Anchor>
    <Abstract>A boost::shared_ptr to a ViewChangeEvent.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ChangeOfMetaDataEvent_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a37ff681ebda2e1a5e391f9607bff5f5c</Anchor>
    <Abstract>A boost::shared_ptr to a ChangeOfMetaDataEvent.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ForeignZoneMembershipEvent_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a1abe91667e7d64f3bf40b20b50c5b186</Anchor>
    <Abstract>A boost::shared_ptr to a ForeignZoneMembershipEvent.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ZoneCensusEvent_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a3a11b0e42a116ba5b4507990be51a927</Anchor>
    <Abstract>A boost::shared_ptr to a ZoneCensusEvent.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MetaData_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a9219d00f97a541de870d437ca12cc70e</Anchor>
    <Abstract>A shared pointer to a MetaData.</Abstract>
    <DeclaredIn>MetaData.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>P2PStreamEvent_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a5df50d022e0a6c3da8448a5113414c8b</Anchor>
    <DeclaredIn>P2PStreamEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>P2PStreamBreakEvent_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>af5de5507e91a0719562c8b4e6c7a3e63</Anchor>
    <DeclaredIn>P2PStreamEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PubSubEvent_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>af92d39819ef8915778ecb3ff49bb41e6</Anchor>
    <DeclaredIn>PubSubEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SpiderCastEvent_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a145c0727646e70460ac5b29970712ca4</Anchor>
    <Abstract>A boost::shared_ptr to a SpiderCastEvent.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Error_Code_None</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a0d359eef2397e7de401e3dd19efba67fa7a841fcf008de236d2a2c1a062ebb427</Anchor>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Thread_Exit_Abnormally</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a0d359eef2397e7de401e3dd19efba67fa82c36fb6ead6527ebe904bcc4a5b02b9</Anchor>
    <Abstract>Thread_Exit_Abnormally.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Network_Failure</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a0d359eef2397e7de401e3dd19efba67fa11bec021049af3e540935bfad2a95f9b</Anchor>
    <Abstract>Network_Failure.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Component_Failure</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a0d359eef2397e7de401e3dd19efba67fa0b9e088cc5594bfd26966e35e3479084</Anchor>
    <Abstract>Component_Failure.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Foreign_Zone_Membership_Request_Timeout</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a0d359eef2397e7de401e3dd19efba67fa0047efe10617c700a69495530f6bc0d9</Anchor>
    <Abstract>Foreign_Zone_Membership_Request_Timeout.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Foreign_Zone_Membership_Unreachable</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a0d359eef2397e7de401e3dd19efba67fa99a20d6da447b435e1ee7ad99bc36872</Anchor>
    <Abstract>Foreign_Zone_Membership_Unreachable.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Foreign_Zone_Membership_No_Attributes</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a0d359eef2397e7de401e3dd19efba67faeec8a48fe11e7127fe135513f71bdcf9</Anchor>
    <Abstract>Foreign_Zone_Membership_No_Attributes.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DHT_Service_Request_Timeout</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a0d359eef2397e7de401e3dd19efba67fa749085304e9f3be139933214f780857e</Anchor>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DHT_Service_Connect_Failure</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a0d359eef2397e7de401e3dd19efba67fa7c2ee8d114f389d8482d089c0bd7c154</Anchor>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DHT_Service_Send_Failure</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a0d359eef2397e7de401e3dd19efba67fa8da63db9fb209331aa0fedc973bce367</Anchor>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Error_Code_Max</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a0d359eef2397e7de401e3dd19efba67faa31ae4397dd143812f3842cc8457c29a</Anchor>
    <Abstract>Error_Code_Max (range guard)</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Event_Type_None</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a76f4860bbc41c8251a073d91e633546ea52b84d18e9d85d30571ff15f550b036d</Anchor>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Fatal_Error</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a76f4860bbc41c8251a073d91e633546eab985068e79b458b4c7891e701e8d1ade</Anchor>
    <Abstract>Fatal Error (error events)</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>View_Change</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a76f4860bbc41c8251a073d91e633546ea4992e2512d4cb59cd8593dbfd5846ce9</Anchor>
    <Abstract>View Change (membership events)</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Node_Join</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a76f4860bbc41c8251a073d91e633546eac6333602c74a09146baec8781d22d015</Anchor>
    <Abstract>Node_Join (membership events)</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Node_Leave</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a76f4860bbc41c8251a073d91e633546ea05604cf107e4fad63e6df5e3f78f3e00</Anchor>
    <Abstract>Node_Leave (membership events)</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Change_of_Metadata</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a76f4860bbc41c8251a073d91e633546ea84e6e29442cb3b0a3d2787a099bb99c0</Anchor>
    <Abstract>Change_of_Metadata (membership events)</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Foreign_Zone_Membership</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a76f4860bbc41c8251a073d91e633546ea43adcf1d2504ff58d9f499c4091dc881</Anchor>
    <Abstract>Foreign_Zone_Membership (membership events)</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Zone_Census</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a76f4860bbc41c8251a073d91e633546ea87fe61df728b04ee14553dea5185ca20</Anchor>
    <Abstract>Zone_Census (membership events)</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Connectivity</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a76f4860bbc41c8251a073d91e633546ea0ea2948554381db45c246e099a50f49d</Anchor>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DHT_Service_Ready</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a76f4860bbc41c8251a073d91e633546ea5909b639f7c4dce4fec159b66fd67d99</Anchor>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DHT_Service_Unavailabe</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a76f4860bbc41c8251a073d91e633546ea5c3f02875821ba3462e9f8493a6b20d5</Anchor>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>STERAM_BROKE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a76f4860bbc41c8251a073d91e633546eaf025328600cac7e8208a433f22244c18</Anchor>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Event_Type_Max</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>spdr::event</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1event.html</Path>
    <Anchor>a76f4860bbc41c8251a073d91e633546ea232063a40781c73d5a0b814e2e09fc8e</Anchor>
    <Abstract>Event_Type_Max (range guard)</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::event::AttributeMap</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::event::AttributeMap</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_attribute_map.html</Path>
    <Abstract>An attribute map.</Abstract>
    <DeclaredIn>AttributeMap.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AttributeMap</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::AttributeMap</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_attribute_map.html</Path>
    <Anchor>a06846cb3e83398b4cd42357f6c8cda71</Anchor>
    <Abstract>Default constructor.</Abstract>
    <DeclaredIn>AttributeMap.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~AttributeMap</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::AttributeMap</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_attribute_map.html</Path>
    <Anchor>a07ccbe4c23face8e108cbd25b4034e70</Anchor>
    <Abstract>Destructor.</Abstract>
    <DeclaredIn>AttributeMap.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>toString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::AttributeMap</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_attribute_map.html</Path>
    <Anchor>a06ac96937c90d9a41283e580c428ffb1</Anchor>
    <Abstract>A string representation of the map.</Abstract>
    <DeclaredIn>AttributeMap.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clone</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>spdr::event::AttributeMap</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_attribute_map.html</Path>
    <Anchor>afa924715a3c1b622d8d883b6e0a2894d</Anchor>
    <Abstract>Deep copy, allocate storage on the heap.</Abstract>
    <DeclaredIn>AttributeMap.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>ffunc</Type>
      <Scope>spdr::event::AttributeMap</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_attribute_map.html</Path>
    <Anchor>a7eff3d8372ffc1d2fc3da11989b79379</Anchor>
    <Abstract>Compares two AttributeMap objects for equality.</Abstract>
    <DeclaredIn>AttributeMap.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>ffunc</Type>
      <Scope>spdr::event::AttributeMap</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_attribute_map.html</Path>
    <Anchor>a94d4053d259107a43cb379ab4230662a</Anchor>
    <Abstract>Compares two AttributeMap objects for inequality.</Abstract>
    <DeclaredIn>AttributeMap.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::event::AttributeValue</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::event::AttributeValue</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_attribute_value.html</Path>
    <Abstract>An AttributeValue holds a read only dynamically allocated byte buffer, with a specified length...</Abstract>
    <DeclaredIn>AttributeValue.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AttributeValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::AttributeValue</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_attribute_value.html</Path>
    <Anchor>ab742d1d3083774665363d3450c57436a</Anchor>
    <Abstract>Constructor of an arbitrary AttributeValue.</Abstract>
    <DeclaredIn>AttributeValue.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AttributeValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::AttributeValue</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_attribute_value.html</Path>
    <Anchor>a223613262e434d7af8772fbc69d8bb00</Anchor>
    <Abstract>Constructor of an arbitrary AttributeValue.</Abstract>
    <DeclaredIn>AttributeValue.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>AttributeValue</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::AttributeValue</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_attribute_value.html</Path>
    <Anchor>ab622659bb97ca6c8906ceb841cf983ab</Anchor>
    <Abstract>Default constructor.</Abstract>
    <DeclaredIn>AttributeValue.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getLength</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::AttributeValue</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_attribute_value.html</Path>
    <Anchor>a651c9a76212fa1cbb1e6ae5b113f165a</Anchor>
    <DeclaredIn>AttributeValue.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getBuffer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::AttributeValue</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_attribute_value.html</Path>
    <Anchor>adff0a8a87baabfe812b44939eb8c0c7e</Anchor>
    <DeclaredIn>AttributeValue.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>toString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::AttributeValue</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_attribute_value.html</Path>
    <Anchor>ad23912b9b0adab117286b672d9b0da62</Anchor>
    <Abstract>Convert to a string.</Abstract>
    <DeclaredIn>AttributeValue.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>equalsString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::AttributeValue</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_attribute_value.html</Path>
    <Anchor>aac3934ff5c11eb071fc269ace7c680d7</Anchor>
    <Abstract>A utility to compare the equality of the buffer&amp;#39;s string representation to a string.</Abstract>
    <DeclaredIn>AttributeValue.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clone</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>spdr::event::AttributeValue</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_attribute_value.html</Path>
    <Anchor>ac073aa2b29b2db0e4b93af21238ef2d9</Anchor>
    <Abstract>Deep copy, allocate storage on the heap.</Abstract>
    <DeclaredIn>AttributeValue.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>ffunc</Type>
      <Scope>spdr::event::AttributeValue</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_attribute_value.html</Path>
    <Anchor>ab072a13cc7914af90095e7d13f7b5513</Anchor>
    <Abstract>Compare two AttributeValue objects for equality.</Abstract>
    <DeclaredIn>AttributeValue.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>ffunc</Type>
      <Scope>spdr::event::AttributeValue</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_attribute_value.html</Path>
    <Anchor>a8b2eae6fa7cfdb57eac5ddb59284e530</Anchor>
    <Abstract>Compare two AttributeValue objects for inequality.</Abstract>
    <DeclaredIn>AttributeValue.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>STR</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>spdr::event::AttributeValue</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_attribute_value.html</Path>
    <Anchor>aa6eec1c7c2e4cc9d7c616a7c9c4ed528a667b48f52fbeb5ec2f6dfedc931cf828</Anchor>
    <Abstract>Treat like an std::string.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>CSTR</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>spdr::event::AttributeValue</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_attribute_value.html</Path>
    <Anchor>aa6eec1c7c2e4cc9d7c616a7c9c4ed528a03164b776d2cc6bcdae933bba6f9f76a</Anchor>
    <Abstract>Treat like a C-string, expect a null terminated string.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>BIN</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>spdr::event::AttributeValue</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_attribute_value.html</Path>
    <Anchor>aa6eec1c7c2e4cc9d7c616a7c9c4ed528a164f0a671b9430fb7a40e54c8197c784</Anchor>
    <Abstract>Treat like a binary buffer, print the hex value of every byte.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::event::ConnectivityEvent</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::event::ConnectivityEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_connectivity_event.html</Path>
    <Abstract>An event describing the connectivity level of a node with its peers.</Abstract>
    <DeclaredIn>ConnectivityEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ConnectivityEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::ConnectivityEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_connectivity_event.html</Path>
    <Anchor>ac4d9de053121e23776acac31b837d690</Anchor>
    <Abstract>Constructor.</Abstract>
    <DeclaredIn>ConnectivityEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~ConnectivityEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::ConnectivityEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_connectivity_event.html</Path>
    <Anchor>a8c7d24ed0f3f5483a504ba5cbd66d2c4</Anchor>
    <Abstract>Destructor.</Abstract>
    <DeclaredIn>ConnectivityEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNumRandomNeighbors</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::ConnectivityEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_connectivity_event.html</Path>
    <Anchor>a5882bcf4165d7ff2346b93e258268ada</Anchor>
    <Abstract>Get the number of random neighbors.</Abstract>
    <DeclaredIn>ConnectivityEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNumRingNeighbors</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::ConnectivityEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_connectivity_event.html</Path>
    <Anchor>a9b749a06096e92896e7ac86636b4c205</Anchor>
    <Abstract>Get the number of ring neighbors.</Abstract>
    <DeclaredIn>ConnectivityEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNumOutStructuredNeighbors</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::ConnectivityEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_connectivity_event.html</Path>
    <Anchor>ad1e097c33193649f27f47f9734b07aeb</Anchor>
    <Abstract>Get the number of outgoing structured neighbors.</Abstract>
    <DeclaredIn>ConnectivityEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNumInStructuredNeighbors</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::ConnectivityEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_connectivity_event.html</Path>
    <Anchor>a38d4a1edcaeb039c54636119ed4932a6</Anchor>
    <Abstract>Get the number of incoming structured neighbors.</Abstract>
    <DeclaredIn>ConnectivityEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNeighbors</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::ConnectivityEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_connectivity_event.html</Path>
    <Anchor>af806ef50bb5d8541989ce5d340467f6f</Anchor>
    <Abstract>Get the names of ring and random neighbors.</Abstract>
    <DeclaredIn>ConnectivityEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getOutStructuredNeighbors</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::ConnectivityEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_connectivity_event.html</Path>
    <Anchor>a571ba9884ba8d7c8e53a2a7da8d70b6a</Anchor>
    <Abstract>Get the names of outgoing structured neighbors.</Abstract>
    <DeclaredIn>ConnectivityEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getinStructuredNeighbors</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::ConnectivityEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_connectivity_event.html</Path>
    <Anchor>a285cc453bb982c1ca621e7c22e255ba4</Anchor>
    <Abstract>Get the names of incoming structured neighbors.</Abstract>
    <DeclaredIn>ConnectivityEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>toString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::ConnectivityEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_connectivity_event.html</Path>
    <Anchor>a3570c9497bbfd784fd14b00882bd483e</Anchor>
    <Abstract>Get a string representation of the event.</Abstract>
    <DeclaredIn>ConnectivityEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~SpiderCastEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>aaaceb0a5220903ba1096428d54da7015</Anchor>
    <Abstract>Destructor.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>acf88893346559e11193e5a2c63d2f876</Anchor>
    <Abstract>Get event type.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>eventTypeName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>a42161188854c1d0d785c7f7cfd06cd58</Anchor>
    <Abstract>Event name array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>errorCodeName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>ac0678e1418204c5a2108fcf9a6fbde83</Anchor>
    <Abstract>Error code name array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SpiderCastEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>ac339525c7b2645c4a370faa6527b730c</Anchor>
    <Abstract>Constructor.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>type</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>aee517857f4b849d3f15bc63b2c2a6a26</Anchor>
    <Abstract>Event type.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::event::DHTEvent</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::event::DHTEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_d_h_t_event.html</Path>
    <Abstract>The super-class of all DHT events.</Abstract>
    <DeclaredIn>DHTEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~DHTEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::DHTEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_d_h_t_event.html</Path>
    <Anchor>af5709e513a653774a451b710a4ba7ad9</Anchor>
    <DeclaredIn>DHTEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~SpiderCastEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>aaaceb0a5220903ba1096428d54da7015</Anchor>
    <Abstract>Destructor.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>acf88893346559e11193e5a2c63d2f876</Anchor>
    <Abstract>Get event type.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>toString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>a4b985a23f1f99f8940be1b105928c005</Anchor>
    <Abstract>Get a string representation of the event.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DHTEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::DHTEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_d_h_t_event.html</Path>
    <Anchor>ae82bd67bcd33524301a2aa579aaeac18</Anchor>
    <DeclaredIn>DHTEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SpiderCastEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>ac339525c7b2645c4a370faa6527b730c</Anchor>
    <Abstract>Constructor.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>eventTypeName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>a42161188854c1d0d785c7f7cfd06cd58</Anchor>
    <Abstract>Event name array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>errorCodeName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>ac0678e1418204c5a2108fcf9a6fbde83</Anchor>
    <Abstract>Error code name array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>type</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>aee517857f4b849d3f15bc63b2c2a6a26</Anchor>
    <Abstract>Event type.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::event::DHTServiceReadyEvent</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::event::DHTServiceReadyEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_d_h_t_service_ready_event.html</Path>
    <Abstract>This event is fired in the DHTService when the service is connected to the DHT server group...</Abstract>
    <DeclaredIn>DHTEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DHTServiceReadyEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::DHTServiceReadyEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_d_h_t_service_ready_event.html</Path>
    <Anchor>a1559d23a892445e865d6fd88baf290e8</Anchor>
    <DeclaredIn>DHTEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~DHTServiceReadyEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::DHTServiceReadyEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_d_h_t_service_ready_event.html</Path>
    <Anchor>afcc5d754b0ff474f61060df6a2090a47</Anchor>
    <DeclaredIn>DHTEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~DHTEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::DHTEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_d_h_t_event.html</Path>
    <Anchor>af5709e513a653774a451b710a4ba7ad9</Anchor>
    <DeclaredIn>DHTEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~SpiderCastEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>aaaceb0a5220903ba1096428d54da7015</Anchor>
    <Abstract>Destructor.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>acf88893346559e11193e5a2c63d2f876</Anchor>
    <Abstract>Get event type.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>toString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>a4b985a23f1f99f8940be1b105928c005</Anchor>
    <Abstract>Get a string representation of the event.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>eventTypeName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>a42161188854c1d0d785c7f7cfd06cd58</Anchor>
    <Abstract>Event name array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>errorCodeName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>ac0678e1418204c5a2108fcf9a6fbde83</Anchor>
    <Abstract>Error code name array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DHTEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::DHTEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_d_h_t_event.html</Path>
    <Anchor>ae82bd67bcd33524301a2aa579aaeac18</Anchor>
    <DeclaredIn>DHTEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>type</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>aee517857f4b849d3f15bc63b2c2a6a26</Anchor>
    <Abstract>Event type.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::event::DHTServiceUnavailableEvent</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::event::DHTServiceUnavailableEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_d_h_t_service_unavailable_event.html</Path>
    <Abstract>This event is fired in the DHTService when the service becomes disconnected to the DHT server group...</Abstract>
    <DeclaredIn>DHTEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~DHTEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::DHTEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_d_h_t_event.html</Path>
    <Anchor>af5709e513a653774a451b710a4ba7ad9</Anchor>
    <DeclaredIn>DHTEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>eventTypeName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>a42161188854c1d0d785c7f7cfd06cd58</Anchor>
    <Abstract>Event name array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>errorCodeName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>ac0678e1418204c5a2108fcf9a6fbde83</Anchor>
    <Abstract>Error code name array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>DHTEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::DHTEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_d_h_t_event.html</Path>
    <Anchor>ae82bd67bcd33524301a2aa579aaeac18</Anchor>
    <DeclaredIn>DHTEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>type</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>aee517857f4b849d3f15bc63b2c2a6a26</Anchor>
    <Abstract>Event type.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::event::FatalErrorEvent</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::event::FatalErrorEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_fatal_error_event.html</Path>
    <Abstract>A fatal error event.</Abstract>
    <DeclaredIn>FatalErrorEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>FatalErrorEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::FatalErrorEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_fatal_error_event.html</Path>
    <Anchor>aca3264374c7583bcf70e9997d6db82ac</Anchor>
    <Abstract>Constructor.</Abstract>
    <DeclaredIn>FatalErrorEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~FatalErrorEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::FatalErrorEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_fatal_error_event.html</Path>
    <Anchor>a11e5886f4fa1c6f7f06ebf33b8ad2c1f</Anchor>
    <Abstract>Distructor.</Abstract>
    <DeclaredIn>FatalErrorEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getErrorCode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::FatalErrorEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_fatal_error_event.html</Path>
    <Anchor>a03dde02ab10de80104e4f278d7472533</Anchor>
    <Abstract>Get the error code.</Abstract>
    <DeclaredIn>FatalErrorEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getInfo</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::FatalErrorEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_fatal_error_event.html</Path>
    <Anchor>a7b25ca38eb51097b94474490d589d3a2</Anchor>
    <Abstract>Get additional text information.</Abstract>
    <DeclaredIn>FatalErrorEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getCause</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::FatalErrorEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_fatal_error_event.html</Path>
    <Anchor>a1edde488b7844a9fd8ab6ab13455b347</Anchor>
    <Abstract>Get the exception that caused the failure, if applicable.</Abstract>
    <DeclaredIn>FatalErrorEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>toString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::FatalErrorEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_fatal_error_event.html</Path>
    <Anchor>a6ae2a5cc16423c9208cf165066c67ed2</Anchor>
    <Abstract>A string representation of the error.</Abstract>
    <DeclaredIn>FatalErrorEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~SpiderCastEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>aaaceb0a5220903ba1096428d54da7015</Anchor>
    <Abstract>Destructor.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>acf88893346559e11193e5a2c63d2f876</Anchor>
    <Abstract>Get event type.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>eventTypeName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>a42161188854c1d0d785c7f7cfd06cd58</Anchor>
    <Abstract>Event name array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>errorCodeName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>ac0678e1418204c5a2108fcf9a6fbde83</Anchor>
    <Abstract>Error code name array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SpiderCastEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>ac339525c7b2645c4a370faa6527b730c</Anchor>
    <Abstract>Constructor.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>type</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>aee517857f4b849d3f15bc63b2c2a6a26</Anchor>
    <Abstract>Event type.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::event::MembershipEvent</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::event::MembershipEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_membership_event.html</Path>
    <Abstract>The super-class of all membership events.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~MembershipEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::MembershipEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_membership_event.html</Path>
    <Anchor>a108a2c93320a5b20097a3f5be3bd0fab</Anchor>
    <Abstract>Distructor.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~SpiderCastEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>aaaceb0a5220903ba1096428d54da7015</Anchor>
    <Abstract>Destructor.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>acf88893346559e11193e5a2c63d2f876</Anchor>
    <Abstract>Get event type.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>toString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>a4b985a23f1f99f8940be1b105928c005</Anchor>
    <Abstract>Get a string representation of the event.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MembershipEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::MembershipEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_membership_event.html</Path>
    <Anchor>a1c32176ba23b9c70626aa189c776b9ef</Anchor>
    <Abstract>Constructor.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SpiderCastEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>ac339525c7b2645c4a370faa6527b730c</Anchor>
    <Abstract>Constructor.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>eventTypeName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>a42161188854c1d0d785c7f7cfd06cd58</Anchor>
    <Abstract>Event name array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>errorCodeName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>ac0678e1418204c5a2108fcf9a6fbde83</Anchor>
    <Abstract>Error code name array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>type</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>aee517857f4b849d3f15bc63b2c2a6a26</Anchor>
    <Abstract>Event type.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::event::NodeJoinEvent</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::event::NodeJoinEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_node_join_event.html</Path>
    <Abstract>Node join event.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NodeJoinEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::NodeJoinEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_node_join_event.html</Path>
    <Anchor>af1fd65422f47b1df3d3d12f4161a5135</Anchor>
    <Abstract>Constructor.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~NodeJoinEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::NodeJoinEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_node_join_event.html</Path>
    <Anchor>a2cb274673070d09d7c59e49278082b8d</Anchor>
    <Abstract>Distructor.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNodeID</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::NodeJoinEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_node_join_event.html</Path>
    <Anchor>a5a4b6e1c533fa0e7198e90c26e26e0ea</Anchor>
    <Abstract>Get NodeID.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getMetaData</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::NodeJoinEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_node_join_event.html</Path>
    <Anchor>a499934b68739cceb3e5d1e6e7531e38c</Anchor>
    <Abstract>Get MetaData.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>toString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::NodeJoinEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_node_join_event.html</Path>
    <Anchor>af3461c92053c6dbd40b7262fa036385d</Anchor>
    <Abstract>A string representation of the event.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~MembershipEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::MembershipEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_membership_event.html</Path>
    <Anchor>a108a2c93320a5b20097a3f5be3bd0fab</Anchor>
    <Abstract>Distructor.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~SpiderCastEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>aaaceb0a5220903ba1096428d54da7015</Anchor>
    <Abstract>Destructor.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>acf88893346559e11193e5a2c63d2f876</Anchor>
    <Abstract>Get event type.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>eventTypeName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>a42161188854c1d0d785c7f7cfd06cd58</Anchor>
    <Abstract>Event name array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>errorCodeName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>ac0678e1418204c5a2108fcf9a6fbde83</Anchor>
    <Abstract>Error code name array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MembershipEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::MembershipEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_membership_event.html</Path>
    <Anchor>a1c32176ba23b9c70626aa189c776b9ef</Anchor>
    <Abstract>Constructor.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>type</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>aee517857f4b849d3f15bc63b2c2a6a26</Anchor>
    <Abstract>Event type.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::event::NodeLeaveEvent</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::event::NodeLeaveEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_node_leave_event.html</Path>
    <Abstract>Node leave event.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>NodeLeaveEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::NodeLeaveEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_node_leave_event.html</Path>
    <Anchor>aee6e17b369d82ed8555142b9cae35cff</Anchor>
    <Abstract>Constructor.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~NodeLeaveEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::NodeLeaveEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_node_leave_event.html</Path>
    <Anchor>a61ccee43ed9463217a11da812326951a</Anchor>
    <Abstract>Distructor.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getNodeID</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::NodeLeaveEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_node_leave_event.html</Path>
    <Anchor>ae08f7a9a545fdd65db68554d29a45620</Anchor>
    <Abstract>Get the NodeID.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>toString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::NodeLeaveEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_node_leave_event.html</Path>
    <Anchor>a27cb329b7500164b5b125db3ba44ebb1</Anchor>
    <Abstract>A string representation of the event.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~MembershipEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::MembershipEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_membership_event.html</Path>
    <Anchor>a108a2c93320a5b20097a3f5be3bd0fab</Anchor>
    <Abstract>Distructor.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~SpiderCastEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>aaaceb0a5220903ba1096428d54da7015</Anchor>
    <Abstract>Destructor.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>acf88893346559e11193e5a2c63d2f876</Anchor>
    <Abstract>Get event type.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>eventTypeName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>a42161188854c1d0d785c7f7cfd06cd58</Anchor>
    <Abstract>Event name array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>errorCodeName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>ac0678e1418204c5a2108fcf9a6fbde83</Anchor>
    <Abstract>Error code name array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MembershipEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::MembershipEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_membership_event.html</Path>
    <Anchor>a1c32176ba23b9c70626aa189c776b9ef</Anchor>
    <Abstract>Constructor.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>type</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>aee517857f4b849d3f15bc63b2c2a6a26</Anchor>
    <Abstract>Event type.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::event::ViewChangeEvent</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::event::ViewChangeEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_view_change_event.html</Path>
    <Abstract>View change event.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ViewChangeEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::ViewChangeEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_view_change_event.html</Path>
    <Anchor>abc838fe194d16d96d024a065131c51cb</Anchor>
    <Abstract>Constructor.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~ViewChangeEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::ViewChangeEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_view_change_event.html</Path>
    <Anchor>a6f4a8cafef787345d842859b857dca68</Anchor>
    <Abstract>Distructor.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getView</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::ViewChangeEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_view_change_event.html</Path>
    <Anchor>a514f62865f13c680150cba2a788e1aec</Anchor>
    <Abstract>Get the view.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>toString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::ViewChangeEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_view_change_event.html</Path>
    <Anchor>a9a0ae2707dedbae9e09afc74af1cc079</Anchor>
    <Abstract>A string representation of the event.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~MembershipEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::MembershipEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_membership_event.html</Path>
    <Anchor>a108a2c93320a5b20097a3f5be3bd0fab</Anchor>
    <Abstract>Distructor.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~SpiderCastEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>aaaceb0a5220903ba1096428d54da7015</Anchor>
    <Abstract>Destructor.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>acf88893346559e11193e5a2c63d2f876</Anchor>
    <Abstract>Get event type.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>viewMapToString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>spdr::event::ViewChangeEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_view_change_event.html</Path>
    <Anchor>a1399f6e32eb760493e0248c473196033</Anchor>
    <Abstract>A detailed string representation of the view.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>eventTypeName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>a42161188854c1d0d785c7f7cfd06cd58</Anchor>
    <Abstract>Event name array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>errorCodeName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>ac0678e1418204c5a2108fcf9a6fbde83</Anchor>
    <Abstract>Error code name array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MembershipEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::MembershipEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_membership_event.html</Path>
    <Anchor>a1c32176ba23b9c70626aa189c776b9ef</Anchor>
    <Abstract>Constructor.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>type</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>aee517857f4b849d3f15bc63b2c2a6a26</Anchor>
    <Abstract>Event type.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::event::ChangeOfMetaDataEvent</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::event::ChangeOfMetaDataEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_change_of_meta_data_event.html</Path>
    <Abstract>Change of meta-data event.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ChangeOfMetaDataEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::ChangeOfMetaDataEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_change_of_meta_data_event.html</Path>
    <Anchor>a487e6039cd83c66cb9658af702f9c559</Anchor>
    <Abstract>Constructor.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~ChangeOfMetaDataEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::ChangeOfMetaDataEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_change_of_meta_data_event.html</Path>
    <Anchor>aaa094bd67184019689fd6f9d31752ca6</Anchor>
    <Abstract>Distructor.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getView</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::ChangeOfMetaDataEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_change_of_meta_data_event.html</Path>
    <Anchor>a348358551066c26cad006f5236610103</Anchor>
    <Abstract>Get the view.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>toString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::ChangeOfMetaDataEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_change_of_meta_data_event.html</Path>
    <Anchor>ace16932bfd640b9b7a79e5feb2703b64</Anchor>
    <Abstract>A short string representation of the event, does not print the view.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~MembershipEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::MembershipEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_membership_event.html</Path>
    <Anchor>a108a2c93320a5b20097a3f5be3bd0fab</Anchor>
    <Abstract>Distructor.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~SpiderCastEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>aaaceb0a5220903ba1096428d54da7015</Anchor>
    <Abstract>Destructor.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>acf88893346559e11193e5a2c63d2f876</Anchor>
    <Abstract>Get event type.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>viewMapToString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>spdr::event::ChangeOfMetaDataEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_change_of_meta_data_event.html</Path>
    <Anchor>ade2bd30402721a1d5b428da03362a983</Anchor>
    <Abstract>A detailed string representation of the view.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>eventTypeName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>a42161188854c1d0d785c7f7cfd06cd58</Anchor>
    <Abstract>Event name array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>errorCodeName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>ac0678e1418204c5a2108fcf9a6fbde83</Anchor>
    <Abstract>Error code name array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MembershipEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::MembershipEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_membership_event.html</Path>
    <Anchor>a1c32176ba23b9c70626aa189c776b9ef</Anchor>
    <Abstract>Constructor.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>type</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>aee517857f4b849d3f15bc63b2c2a6a26</Anchor>
    <Abstract>Event type.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::event::ForeignZoneMembershipEvent</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::event::ForeignZoneMembershipEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_foreign_zone_membership_event.html</Path>
    <Abstract>Foreign zone membership event.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ForeignZoneMembershipEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::ForeignZoneMembershipEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_foreign_zone_membership_event.html</Path>
    <Anchor>aeb3288eef98b2a5ac1f2c66594a3ce42</Anchor>
    <Abstract>Constructor of a successful request.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ForeignZoneMembershipEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::ForeignZoneMembershipEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_foreign_zone_membership_event.html</Path>
    <Anchor>a16325b7bbfeb0df2e3c5c70927e08e07</Anchor>
    <Abstract>Constructor of a failed request.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~ForeignZoneMembershipEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::ForeignZoneMembershipEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_foreign_zone_membership_event.html</Path>
    <Anchor>ab5ad816a6be4cc0c2fe8e6e955259a71</Anchor>
    <Abstract>Distructor.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getRequestID</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::ForeignZoneMembershipEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_foreign_zone_membership_event.html</Path>
    <Anchor>a65a49dfe4906b73b721a101b7edcd01e</Anchor>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getZoneBusName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::ForeignZoneMembershipEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_foreign_zone_membership_event.html</Path>
    <Anchor>af737d6275e22615fe0fe439c1e4475ca</Anchor>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getView</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::ForeignZoneMembershipEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_foreign_zone_membership_event.html</Path>
    <Anchor>a016ab45bd11ed2f1165f5b546a9fad91</Anchor>
    <Abstract>Get the view.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isLastEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::ForeignZoneMembershipEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_foreign_zone_membership_event.html</Path>
    <Anchor>afa3510e6dbfd383e7dbf2c68ec7c3176</Anchor>
    <Abstract>Is this the last event in series?</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getErrorCode</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::ForeignZoneMembershipEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_foreign_zone_membership_event.html</Path>
    <Anchor>a9cefd72a4502662be6da621c1fef1045</Anchor>
    <Abstract>What is the error code?</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getErrorMessage</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::ForeignZoneMembershipEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_foreign_zone_membership_event.html</Path>
    <Anchor>a7179470bba29e39bd9cd8a30b43f42a6</Anchor>
    <Abstract>A text error message.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isError</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::ForeignZoneMembershipEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_foreign_zone_membership_event.html</Path>
    <Anchor>a0afdc33dc03af0b66e26fc8e7572741c</Anchor>
    <Abstract>Is there an error?</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>toString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::ForeignZoneMembershipEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_foreign_zone_membership_event.html</Path>
    <Anchor>a13fd8768992df75bb03163e93bb8ba71</Anchor>
    <Abstract>A short string representation of the event, does not print the view.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~MembershipEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::MembershipEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_membership_event.html</Path>
    <Anchor>a108a2c93320a5b20097a3f5be3bd0fab</Anchor>
    <Abstract>Distructor.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~SpiderCastEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>aaaceb0a5220903ba1096428d54da7015</Anchor>
    <Abstract>Destructor.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>acf88893346559e11193e5a2c63d2f876</Anchor>
    <Abstract>Get event type.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>eventTypeName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>a42161188854c1d0d785c7f7cfd06cd58</Anchor>
    <Abstract>Event name array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>errorCodeName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>ac0678e1418204c5a2108fcf9a6fbde83</Anchor>
    <Abstract>Error code name array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MembershipEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::MembershipEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_membership_event.html</Path>
    <Anchor>a1c32176ba23b9c70626aa189c776b9ef</Anchor>
    <Abstract>Constructor.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>type</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>aee517857f4b849d3f15bc63b2c2a6a26</Anchor>
    <Abstract>Event type.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::event::ZoneCensusEvent</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::event::ZoneCensusEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_zone_census_event.html</Path>
    <Abstract>Zone census event.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>ZoneCensusEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::ZoneCensusEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_zone_census_event.html</Path>
    <Anchor>ac0f024ef68aee3ff0254d55b6ce328a4</Anchor>
    <Abstract>Constructor.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~ZoneCensusEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::ZoneCensusEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_zone_census_event.html</Path>
    <Anchor>ac9c2e7dc1d3155348497d5c3c8e8e3f3</Anchor>
    <Abstract>Distructor.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getRequestID</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::ZoneCensusEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_zone_census_event.html</Path>
    <Anchor>a5e1cc323acd867aa4808f6789186e599</Anchor>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getZoneCensus</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::ZoneCensusEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_zone_census_event.html</Path>
    <Anchor>ae6900afcb4cf1f1257dfcaf670112940</Anchor>
    <Abstract>Get the census.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isFullCensus</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::ZoneCensusEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_zone_census_event.html</Path>
    <Anchor>a35830c1a6ada17735f09d28d10b4762b</Anchor>
    <Abstract>Is this a full census or a differential update?</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>toString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::ZoneCensusEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_zone_census_event.html</Path>
    <Anchor>af4bc21d912ea2857a364864362f123e3</Anchor>
    <Abstract>A short string representation of the event, does not print the census.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~MembershipEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::MembershipEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_membership_event.html</Path>
    <Anchor>a108a2c93320a5b20097a3f5be3bd0fab</Anchor>
    <Abstract>Distructor.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~SpiderCastEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>aaaceb0a5220903ba1096428d54da7015</Anchor>
    <Abstract>Destructor.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>acf88893346559e11193e5a2c63d2f876</Anchor>
    <Abstract>Get event type.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>zoneCensusToString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>spdr::event::ZoneCensusEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_zone_census_event.html</Path>
    <Anchor>a612c063841182498bdd228ee7a214678</Anchor>
    <Abstract>Creates a string representation of the zone-census.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>eventTypeName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>a42161188854c1d0d785c7f7cfd06cd58</Anchor>
    <Abstract>Event name array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>errorCodeName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>ac0678e1418204c5a2108fcf9a6fbde83</Anchor>
    <Abstract>Error code name array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MembershipEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::MembershipEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_membership_event.html</Path>
    <Anchor>a1c32176ba23b9c70626aa189c776b9ef</Anchor>
    <Abstract>Constructor.</Abstract>
    <DeclaredIn>MembershipEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>type</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>aee517857f4b849d3f15bc63b2c2a6a26</Anchor>
    <Abstract>Event type.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::event::MetaData</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::event::MetaData</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_meta_data.html</Path>
    <Abstract>Holds the node&amp;#39;s meta-data.</Abstract>
    <DeclaredIn>MetaData.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MetaData</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::MetaData</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_meta_data.html</Path>
    <Anchor>a956088f5cfd798055915933d5c0c7f58</Anchor>
    <Abstract>Constructor.</Abstract>
    <DeclaredIn>MetaData.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~MetaData</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::MetaData</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_meta_data.html</Path>
    <Anchor>a745a6c204abeb1a4746a43e4c2b52c63</Anchor>
    <Abstract>Destructor.</Abstract>
    <DeclaredIn>MetaData.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getAttributeMap</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::MetaData</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_meta_data.html</Path>
    <Anchor>adda6919af0959eae02c9f416e663a4f2</Anchor>
    <Abstract>Get the attribute map.</Abstract>
    <DeclaredIn>MetaData.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getIncarnationNumber</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::MetaData</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_meta_data.html</Path>
    <Anchor>a3fc594f45a6355444ac77bfbbaa4b5fb</Anchor>
    <Abstract>Get the incarnation number.</Abstract>
    <DeclaredIn>MetaData.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>toString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::MetaData</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_meta_data.html</Path>
    <Anchor>acc1dd664c76556052bc02a2c5b852c65</Anchor>
    <Abstract>A string representation of the MetaData.</Abstract>
    <DeclaredIn>MetaData.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>clone</Name>
      <APILanguage>cpp</APILanguage>
      <Type>clm</Type>
      <Scope>spdr::event::MetaData</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_meta_data.html</Path>
    <Anchor>a78bf13de2f473bb31d5bcf43eacbbabe</Anchor>
    <Abstract>Deep copy, allocated on the heap.</Abstract>
    <DeclaredIn>MetaData.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>ffunc</Type>
      <Scope>spdr::event::MetaData</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_meta_data.html</Path>
    <Anchor>aae13868033c71073fd3d900b4b68aad4</Anchor>
    <Abstract>Compare two MetaData objects for equality.</Abstract>
    <DeclaredIn>MetaData.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>ffunc</Type>
      <Scope>spdr::event::MetaData</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_meta_data.html</Path>
    <Anchor>a13f3f91e31f77d0b4d9a314dbfe96492</Anchor>
    <Abstract>Compare two MetaData objects for inequality.</Abstract>
    <DeclaredIn>MetaData.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::event::P2PStreamEvent</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::event::P2PStreamEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_p2_p_stream_event.html</Path>
    <DeclaredIn>P2PStreamEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~P2PStreamEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::P2PStreamEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_p2_p_stream_event.html</Path>
    <Anchor>a89403c66f250d762ed7f7632a34e2043</Anchor>
    <DeclaredIn>P2PStreamEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~SpiderCastEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>aaaceb0a5220903ba1096428d54da7015</Anchor>
    <Abstract>Destructor.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>acf88893346559e11193e5a2c63d2f876</Anchor>
    <Abstract>Get event type.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>toString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>a4b985a23f1f99f8940be1b105928c005</Anchor>
    <Abstract>Get a string representation of the event.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>P2PStreamEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::P2PStreamEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_p2_p_stream_event.html</Path>
    <Anchor>a8d8067e1e47abc3c9a1f5ec9236658d3</Anchor>
    <DeclaredIn>P2PStreamEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SpiderCastEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>ac339525c7b2645c4a370faa6527b730c</Anchor>
    <Abstract>Constructor.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>eventTypeName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>a42161188854c1d0d785c7f7cfd06cd58</Anchor>
    <Abstract>Event name array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>errorCodeName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>ac0678e1418204c5a2108fcf9a6fbde83</Anchor>
    <Abstract>Error code name array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>type</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>aee517857f4b849d3f15bc63b2c2a6a26</Anchor>
    <Abstract>Event type.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::event::P2PStreamBreakEvent</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::event::P2PStreamBreakEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_p2_p_stream_break_event.html</Path>
    <DeclaredIn>P2PStreamEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>P2PStreamBreakEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::P2PStreamBreakEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_p2_p_stream_break_event.html</Path>
    <Anchor>a840f6204560c189bbaafbabeea489f39</Anchor>
    <DeclaredIn>P2PStreamEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~P2PStreamBreakEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::P2PStreamBreakEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_p2_p_stream_break_event.html</Path>
    <Anchor>a27db5033cd59f6956043646093755c98</Anchor>
    <DeclaredIn>P2PStreamEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getSid</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::P2PStreamBreakEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_p2_p_stream_break_event.html</Path>
    <Anchor>ade95ef3a12ab02c1bb95899bd55f6730</Anchor>
    <DeclaredIn>P2PStreamEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~P2PStreamEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::P2PStreamEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_p2_p_stream_event.html</Path>
    <Anchor>a89403c66f250d762ed7f7632a34e2043</Anchor>
    <DeclaredIn>P2PStreamEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~SpiderCastEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>aaaceb0a5220903ba1096428d54da7015</Anchor>
    <Abstract>Destructor.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>acf88893346559e11193e5a2c63d2f876</Anchor>
    <Abstract>Get event type.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>toString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>a4b985a23f1f99f8940be1b105928c005</Anchor>
    <Abstract>Get a string representation of the event.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>eventTypeName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>a42161188854c1d0d785c7f7cfd06cd58</Anchor>
    <Abstract>Event name array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>errorCodeName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>ac0678e1418204c5a2108fcf9a6fbde83</Anchor>
    <Abstract>Error code name array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>P2PStreamEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::P2PStreamEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_p2_p_stream_event.html</Path>
    <Anchor>a8d8067e1e47abc3c9a1f5ec9236658d3</Anchor>
    <DeclaredIn>P2PStreamEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>type</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>aee517857f4b849d3f15bc63b2c2a6a26</Anchor>
    <Abstract>Event type.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::event::PubSubEvent</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::event::PubSubEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_pub_sub_event.html</Path>
    <DeclaredIn>PubSubEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PubSubEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::PubSubEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_pub_sub_event.html</Path>
    <Anchor>a65ff5ec1bca2977f31c29308c31a56c9</Anchor>
    <DeclaredIn>PubSubEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~PubSubEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::PubSubEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_pub_sub_event.html</Path>
    <Anchor>add3949d02ce100ce70b885d8e2a948a6</Anchor>
    <DeclaredIn>PubSubEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~SpiderCastEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>aaaceb0a5220903ba1096428d54da7015</Anchor>
    <Abstract>Destructor.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>acf88893346559e11193e5a2c63d2f876</Anchor>
    <Abstract>Get event type.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>toString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>a4b985a23f1f99f8940be1b105928c005</Anchor>
    <Abstract>Get a string representation of the event.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>eventTypeName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>a42161188854c1d0d785c7f7cfd06cd58</Anchor>
    <Abstract>Event name array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>errorCodeName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>ac0678e1418204c5a2108fcf9a6fbde83</Anchor>
    <Abstract>Error code name array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SpiderCastEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>ac339525c7b2645c4a370faa6527b730c</Anchor>
    <Abstract>Constructor.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>type</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>aee517857f4b849d3f15bc63b2c2a6a26</Anchor>
    <Abstract>Event type.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::event::SpiderCastEvent</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Abstract>Superclass of event hierarchy.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~SpiderCastEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>aaaceb0a5220903ba1096428d54da7015</Anchor>
    <Abstract>Destructor.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getType</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>acf88893346559e11193e5a2c63d2f876</Anchor>
    <Abstract>Get event type.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>toString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>a4b985a23f1f99f8940be1b105928c005</Anchor>
    <Abstract>Get a string representation of the event.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>eventTypeName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>a42161188854c1d0d785c7f7cfd06cd58</Anchor>
    <Abstract>Event name array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>errorCodeName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>ac0678e1418204c5a2108fcf9a6fbde83</Anchor>
    <Abstract>Error code name array.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>SpiderCastEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>ac339525c7b2645c4a370faa6527b730c</Anchor>
    <Abstract>Constructor.</Abstract>
    <DeclaredIn>SpiderCastEvent.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>type</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::event::SpiderCastEvent</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1event_1_1_spider_cast_event.html</Path>
    <Anchor>aee517857f4b849d3f15bc63b2c2a6a26</Anchor>
    <Abstract>Event type.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::leader_election</Name>
      <APILanguage>c</APILanguage>
      <Type>ns</Type>
      <Scope>spdr::leader_election</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1leader__election.html</Path>
    <Abstract>A name space for the leader election service API.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>LeaderElectionService_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::leader_election</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1leader__election.html</Path>
    <Anchor>af30df052d48a239611fd6727cefe3f79</Anchor>
    <DeclaredIn>LeaderElectionService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Election_Attribute_KEY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::leader_election</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1leader__election.html</Path>
    <Anchor>a3a680e67023974db5e3f482d0844f9d1</Anchor>
    <Abstract>The internal key used for the leader election implementation over the attribute service.</Abstract>
    <DeclaredIn>LeaderElectionService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::leader_election::LeaderElectionListener</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::leader_election::LeaderElectionListener</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1leader__election_1_1_leader_election_listener.html</Path>
    <Abstract>A call back interface for leader election results.</Abstract>
    <DeclaredIn>LeaderElectionListener.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~LeaderElectionListener</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::leader_election::LeaderElectionListener</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1leader__election_1_1_leader_election_listener.html</Path>
    <Anchor>a630ebe93986d74650c53e27cc622fe42</Anchor>
    <DeclaredIn>LeaderElectionListener.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>onLeaderChange</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::leader_election::LeaderElectionListener</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1leader__election_1_1_leader_election_listener.html</Path>
    <Anchor>ae29e37727fe4fa33f672af3c2bbedc87</Anchor>
    <Abstract>Delivers the identity of a new leader, or NULL in case there is no leader.</Abstract>
    <DeclaredIn>LeaderElectionListener.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>LeaderElectionListener</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::leader_election::LeaderElectionListener</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1leader__election_1_1_leader_election_listener.html</Path>
    <Anchor>a3945b5bd2419dd4437a83f9c65224c55</Anchor>
    <DeclaredIn>LeaderElectionListener.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::leader_election::LeaderElectionService</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::leader_election::LeaderElectionService</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1leader__election_1_1_leader_election_service.html</Path>
    <Abstract>A service that allows a group of nodes to elect a leader.</Abstract>
    <DeclaredIn>LeaderElectionService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~LeaderElectionService</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::leader_election::LeaderElectionService</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1leader__election_1_1_leader_election_service.html</Path>
    <Anchor>a7ad6ef84ef2fef4fa5ef84082534bcef</Anchor>
    <DeclaredIn>LeaderElectionService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getLeader</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::leader_election::LeaderElectionService</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1leader__election_1_1_leader_election_service.html</Path>
    <Anchor>abc5fd22678cf825d8241c5c94600ecd5</Anchor>
    <Abstract>Get the current leader.</Abstract>
    <DeclaredIn>LeaderElectionService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isLeader</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::leader_election::LeaderElectionService</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1leader__election_1_1_leader_election_service.html</Path>
    <Anchor>ad3c7dfa9b5043cfe8079653204ab891a</Anchor>
    <Abstract>Is the local node the leader.</Abstract>
    <DeclaredIn>LeaderElectionService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isCandidate</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::leader_election::LeaderElectionService</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1leader__election_1_1_leader_election_service.html</Path>
    <Anchor>aa3f03497ce9ae49312ea107bc4d1864e</Anchor>
    <Abstract>Is the local node a candidate.</Abstract>
    <DeclaredIn>LeaderElectionService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>close</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::leader_election::LeaderElectionService</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1leader__election_1_1_leader_election_service.html</Path>
    <Anchor>a667ee87a0a02a6ec82326665d819e1f8</Anchor>
    <Abstract>Closes the service.</Abstract>
    <DeclaredIn>LeaderElectionService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isClosed</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::leader_election::LeaderElectionService</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1leader__election_1_1_leader_election_service.html</Path>
    <Anchor>ac72993f88f95fb72811aae28c204e826</Anchor>
    <DeclaredIn>LeaderElectionService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>LeaderElectionService</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::leader_election::LeaderElectionService</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1leader__election_1_1_leader_election_service.html</Path>
    <Anchor>a0cc3acf72570a6d09157feb629c626ac</Anchor>
    <DeclaredIn>LeaderElectionService.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::log</Name>
      <APILanguage>c</APILanguage>
      <Type>ns</Type>
      <Scope>spdr::log</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1log.html</Path>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Level_NONE</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>spdr::log</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1log.html</Path>
    <Anchor>a9330583e0b7df10d7303e7811cebc267afbcb1f876ff41ffb6763d6899978d1ed</Anchor>
    <Abstract>Level_NONE.</Abstract>
    <DeclaredIn>LogListener.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Level_ERROR</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>spdr::log</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1log.html</Path>
    <Anchor>a9330583e0b7df10d7303e7811cebc267af86ab2c30173acc35f68dfb726a5ac7a</Anchor>
    <Abstract>Level_ERROR.</Abstract>
    <DeclaredIn>LogListener.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Level_WARNING</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>spdr::log</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1log.html</Path>
    <Anchor>a9330583e0b7df10d7303e7811cebc267a3b655ce42934c580c1f7ecdfc5715172</Anchor>
    <Abstract>Level_WARNING.</Abstract>
    <DeclaredIn>LogListener.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Level_INFO</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>spdr::log</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1log.html</Path>
    <Anchor>a9330583e0b7df10d7303e7811cebc267a9a9993bed96cb2ad6049f2bb5d6a77a8</Anchor>
    <Abstract>Level_INFO.</Abstract>
    <DeclaredIn>LogListener.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Level_CONFIG</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>spdr::log</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1log.html</Path>
    <Anchor>a9330583e0b7df10d7303e7811cebc267ad481809b3d274a98addc180aae981eaa</Anchor>
    <Abstract>Level_CONFIG.</Abstract>
    <DeclaredIn>LogListener.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Level_EVENT</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>spdr::log</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1log.html</Path>
    <Anchor>a9330583e0b7df10d7303e7811cebc267ad32f105aedc1a9db449dcbdec706f78d</Anchor>
    <Abstract>Level_EVENT.</Abstract>
    <DeclaredIn>LogListener.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Level_DEBUG</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>spdr::log</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1log.html</Path>
    <Anchor>a9330583e0b7df10d7303e7811cebc267a652965a678f8f1ce5689f19ff8e95461</Anchor>
    <Abstract>Level_DEBUG.</Abstract>
    <DeclaredIn>LogListener.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Level_ENTRY</Name>
      <APILanguage>cpp</APILanguage>
      <Type>econst</Type>
      <Scope>spdr::log</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1log.html</Path>
    <Anchor>a9330583e0b7df10d7303e7811cebc267aabb1d55535d5ed45e5af3d1da42cec4c</Anchor>
    <Abstract>Level_ENTRY.</Abstract>
    <DeclaredIn>LogListener.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::log::LogListener</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::log::LogListener</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1log_1_1_log_listener.html</Path>
    <Abstract>An interface to receive internal log events.</Abstract>
    <DeclaredIn>LogListener.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~LogListener</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::log::LogListener</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1log_1_1_log_listener.html</Path>
    <Anchor>a56f151e369c5b0fc51bd795d56a7b1c5</Anchor>
    <DeclaredIn>LogListener.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>onLogEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::log::LogListener</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1log_1_1_log_listener.html</Path>
    <Anchor>a6730a96a7d7926ecc759f22938eb8ff1</Anchor>
    <Abstract>Called when a log event is delivered to the user.</Abstract>
    <DeclaredIn>LogListener.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>LogListener</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::log::LogListener</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1log_1_1_log_listener.html</Path>
    <Anchor>ab553a795f1a3d7044d1f5517059f3394</Anchor>
    <DeclaredIn>LogListener.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::messaging</Name>
      <APILanguage>c</APILanguage>
      <Type>ns</Type>
      <Scope>spdr::messaging</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1messaging.html</Path>
    <Abstract>This name space carries all the classes that provide publish-subscribe messaging.</Abstract>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>P2PStreamRcv_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::messaging</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1messaging.html</Path>
    <Anchor>a8d56b28049e13b43cf8ee30d62120932</Anchor>
    <DeclaredIn>P2PStreamRcv.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>P2PStreamTx_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::messaging</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1messaging.html</Path>
    <Anchor>aa11b299970fe665c6efa4f872a06762f</Anchor>
    <DeclaredIn>P2PStreamTx.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StreamID_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::messaging</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1messaging.html</Path>
    <Anchor>a72d6e315133cf7df19b5b3fb554b7f0a</Anchor>
    <Abstract>A shared pointer to a StreamID.</Abstract>
    <DeclaredIn>StreamID.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Topic_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::messaging</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1messaging.html</Path>
    <Anchor>a9dc0b1048dfd4ee7858a602f81009505</Anchor>
    <DeclaredIn>Topic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TopicPublisher_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::messaging</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1messaging.html</Path>
    <Anchor>aef0623b1297be8f44fddddd82b5777c4</Anchor>
    <DeclaredIn>TopicPublisher.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TopicSubscriber_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::messaging</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1messaging.html</Path>
    <Anchor>a7b0d97d31d164395cc632735a97ea3ce</Anchor>
    <DeclaredIn>TopicSubscriber.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TxMessage_SPtr</Name>
      <APILanguage>cpp</APILanguage>
      <Type>tdef</Type>
      <Scope>spdr::messaging</Scope>
    </TokenIdentifier>
    <Path>namespacespdr_1_1messaging.html</Path>
    <Anchor>ad149f10ae7cbc3894197af474aedc98f</Anchor>
    <DeclaredIn>TxMessage.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::messaging::MessageListener</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::messaging::MessageListener</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_message_listener.html</Path>
    <DeclaredIn>MessageListener.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>MessageListener</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::MessageListener</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_message_listener.html</Path>
    <Anchor>a34503fe170987783f23d63d2c6604d4b</Anchor>
    <DeclaredIn>MessageListener.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~MessageListener</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::MessageListener</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_message_listener.html</Path>
    <Anchor>ab7a680429931f7c43392452b1ff6bd47</Anchor>
    <DeclaredIn>MessageListener.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>onMessage</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::MessageListener</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_message_listener.html</Path>
    <Anchor>a5ced82f8ca014cd8cef3ca0f8b7af933</Anchor>
    <DeclaredIn>MessageListener.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::messaging::P2PStreamEventListener</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::messaging::P2PStreamEventListener</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_p2_p_stream_event_listener.html</Path>
    <DeclaredIn>P2PStreamEventListener.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~P2PStreamEventListener</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::P2PStreamEventListener</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_p2_p_stream_event_listener.html</Path>
    <Anchor>a6085f2faf9506eaef237ec239ee4dcd8</Anchor>
    <DeclaredIn>P2PStreamEventListener.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>onEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::P2PStreamEventListener</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_p2_p_stream_event_listener.html</Path>
    <Anchor>aebf12921b01904583eda62f2b9fb06f7</Anchor>
    <DeclaredIn>P2PStreamEventListener.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>P2PStreamEventListener</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::P2PStreamEventListener</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_p2_p_stream_event_listener.html</Path>
    <Anchor>a7431ad1e9fe3ac04cf4f7a890450da8e</Anchor>
    <DeclaredIn>P2PStreamEventListener.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::messaging::P2PStreamRcv</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::messaging::P2PStreamRcv</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_p2_p_stream_rcv.html</Path>
    <DeclaredIn>P2PStreamRcv.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~P2PStreamRcv</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::P2PStreamRcv</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_p2_p_stream_rcv.html</Path>
    <Anchor>ab4a8f16225c888349595b8d16df257fc</Anchor>
    <DeclaredIn>P2PStreamRcv.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>close</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::P2PStreamRcv</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_p2_p_stream_rcv.html</Path>
    <Anchor>a7f6997c30f7916c941a79c16a196d55c</Anchor>
    <DeclaredIn>P2PStreamRcv.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isOpen</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::P2PStreamRcv</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_p2_p_stream_rcv.html</Path>
    <Anchor>a1cc7bc2bb2544565200f4d90215f89c1</Anchor>
    <DeclaredIn>P2PStreamRcv.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>rejectStream</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::P2PStreamRcv</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_p2_p_stream_rcv.html</Path>
    <Anchor>a581eaf9de1289f489ffce0e21c68dd2d</Anchor>
    <DeclaredIn>P2PStreamRcv.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>toString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::P2PStreamRcv</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_p2_p_stream_rcv.html</Path>
    <Anchor>ab24bfe28f87b33fad21222ea092b2fdb</Anchor>
    <DeclaredIn>P2PStreamRcv.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>P2PStreamRcv</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::P2PStreamRcv</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_p2_p_stream_rcv.html</Path>
    <Anchor>ae69a0741198ecd15d27dc955988e44e5</Anchor>
    <DeclaredIn>P2PStreamRcv.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::messaging::P2PStreamTx</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::messaging::P2PStreamTx</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_p2_p_stream_tx.html</Path>
    <DeclaredIn>P2PStreamTx.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~P2PStreamTx</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::P2PStreamTx</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_p2_p_stream_tx.html</Path>
    <Anchor>a0f69d75cdafa6b299258103caa985c66</Anchor>
    <DeclaredIn>P2PStreamTx.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getTarget</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::P2PStreamTx</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_p2_p_stream_tx.html</Path>
    <Anchor>a146d8bc19eaae69e413f621136e7eb5f</Anchor>
    <DeclaredIn>P2PStreamTx.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getStreamID</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::P2PStreamTx</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_p2_p_stream_tx.html</Path>
    <Anchor>abeee4e97ef56d5b36e7ebbdc523bfe91</Anchor>
    <DeclaredIn>P2PStreamTx.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>submitMessage</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::P2PStreamTx</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_p2_p_stream_tx.html</Path>
    <Anchor>add7fea9d50484052cf8a5ab842db7310</Anchor>
    <DeclaredIn>P2PStreamTx.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>close</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::P2PStreamTx</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_p2_p_stream_tx.html</Path>
    <Anchor>a586b8fedd38956c631788a1bf89f711e</Anchor>
    <DeclaredIn>P2PStreamTx.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isOpen</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::P2PStreamTx</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_p2_p_stream_tx.html</Path>
    <Anchor>aaa13b6f3cf813a29543d1f4ef1a977ed</Anchor>
    <DeclaredIn>P2PStreamTx.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>toString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::P2PStreamTx</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_p2_p_stream_tx.html</Path>
    <Anchor>a2635946f22a1b8fcb5ef71fe046184f0</Anchor>
    <DeclaredIn>P2PStreamTx.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>P2PStreamTx</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::P2PStreamTx</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_p2_p_stream_tx.html</Path>
    <Anchor>a616dd0a50a9c74c75df94bede9870049</Anchor>
    <DeclaredIn>P2PStreamTx.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::messaging::PubSubEventListener</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::messaging::PubSubEventListener</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_pub_sub_event_listener.html</Path>
    <DeclaredIn>PubSubEventListener.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>PubSubEventListener</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::PubSubEventListener</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_pub_sub_event_listener.html</Path>
    <Anchor>a8f8905201534aeeb40ee54a9a02b7b70</Anchor>
    <DeclaredIn>PubSubEventListener.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~PubSubEventListener</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::PubSubEventListener</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_pub_sub_event_listener.html</Path>
    <Anchor>af4943df33d85814752b353cdf8596d6d</Anchor>
    <DeclaredIn>PubSubEventListener.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>onEvent</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::PubSubEventListener</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_pub_sub_event_listener.html</Path>
    <Anchor>a59d93efcfaa413206c66d23fe796b566</Anchor>
    <DeclaredIn>PubSubEventListener.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::messaging::RxMessage</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::messaging::RxMessage</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_rx_message.html</Path>
    <Abstract>An incoming message.</Abstract>
    <DeclaredIn>RxMessage.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>RxMessage</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::RxMessage</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_rx_message.html</Path>
    <Anchor>ac21e80a413c904499084761bcbf552cd</Anchor>
    <DeclaredIn>RxMessage.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>RxMessage</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::RxMessage</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_rx_message.html</Path>
    <Anchor>ae1fe7b80dece3354d745da9c503c0f00</Anchor>
    <DeclaredIn>RxMessage.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::RxMessage</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_rx_message.html</Path>
    <Anchor>a942b384f1a20617af144c5dbc666e268</Anchor>
    <DeclaredIn>RxMessage.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~RxMessage</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::RxMessage</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_rx_message.html</Path>
    <Anchor>a5f177e51fe61e5efde86e86533d9c99c</Anchor>
    <DeclaredIn>RxMessage.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getBuffer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::RxMessage</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_rx_message.html</Path>
    <Anchor>a5836a64d73165677823e4d6f188c98ec</Anchor>
    <Abstract>Get the message content.</Abstract>
    <DeclaredIn>RxMessage.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getMessageID</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::RxMessage</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_rx_message.html</Path>
    <Anchor>a584b72c643d1344478ef50cbce620a08</Anchor>
    <Abstract>The message sequence number.</Abstract>
    <DeclaredIn>RxMessage.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getStreamID</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::RxMessage</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_rx_message.html</Path>
    <Anchor>a904c838c52eb94aad7588fa87336c59b</Anchor>
    <Abstract>The transport stream ID.</Abstract>
    <DeclaredIn>RxMessage.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getTopic</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::RxMessage</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_rx_message.html</Path>
    <Anchor>aa5eed90549bd22d8ba5ae314f908da62</Anchor>
    <Abstract>The topic, if applicable.</Abstract>
    <DeclaredIn>RxMessage.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getSource</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::RxMessage</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_rx_message.html</Path>
    <Anchor>a545a0a0695429a3378c762ea41b95f64</Anchor>
    <Abstract>The source node.</Abstract>
    <DeclaredIn>RxMessage.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>toString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::RxMessage</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_rx_message.html</Path>
    <Anchor>a09602f813a863567d1e7dd6b14331b3f</Anchor>
    <Abstract>A string representation.</Abstract>
    <DeclaredIn>RxMessage.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>buffer_</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::messaging::RxMessage</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_rx_message.html</Path>
    <Anchor>a96f653293e02afd15bd6db241656f9d8</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>messageID_</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::messaging::RxMessage</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_rx_message.html</Path>
    <Anchor>aead8c49cb7b7bc054e62bd0d2b0df953</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>streamID_</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::messaging::RxMessage</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_rx_message.html</Path>
    <Anchor>ade07d788cca7728098bfb685f7ea207d</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>topic_</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::messaging::RxMessage</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_rx_message.html</Path>
    <Anchor>af6bb636ee159784e7f26faa8f714f1a8</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>source_</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::messaging::RxMessage</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_rx_message.html</Path>
    <Anchor>a139a82eb7e088853a3ebab98121b8a6f</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::messaging::StreamID</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::messaging::StreamID</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_stream_i_d.html</Path>
    <Abstract>A unique identifier of a transport entity.</Abstract>
    <DeclaredIn>StreamID.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~StreamID</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::StreamID</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_stream_i_d.html</Path>
    <Anchor>a429d3e477457ca6aa59ae7fad11fbfcc</Anchor>
    <DeclaredIn>StreamID.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>equalsPrefix</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::StreamID</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_stream_i_d.html</Path>
    <Anchor>ad8501fb6708a9570dfd91eaa2d1acda3</Anchor>
    <Abstract>Compare the prefixes of two StreamID&amp;#39;s for equality.</Abstract>
    <DeclaredIn>StreamID.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::StreamID</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_stream_i_d.html</Path>
    <Anchor>aee2af42df7281ba762ee25515fb100d6</Anchor>
    <DeclaredIn>StreamID.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::StreamID</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_stream_i_d.html</Path>
    <Anchor>ac23c98c81ba86d44727c8fb59a03f439</Anchor>
    <DeclaredIn>StreamID.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::StreamID</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_stream_i_d.html</Path>
    <Anchor>ab23f62a83391aab9b7a08b0a4062e219</Anchor>
    <DeclaredIn>StreamID.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::StreamID</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_stream_i_d.html</Path>
    <Anchor>a49dd89d07e0689e71a810de0223f5dea</Anchor>
    <DeclaredIn>StreamID.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::StreamID</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_stream_i_d.html</Path>
    <Anchor>a013168d93b3183e3863e443931ffb981</Anchor>
    <DeclaredIn>StreamID.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::StreamID</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_stream_i_d.html</Path>
    <Anchor>ab997863d3c1cf5d750b4e64faac0baa6</Anchor>
    <DeclaredIn>StreamID.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hash_value</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::StreamID</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_stream_i_d.html</Path>
    <Anchor>abb1c4626acc014839bfd2b9bc350f7ea</Anchor>
    <Abstract>Returns the hash value.</Abstract>
    <DeclaredIn>StreamID.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>toString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::StreamID</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_stream_i_d.html</Path>
    <Anchor>a7f6727c24671a922eaba5737425ab76d</Anchor>
    <DeclaredIn>StreamID.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StreamID</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::StreamID</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_stream_i_d.html</Path>
    <Anchor>af8c025e0c52e5729dd1f7dc3c187dcd5</Anchor>
    <DeclaredIn>StreamID.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>StreamID</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::StreamID</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_stream_i_d.html</Path>
    <Anchor>acd1427cbbc17810d01fe16a80a9dc0ff</Anchor>
    <DeclaredIn>StreamID.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>streamID_</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::messaging::StreamID</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_stream_i_d.html</Path>
    <Anchor>a58e6dfd6a904032a420eeb24da731291</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::messaging::Topic</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::messaging::Topic</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_topic.html</Path>
    <Abstract>This interface represents a topic.</Abstract>
    <DeclaredIn>Topic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~Topic</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::Topic</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_topic.html</Path>
    <Anchor>a9fc71be9a7fbb2522fc7a82930d8426d</Anchor>
    <DeclaredIn>Topic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getName</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::Topic</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_topic.html</Path>
    <Anchor>ac7d08ecbafd3c6178a500ce2f907f15b</Anchor>
    <DeclaredIn>Topic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator==</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::Topic</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_topic.html</Path>
    <Anchor>a1dbe7926498f72bf6027d94c1987e082</Anchor>
    <DeclaredIn>Topic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator!=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::Topic</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_topic.html</Path>
    <Anchor>ab7aa7636f5d64c77d55e496bd5e547a7</Anchor>
    <DeclaredIn>Topic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::Topic</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_topic.html</Path>
    <Anchor>a026a067ffb892b59e1c48eed185399d7</Anchor>
    <DeclaredIn>Topic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&lt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::Topic</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_topic.html</Path>
    <Anchor>a3bdb135ada4d08c754a315a57fc3e802</Anchor>
    <DeclaredIn>Topic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::Topic</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_topic.html</Path>
    <Anchor>a861a3cb17195af0ddd75d6941ab05c4f</Anchor>
    <DeclaredIn>Topic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>operator&gt;=</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::Topic</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_topic.html</Path>
    <Anchor>a24637aad9eee335acaf9fa58535c92bd</Anchor>
    <DeclaredIn>Topic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isGlobalScope</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::Topic</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_topic.html</Path>
    <Anchor>ac66d35afc105ed74f9c2bc47d161d552</Anchor>
    <Abstract>Whether the topic has Global or Local scope.</Abstract>
    <DeclaredIn>Topic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>hash_value</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::Topic</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_topic.html</Path>
    <Anchor>a9227bd5ec4c517bc4015aa9fae9028d0</Anchor>
    <Abstract>Returns the hash value.</Abstract>
    <DeclaredIn>Topic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>toString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::Topic</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_topic.html</Path>
    <Anchor>afcea1ed4ce96958b9e11e940fb1728fe</Anchor>
    <Abstract>A string representation.</Abstract>
    <DeclaredIn>Topic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Topic</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::Topic</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_topic.html</Path>
    <Anchor>a2b3cbb24642b00260303fd2761b75a2a</Anchor>
    <DeclaredIn>Topic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>Topic</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::Topic</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_topic.html</Path>
    <Anchor>a73fe3de7cc4305f92ef2d0f7544f9643</Anchor>
    <DeclaredIn>Topic.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>name</Name>
      <APILanguage>cpp</APILanguage>
      <Type>data</Type>
      <Scope>spdr::messaging::Topic</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_topic.html</Path>
    <Anchor>aaab6417b1e05c1b392b51d04cee10ca3</Anchor>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::messaging::TopicPublisher</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::messaging::TopicPublisher</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_topic_publisher.html</Path>
    <Abstract>A TopicPublisher is a source for a stream of messages on a specific topic, that maintains a specific ...</Abstract>
    <DeclaredIn>TopicPublisher.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~TopicPublisher</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::TopicPublisher</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_topic_publisher.html</Path>
    <Anchor>a79c136e92e30f69d4e3f3796c44b9b1e</Anchor>
    <DeclaredIn>TopicPublisher.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>close</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::TopicPublisher</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_topic_publisher.html</Path>
    <Anchor>a1b276999c22c820b8904b50b523ff8f5</Anchor>
    <DeclaredIn>TopicPublisher.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isOpen</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::TopicPublisher</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_topic_publisher.html</Path>
    <Anchor>a681db4914b4a3d3c95e8a00574f3e66d</Anchor>
    <DeclaredIn>TopicPublisher.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getTopic</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::TopicPublisher</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_topic_publisher.html</Path>
    <Anchor>ae895f8aaaf6632be267c4590585bfdac</Anchor>
    <DeclaredIn>TopicPublisher.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getStreamID</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::TopicPublisher</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_topic_publisher.html</Path>
    <Anchor>a04b1ce7614321bf465ae66291becaec9</Anchor>
    <DeclaredIn>TopicPublisher.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>publishMessage</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::TopicPublisher</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_topic_publisher.html</Path>
    <Anchor>adfa7942f222d766a204751fb5e0feb60</Anchor>
    <DeclaredIn>TopicPublisher.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>toString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::TopicPublisher</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_topic_publisher.html</Path>
    <Anchor>a8b34a2e25a401dd319d49dbb99dd2c05</Anchor>
    <DeclaredIn>TopicPublisher.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TopicPublisher</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::TopicPublisher</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_topic_publisher.html</Path>
    <Anchor>a558267cdafe3245890afd09939f860c1</Anchor>
    <DeclaredIn>TopicPublisher.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::messaging::TopicSubscriber</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::messaging::TopicSubscriber</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_topic_subscriber.html</Path>
    <Abstract>This interface provides the means for subscribing to a Topic.</Abstract>
    <DeclaredIn>TopicSubscriber.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~TopicSubscriber</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::TopicSubscriber</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_topic_subscriber.html</Path>
    <Anchor>a049f8a3faf284887c89a953a6f5bb699</Anchor>
    <DeclaredIn>TopicSubscriber.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>close</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::TopicSubscriber</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_topic_subscriber.html</Path>
    <Anchor>aa4ece4710fede594fb85d8d513c38607</Anchor>
    <DeclaredIn>TopicSubscriber.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>isOpen</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::TopicSubscriber</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_topic_subscriber.html</Path>
    <Anchor>a55c7054da04d87bfa2430cd8f17350aa</Anchor>
    <DeclaredIn>TopicSubscriber.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getTopic</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::TopicSubscriber</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_topic_subscriber.html</Path>
    <Anchor>a143268ea96f5c095146a458a96298b65</Anchor>
    <DeclaredIn>TopicSubscriber.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>toString</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::TopicSubscriber</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_topic_subscriber.html</Path>
    <Anchor>a717912d888c16513ba3d26f3314c74b6</Anchor>
    <DeclaredIn>TopicSubscriber.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TopicSubscriber</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::TopicSubscriber</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_topic_subscriber.html</Path>
    <Anchor>ad77642436ad4fa9f9b22490495e7e002</Anchor>
    <DeclaredIn>TopicSubscriber.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>spdr::messaging::TxMessage</Name>
      <APILanguage>c</APILanguage>
      <Type>cl</Type>
      <Scope>spdr::messaging::TxMessage</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_tx_message.html</Path>
    <Abstract>An outgoing message.</Abstract>
    <DeclaredIn>TxMessage.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>TxMessage</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::TxMessage</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_tx_message.html</Path>
    <Anchor>a5bb6077ff9dda9bce50a8e2511658edc</Anchor>
    <DeclaredIn>TxMessage.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>~TxMessage</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::TxMessage</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_tx_message.html</Path>
    <Anchor>abc16b598155fdcddf259f35d859791bd</Anchor>
    <DeclaredIn>TxMessage.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>setBuffer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::TxMessage</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_tx_message.html</Path>
    <Anchor>ae378703eb23a2f24c0f3d27035b78a07</Anchor>
    <DeclaredIn>TxMessage.h</DeclaredIn>
  </Token>
  <Token>
    <TokenIdentifier>
      <Name>getBuffer</Name>
      <APILanguage>cpp</APILanguage>
      <Type>instm</Type>
      <Scope>spdr::messaging::TxMessage</Scope>
    </TokenIdentifier>
    <Path>classspdr_1_1messaging_1_1_tx_message.html</Path>
    <Anchor>ae7ef48b9652bddc05ce39bd130b38366</Anchor>
    <DeclaredIn>TxMessage.h</DeclaredIn>
  </Token>
</Tokens>
